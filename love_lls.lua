--Autogenerated

---@alias love.Variant table|boolean|string|number|love.Object

---@version 11.5
---@class loveModule.love
---@field audio loveModule.love.audio
---@field data loveModule.love.data
---@field event loveModule.love.event
---@field filesystem loveModule.love.filesystem
---@field font loveModule.love.font
---@field graphics loveModule.love.graphics
---@field image loveModule.love.image
---@field joystick loveModule.love.joystick
---@field keyboard loveModule.love.keyboard
---@field math loveModule.love.math
---@field mouse loveModule.love.mouse
---@field physics loveModule.love.physics
---@field sound loveModule.love.sound
---@field system loveModule.love.system
---@field thread loveModule.love.thread
---@field timer loveModule.love.timer
---@field touch loveModule.love.touch
---@field video loveModule.love.video
---@field window loveModule.love.window
local temp__loveModule_love = {}

---Provides an interface to create noise with the user's speakers.
---@class loveModule.love.audio
local temp__loveModule_love_audio = {}

---Represents an audio input device capable of recording sounds.
---@class love.audio.RecordingDevice : love.Object
local temp__love_audio_RecordingDevice = {}

---A Source represents audio you can play back.You can do interesting things with Sources, like set the volume, pitch, and its position relative to the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.The Source controls (play/pause/stop) act according to the following state table.
---@class love.audio.Source : love.Object
local temp__love_audio_Source = {}

---Provides functionality for creating and transforming data.
---@class loveModule.love.data
local temp__loveModule_love_data = {}

---Data object containing arbitrary bytes in an contiguous memory.There are currently no LÖVE functions provided for manipulating the contents of a ByteData, but Data:getPointer can be used with LuaJIT's FFI to access and write to the contents directly.
---@class love.data.ByteData : love.Object, love.Data
local temp__love_data_ByteData = {}

---Represents byte data compressed using a specific algorithm.love.data.decompress can be used to de-compress the data (or love.math.decompress in 0.10.2 or earlier).
---@class love.data.CompressedData : love.Data, love.Object
local temp__love_data_CompressedData = {}

---Manages events, like keypresses.
---@class loveModule.love.event
local temp__loveModule_love_event = {}

---Provides an interface to the user's filesystem.
---@class loveModule.love.filesystem
local temp__loveModule_love_filesystem = {}

---Represents a file dropped onto the window.Note that the DroppedFile type can only be obtained from love.filedropped callback, and can't be constructed manually by the user.
---@class love.filesystem.DroppedFile : love.filesystem.File, love.Object
local temp__love_filesystem_DroppedFile = {}

---Represents a file on the filesystem. A function that takes a file path can also take a File.
---@class love.filesystem.File : love.Object
local temp__love_filesystem_File = {}

---Data representing the contents of a file.
---@class love.filesystem.FileData : love.Data, love.Object
local temp__love_filesystem_FileData = {}

---Allows you to work with fonts.
---@class loveModule.love.font
local temp__loveModule_love_font = {}

---A GlyphData represents a drawable symbol of a font Rasterizer.
---@class love.font.GlyphData : love.Data, love.Object
local temp__love_font_GlyphData = {}

---A Rasterizer handles font rendering, containing the font data (image or TrueType font) and drawable glyphs.
---@class love.font.Rasterizer : love.Object
local temp__love_font_Rasterizer = {}

---The primary responsibility for the love.graphics module is the drawing of lines, shapes, text, Images and other Drawable objects onto the screen. Its secondary responsibilities include loading external files (including Images and Fonts) into memory, creating specialized objects (such as ParticleSystems or Canvases) and managing screen geometry.LÖVE's coordinate system is rooted in the upper-left corner of the screen, which is at location (0, 0). The x axis is horizontal: larger values are further to the right. The y axis is vertical: larger values are further towards the bottom.In many cases, you draw images or shapes in terms of their upper-left corner.Many of the functions are used to manipulate the graphics coordinate system, which is essentially the way coordinates are mapped to the display. You can change the position, scale, and even rotation in this way.
---@class loveModule.love.graphics
local temp__loveModule_love_graphics = {}

---A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as "render to texture".By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item,  you can reduce the number of draw operations performed each frame.In versions prior to love.graphics.isSupported("canvas") could be used to check for support at runtime.
---@class love.graphics.Canvas : love.graphics.Texture, love.graphics.Drawable, love.Object
local temp__love_graphics_Canvas = {}

---Superclass for all things that can be drawn on screen. This is an abstract type that can't be created directly.
---@class love.graphics.Drawable : love.Object
local temp__love_graphics_Drawable = {}

---Defines the shape of characters that can be drawn onto the screen.
---@class love.graphics.Font : love.Object
local temp__love_graphics_Font = {}

---Drawable image type.
---@class love.graphics.Image : love.graphics.Texture, love.graphics.Drawable, love.Object
local temp__love_graphics_Image = {}

---A 2D polygon mesh used for drawing arbitrary textured shapes.
---@class love.graphics.Mesh : love.graphics.Drawable, love.Object
local temp__love_graphics_Mesh = {}

---A ParticleSystem can be used to create particle effects like fire or smoke.The particle system has to be created using update it in the update callback to see any changes in the particles emitted.The particle system won't create any particles unless you call setParticleLifetime and setEmissionRate.
---@class love.graphics.ParticleSystem : love.graphics.Drawable, love.Object
local temp__love_graphics_ParticleSystem = {}

---A quadrilateral (a polygon with four sides and four corners) with texture coordinate information.Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images.
---@class love.graphics.Quad : love.Object
local temp__love_graphics_Quad = {}

---A Shader is used for advanced hardware-accelerated pixel or vertex manipulation. These effects are written in a language based on GLSL (OpenGL Shading Language) with a few things simplified for easier coding.Potential uses for shaders include HDR/bloom, motion blur, grayscale/invert/sepia/any kind of color effect, reflection/refraction, distortions, bump mapping, and much more! Here is a collection of basic shaders and good starting point to learn: https://github.com/vrld/moonshine
---@class love.graphics.Shader : love.Object
local temp__love_graphics_Shader = {}

---Using a single image, draw any number of identical copies of the image using a single call to love.graphics.draw(). This can be used, for example, to draw repeating copies of a single background image with high performance.A SpriteBatch can be even more useful when the underlying image is a texture atlas (a single image file containing many independent images); by adding Quads to the batch, different sub-images from within the atlas can be drawn.
---@class love.graphics.SpriteBatch : love.graphics.Drawable, love.Object
local temp__love_graphics_SpriteBatch = {}

---Drawable text.
---@class love.graphics.Text : love.graphics.Drawable, love.Object
local temp__love_graphics_Text = {}

---Superclass for drawable objects which represent a texture. All Textures can be drawn with Quads. This is an abstract type that can't be created directly.
---@class love.graphics.Texture : love.graphics.Drawable, love.Object
local temp__love_graphics_Texture = {}

---A drawable video.
---@class love.graphics.Video : love.graphics.Drawable, love.Object
local temp__love_graphics_Video = {}

---Provides an interface to decode encoded image data.
---@class loveModule.love.image
local temp__loveModule_love_image = {}

---Represents compressed image data designed to stay compressed in RAM.CompressedImageData encompasses standard compressed texture formats such as  DXT1, DXT5, and BC5 / 3Dc.You can't draw CompressedImageData directly to the screen. See Image for that.
---@class love.image.CompressedImageData : love.Data, love.Object
local temp__love_image_CompressedImageData = {}

---Raw (decoded) image data.You can't draw ImageData directly to screen. See Image for that.
---@class love.image.ImageData : love.Data, love.Object
local temp__love_image_ImageData = {}

---Provides an interface to the user's joystick.
---@class loveModule.love.joystick
local temp__loveModule_love_joystick = {}

---Represents a physical joystick.
---@class love.joystick.Joystick : love.Object
local temp__love_joystick_Joystick = {}

---Provides an interface to the user's keyboard.
---@class loveModule.love.keyboard
local temp__loveModule_love_keyboard = {}

---Provides system-independent mathematical functions.
---@class loveModule.love.math
local temp__loveModule_love_math = {}

---A Bézier curve object that can evaluate and render Bézier curves of arbitrary degree.For more information on Bézier curves check this great article on Wikipedia.
---@class love.math.BezierCurve : love.Object
local temp__love_math_BezierCurve = {}

---A random number generation object which has its own random state.
---@class love.math.RandomGenerator : love.Object
local temp__love_math_RandomGenerator = {}

---Object containing a coordinate system transformation.The love.graphics module has several functions and function variants which accept Transform objects.
---@class love.math.Transform : love.Object
local temp__love_math_Transform = {}

---Provides an interface to the user's mouse.
---@class loveModule.love.mouse
local temp__loveModule_love_mouse = {}

---Represents a hardware cursor.
---@class love.mouse.Cursor : love.Object
local temp__love_mouse_Cursor = {}

---Can simulate 2D rigid body physics in a realistic manner. This module is based on Box2D, and this API corresponds to the Box2D API as closely as possible.
---@class loveModule.love.physics
local temp__loveModule_love_physics = {}

---Bodies are objects with velocity and position.
---@class love.physics.Body : love.Object
local temp__love_physics_Body = {}

---A ChainShape consists of multiple line segments. It can be used to create the boundaries of your terrain. The shape does not have volume and can only collide with PolygonShape and CircleShape.Unlike the PolygonShape, the ChainShape does not have a vertices limit or has to form a convex shape, but self intersections are not supported.
---@class love.physics.ChainShape : love.physics.Shape, love.Object
local temp__love_physics_ChainShape = {}

---Circle extends Shape and adds a radius and a local position.
---@class love.physics.CircleShape : love.physics.Shape, love.Object
local temp__love_physics_CircleShape = {}

---Contacts are objects created to manage collisions in worlds.
---@class love.physics.Contact : love.Object
local temp__love_physics_Contact = {}

---Keeps two bodies at the same distance.
---@class love.physics.DistanceJoint : love.physics.Joint, love.Object
local temp__love_physics_DistanceJoint = {}

---A EdgeShape is a line segment. They can be used to create the boundaries of your terrain. The shape does not have volume and can only collide with PolygonShape and CircleShape.
---@class love.physics.EdgeShape : love.physics.Shape, love.Object
local temp__love_physics_EdgeShape = {}

---Fixtures attach shapes to bodies.
---@class love.physics.Fixture : love.Object
local temp__love_physics_Fixture = {}

---A FrictionJoint applies friction to a body.
---@class love.physics.FrictionJoint : love.physics.Joint, love.Object
local temp__love_physics_FrictionJoint = {}

---Keeps bodies together in such a way that they act like gears.
---@class love.physics.GearJoint : love.physics.Joint, love.Object
local temp__love_physics_GearJoint = {}

---Attach multiple bodies together to interact in unique ways.
---@class love.physics.Joint : love.Object
local temp__love_physics_Joint = {}

---Controls the relative motion between two Bodies. Position and rotation offsets can be specified, as well as the maximum motor force and torque that will be applied to reach the target offsets.
---@class love.physics.MotorJoint : love.physics.Joint, love.Object
local temp__love_physics_MotorJoint = {}

---For controlling objects with the mouse.
---@class love.physics.MouseJoint : love.physics.Joint, love.Object
local temp__love_physics_MouseJoint = {}

---A PolygonShape is a convex polygon with up to 8 vertices.
---@class love.physics.PolygonShape : love.physics.Shape, love.Object
local temp__love_physics_PolygonShape = {}

---Restricts relative motion between Bodies to one shared axis.
---@class love.physics.PrismaticJoint : love.physics.Joint, love.Object
local temp__love_physics_PrismaticJoint = {}

---Allows you to simulate bodies connected through pulleys.
---@class love.physics.PulleyJoint : love.physics.Joint, love.Object
local temp__love_physics_PulleyJoint = {}

---Allow two Bodies to revolve around a shared point.
---@class love.physics.RevoluteJoint : love.physics.Joint, love.Object
local temp__love_physics_RevoluteJoint = {}

---The RopeJoint enforces a maximum distance between two points on two bodies. It has no other effect.
---@class love.physics.RopeJoint : love.physics.Joint, love.Object
local temp__love_physics_RopeJoint = {}

---Shapes are solid 2d geometrical objects which handle the mass and collision of a Body in love.physics.Shapes are attached to a Body via a Fixture. The Shape object is copied when this happens. The Shape's position is relative to the position of the Body it has been attached to.
---@class love.physics.Shape : love.Object
local temp__love_physics_Shape = {}

---A WeldJoint essentially glues two bodies together.
---@class love.physics.WeldJoint : love.physics.Joint, love.Object
local temp__love_physics_WeldJoint = {}

---Restricts a point on the second body to a line on the first body.
---@class love.physics.WheelJoint : love.physics.Joint, love.Object
local temp__love_physics_WheelJoint = {}

---A world is an object that contains all bodies and joints.
---@class love.physics.World : love.Object
local temp__love_physics_World = {}

---This module is responsible for decoding sound files. It can't play the sounds, see love.audio for that.
---@class loveModule.love.sound
local temp__loveModule_love_sound = {}

---An object which can gradually decode a sound file.
---@class love.sound.Decoder : love.Object
local temp__love_sound_Decoder = {}

---Contains raw audio samples.You can not play SoundData back directly. You must wrap a Source object around it.
---@class love.sound.SoundData : love.Data, love.Object
local temp__love_sound_SoundData = {}

---Provides access to information about the user's system.
---@class loveModule.love.system
local temp__loveModule_love_system = {}

---Allows you to work with threads.Threads are separate Lua environments, running in parallel to the main code. As their code runs separately, they can be used to compute complex operations without adversely affecting the frame rate of the main thread. However, as they are separate environments, they cannot access the variables and functions of the main thread, and communication between threads is limited.All LOVE objects (userdata) are shared among threads so you'll only have to send their references across threads. You may run into concurrency issues if you manipulate an object on multiple threads at the same time.When a Thread is started, it only loads the love.thread module. Every other module has to be loaded with require.
---@class loveModule.love.thread
local temp__loveModule_love_thread = {}

---An object which can be used to send and receive data between different threads.
---@class love.thread.Channel : love.Object
local temp__love_thread_Channel = {}

---A Thread is a chunk of code that can run in parallel with other threads. Data can be sent between different threads with Channel objects.
---@class love.thread.Thread : love.Object
local temp__love_thread_Thread = {}

---Provides an interface to the user's clock.
---@class loveModule.love.timer
local temp__loveModule_love_timer = {}

---Provides an interface to touch-screen presses.
---@class loveModule.love.touch
local temp__loveModule_love_touch = {}

---This module is responsible for decoding, controlling, and streaming video files.It can't draw the videos, see love.graphics.newVideo and Video objects for that.
---@class loveModule.love.video
local temp__loveModule_love_video = {}

---An object which decodes, streams, and controls Videos.
---@class love.video.VideoStream : love.Object
local temp__love_video_VideoStream = {}

---Provides an interface for modifying and retrieving information about the program's window.
---@class loveModule.love.window
local temp__loveModule_love_window = {}

---The superclass of all data.
---@class love.Data : love.Object
local temp__love_Data = {}

---The superclass of all LÖVE types.
---@class love.Object
local temp__love_Object = {}

---@alias loveModule.love.audio.DistanceModel #The different distance models.Extended information can be found in the chapter "3.4. Attenuation By Distance" of the OpenAL 1.1 specification.
---|"none" # Sources do not get attenuated.
---|"inverse" # Inverse distance attenuation.
---|"inverseclamped" # Inverse distance attenuation. Gain is clamped. In version 0.9.2 and older this is named '''inverse clamped'''.
---|"linear" # Linear attenuation.
---|"linearclamped" # Linear attenuation. Gain is clamped. In version 0.9.2 and older this is named '''linear clamped'''.
---|"exponent" # Exponential attenuation.
---|"exponentclamped" # Exponential attenuation. Gain is clamped. In version 0.9.2 and older this is named '''exponent clamped'''.

---@alias loveModule.love.audio.EffectType #The different types of effects supported by love.audio.setEffect.
---|"chorus" # Plays multiple copies of the sound with slight pitch and time variation. Used to make sounds sound "fuller" or "thicker".
---|"compressor" # Decreases the dynamic range of the sound, making the loud and quiet parts closer in volume, producing a more uniform amplitude throughout time.
---|"distortion" # Alters the sound by amplifying it until it clips, shearing off parts of the signal, leading to a compressed and distorted sound.
---|"echo" # Decaying feedback based effect, on the order of seconds. Also known as delay; causes the sound to repeat at regular intervals at a decreasing volume.
---|"equalizer" # Adjust the frequency components of the sound using a 4-band (low-shelf, two band-pass and a high-shelf) equalizer.
---|"flanger" # Plays two copies of the sound; while varying the phase, or equivalently delaying one of them, by amounts on the order of milliseconds, resulting in phasing sounds.
---|"reverb" # Decaying feedback based effect, on the order of milliseconds. Used to simulate the reflection off of the surroundings.
---|"ringmodulator" # An implementation of amplitude modulation; multiplies the source signal with a simple waveform, to produce either volume changes, or inharmonic overtones.

---@alias loveModule.love.audio.EffectWaveform #The different types of waveforms that can be used with the '''ringmodulator''' EffectType.
---|"sawtooth" # A sawtooth wave, also known as a ramp wave. Named for its linear rise, and (near-)instantaneous fall along time.
---|"sine" # A sine wave. Follows a trigonometric sine function.
---|"square" # A square wave. Switches between high and low states (near-)instantaneously.
---|"triangle" # A triangle wave. Follows a linear rise and fall that repeats periodically.

---@alias loveModule.love.audio.FilterType #Types of filters for Sources.
---|"lowpass" # Low-pass filter. High frequency sounds are attenuated.
---|"highpass" # High-pass filter. Low frequency sounds are attenuated.
---|"bandpass" # Band-pass filter. Both high and low frequency sounds are attenuated based on the given parameters.

---@alias loveModule.love.audio.SourceType #Types of audio sources.A good rule of thumb is to use stream for music files and static for all short sound effects. Basically, you want to avoid loading large files into memory at once.
---|"static" # The whole audio is decoded.
---|"stream" # The audio is decoded in chunks when needed.
---|"queue" # The audio must be manually queued by the user.

---@alias loveModule.love.audio.TimeUnit #Units that represent time.
---|"seconds" # Regular seconds.
---|"samples" # Audio samples.

---@alias loveModule.love.data.CompressedDataFormat #Compressed data formats.
---|"lz4" # The LZ4 compression format. Compresses and decompresses very quickly, but the compression ratio is not the best. LZ4-HC is used when compression level 9 is specified. Some benchmarks are available here.
---|"zlib" # The zlib format is DEFLATE-compressed data with a small bit of header data. Compresses relatively slowly and decompresses moderately quickly, and has a decent compression ratio.
---|"gzip" # The gzip format is DEFLATE-compressed data with a slightly larger header than zlib. Since it uses DEFLATE it has the same compression characteristics as the zlib format.
---|"deflate" # Raw DEFLATE-compressed data (no header).

---@alias loveModule.love.data.ContainerType #Return type of various data-returning functions.
---|"data" # Return type is ByteData.
---|"string" # Return type is string.

---@alias loveModule.love.data.EncodeFormat #Encoding format used to encode or decode data.
---|"base64" # Encode/decode data as base64 binary-to-text encoding.
---|"hex" # Encode/decode data as hexadecimal string.

---@alias loveModule.love.data.HashFunction #Hash algorithm of love.data.hash.
---|"md5" # MD5 hash algorithm (16 bytes).
---|"sha1" # SHA1 hash algorithm (20 bytes).
---|"sha224" # SHA2 hash algorithm with message digest size of 224 bits (28 bytes).
---|"sha256" # SHA2 hash algorithm with message digest size of 256 bits (32 bytes).
---|"sha384" # SHA2 hash algorithm with message digest size of 384 bits (48 bytes).
---|"sha512" # SHA2 hash algorithm with message digest size of 512 bits (64 bytes).

---@alias loveModule.love.event.Event #Arguments to love.event.push() and the like.Since 0.8.0, event names are no longer abbreviated.
---|"focus" # Window focus gained or lost
---|"joystickpressed" # Joystick pressed
---|"joystickreleased" # Joystick released
---|"keypressed" # Key pressed
---|"keyreleased" # Key released
---|"mousepressed" # Mouse pressed
---|"mousereleased" # Mouse released
---|"quit" # Quit
---|"resize" # Window size changed by the user
---|"visible" # Window is minimized or un-minimized by the user
---|"mousefocus" # Window mouse focus gained or lost
---|"threaderror" # A Lua error has occurred in a thread
---|"joystickadded" # Joystick connected
---|"joystickremoved" # Joystick disconnected
---|"joystickaxis" # Joystick axis motion
---|"joystickhat" # Joystick hat pressed
---|"gamepadpressed" # Joystick's virtual gamepad button pressed
---|"gamepadreleased" # Joystick's virtual gamepad button released
---|"gamepadaxis" # Joystick's virtual gamepad axis moved
---|"textinput" # User entered text
---|"mousemoved" # Mouse position changed
---|"lowmemory" # Running out of memory on mobile devices system
---|"textedited" # Candidate text for an IME changed
---|"wheelmoved" # Mouse wheel moved
---|"touchpressed" # Touch screen touched
---|"touchreleased" # Touch screen stop touching
---|"touchmoved" # Touch press moved inside touch screen
---|"directorydropped" # Directory is dragged and dropped onto the window
---|"filedropped" # File is dragged and dropped onto the window.
---|"jp" # Joystick pressed
---|"jr" # Joystick released
---|"kp" # Key pressed
---|"kr" # Key released
---|"mp" # Mouse pressed
---|"mr" # Mouse released
---|"q" # Quit
---|"f" # Window focus gained or lost

---@alias loveModule.love.filesystem.BufferMode #Buffer modes for File objects.
---|"none" # No buffering. The result of write and append operations appears immediately.
---|"line" # Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached.
---|"full" # Full buffering. Write and append operations are always buffered until the buffer size limit is reached.

---@alias loveModule.love.filesystem.FileDecoder #How to decode a given FileData.
---|"file" # The data is unencoded.
---|"base64" # The data is base64-encoded.

---@alias loveModule.love.filesystem.FileMode #The different modes you can open a File in.
---|"r" # Open a file for read.
---|"w" # Open a file for write.
---|"a" # Open a file for append.
---|"c" # Do not open a file (represents a closed file.)

---@alias loveModule.love.filesystem.FileType #The type of a file.
---|"file" # Regular file.
---|"directory" # Directory.
---|"symlink" # Symbolic link.
---|"other" # Something completely different like a device.

---@alias loveModule.love.font.HintingMode #True Type hinting mode.
---|"normal" # Default hinting. Should be preferred for typical antialiased fonts.
---|"light" # Results in fuzzier text but can sometimes preserve the original glyph shapes of the text better than normal hinting.
---|"mono" # Results in aliased / unsmoothed text with either full opacity or completely transparent pixels. Should be used when antialiasing is not desired for the font.
---|"none" # Disables hinting for the font. Results in fuzzier text.

---@alias loveModule.love.graphics.AlignMode #Text alignment.
---|"center" # Align text center.
---|"left" # Align text left.
---|"right" # Align text right.
---|"justify" # Align text both left and right.

---@alias loveModule.love.graphics.ArcType #Different types of arcs that can be drawn.
---|"pie" # The arc is drawn like a slice of pie, with the arc circle connected to the center at its end-points.
---|"open" # The arc circle's two end-points are unconnected when the arc is drawn as a line. Behaves like the "closed" arc type when the arc is drawn in filled mode.
---|"closed" # The arc circle's two end-points are connected to each other.

---@alias loveModule.love.graphics.AreaSpreadDistribution #Types of particle area spread distribution.
---|"uniform" # Uniform distribution.
---|"normal" # Normal (gaussian) distribution.
---|"ellipse" # Uniform distribution in an ellipse.
---|"borderellipse" # Distribution in an ellipse with particles spawning at the edges of the ellipse.
---|"borderrectangle" # Distribution in a rectangle with particles spawning at the edges of the rectangle.
---|"none" # No distribution - area spread is disabled.

---@alias loveModule.love.graphics.BlendAlphaMode #Different ways alpha affects color blending. See BlendMode and the BlendMode Formulas for additional notes.
---|"alphamultiply" # The RGB values of what's drawn are multiplied by the alpha values of those colors during blending. This is the default alpha mode.
---|"premultiplied" # The RGB values of what's drawn are '''not''' multiplied by the alpha values of those colors during blending. For most blend modes to work correctly with this alpha mode, the colors of a drawn object need to have had their RGB values multiplied by their alpha values at some point previously ("premultiplied alpha").

---@alias loveModule.love.graphics.BlendMode #Different ways to do color blending. See BlendAlphaMode and the BlendMode Formulas for additional notes.
---|"alpha" # Alpha blending (normal). The alpha of what's drawn determines its opacity.
---|"replace" # The colors of what's drawn completely replace what was on the screen, with no additional blending. The BlendAlphaMode specified in love.graphics.setBlendMode still affects what happens.
---|"screen" # 'Screen' blending.
---|"add" # The pixel colors of what's drawn are added to the pixel colors already on the screen. The alpha of the screen is not modified.
---|"subtract" # The pixel colors of what's drawn are subtracted from the pixel colors already on the screen. The alpha of the screen is not modified.
---|"multiply" # The pixel colors of what's drawn are multiplied with the pixel colors already on the screen (darkening them). The alpha of drawn objects is multiplied with the alpha of the screen rather than determining how much the colors on the screen are affected, even when the "alphamultiply" BlendAlphaMode is used.
---|"lighten" # The pixel colors of what's drawn are compared to the existing pixel colors, and the larger of the two values for each color component is used. Only works when the "premultiplied" BlendAlphaMode is used in love.graphics.setBlendMode.
---|"darken" # The pixel colors of what's drawn are compared to the existing pixel colors, and the smaller of the two values for each color component is used. Only works when the "premultiplied" BlendAlphaMode is used in love.graphics.setBlendMode.
---|"additive" # Additive blend mode.
---|"subtractive" # Subtractive blend mode.
---|"multiplicative" # Multiply blend mode.
---|"premultiplied" # Premultiplied alpha blend mode.

---@alias loveModule.love.graphics.CompareMode #Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches.
---|"equal" # * stencil tests: the stencil value of the pixel must be equal to the supplied value.* depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel.
---|"notequal" # * stencil tests: the stencil value of the pixel must not be equal to the supplied value.* depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel.
---|"less" # * stencil tests: the stencil value of the pixel must be less than the supplied value.* depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel.
---|"lequal" # * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value.* depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel.
---|"gequal" # * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value.* depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel.
---|"greater" # * stencil tests: the stencil value of the pixel must be greater than the supplied value.* depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel.
---|"never" # Objects will never be drawn.
---|"always" # Objects will always be drawn. Effectively disables the depth or stencil test.

---@alias loveModule.love.graphics.CullMode #How Mesh geometry is culled when rendering.
---|"back" # Back-facing triangles in Meshes are culled (not rendered). The vertex order of a triangle determines whether it is back- or front-facing.
---|"front" # Front-facing triangles in Meshes are culled.
---|"none" # Both back- and front-facing triangles in Meshes are rendered.

---@alias loveModule.love.graphics.DrawMode #Controls whether shapes are drawn as an outline, or filled.
---|"fill" # Draw filled shape.
---|"line" # Draw outlined shape.

---@alias loveModule.love.graphics.FilterMode #How the image is filtered when scaling.
---|"linear" # Scale image with linear interpolation.
---|"nearest" # Scale image with nearest neighbor interpolation.

---@alias loveModule.love.graphics.GraphicsFeature #Graphics features that can be checked for with love.graphics.getSupported.
---|"clampzero" # Whether the "clampzero" WrapMode is supported.
---|"lighten" # Whether the "lighten" and "darken" BlendModes are supported.
---|"multicanvasformats" # Whether multiple formats can be used in the same love.graphics.setCanvas call.
---|"glsl3" # Whether GLSL 3 Shaders can be used.
---|"instancing" # Whether mesh instancing is supported.
---|"fullnpot" # Whether textures with non-power-of-two dimensions can use mipmapping and the 'repeat' WrapMode.
---|"pixelshaderhighp" # Whether pixel shaders can use "highp" 32 bit floating point numbers (as opposed to just 16 bit or lower precision).
---|"shaderderivatives" # Whether shaders can use the dFdx, dFdy, and fwidth functions for computing derivatives.

---@alias loveModule.love.graphics.GraphicsLimit #Types of system-dependent graphics limits checked for using love.graphics.getSystemLimits.
---|"pointsize" # The maximum size of points.
---|"texturesize" # The maximum width or height of Images and Canvases.
---|"multicanvas" # The maximum number of simultaneously active canvases (via love.graphics.setCanvas.)
---|"canvasmsaa" # The maximum number of antialiasing samples for a Canvas.
---|"texturelayers" # The maximum number of layers in an Array texture.
---|"volumetexturesize" # The maximum width, height, or depth of a Volume texture.
---|"cubetexturesize" # The maximum width or height of a Cubemap texture.
---|"anisotropy" # The maximum amount of anisotropic filtering. Texture:setMipmapFilter internally clamps the given anisotropy value to the system's limit.

---@alias loveModule.love.graphics.IndexDataType #Vertex map datatype for Data variant of Mesh:setVertexMap.
---|"uint16" # The vertex map is array of unsigned word (16-bit).
---|"uint32" # The vertex map is array of unsigned dword (32-bit).

---@alias loveModule.love.graphics.LineJoin #Line join style.
---|"miter" # The ends of the line segments beveled in an angle so that they join seamlessly.
---|"none" # No cap applied to the ends of the line segments.
---|"bevel" # Flattens the point where line segments join together.

---@alias loveModule.love.graphics.LineStyle #The styles in which lines are drawn.
---|"rough" # Draw rough lines.
---|"smooth" # Draw smooth lines.

---@alias loveModule.love.graphics.MeshDrawMode #How a Mesh's vertices are used when drawing.
---|"fan" # The vertices create a "fan" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons.
---|"strip" # The vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on.
---|"triangles" # The vertices create unconnected triangles.
---|"points" # The vertices are drawn as unconnected points (see love.graphics.setPointSize.)

---@alias loveModule.love.graphics.MipmapMode #Controls whether a Canvas has mipmaps, and its behaviour when it does.
---|"none" # The Canvas has no mipmaps.
---|"auto" # The Canvas has mipmaps. love.graphics.setCanvas can be used to render to a specific mipmap level, or Canvas:generateMipmaps can (re-)compute all mipmap levels based on the base level.
---|"manual" # The Canvas has mipmaps, and all mipmap levels will automatically be recomputed when switching away from the Canvas with love.graphics.setCanvas.

---@alias loveModule.love.graphics.ParticleInsertMode #How newly created particles are added to the ParticleSystem.
---|"top" # Particles are inserted at the top of the ParticleSystem's list of particles.
---|"bottom" # Particles are inserted at the bottom of the ParticleSystem's list of particles.
---|"random" # Particles are inserted at random positions in the ParticleSystem's list of particles.

---@alias loveModule.love.graphics.SpriteBatchUsage #Usage hints for SpriteBatches and Meshes to optimize data storage and access.
---|"dynamic" # The object's data will change occasionally during its lifetime. 
---|"static" # The object will not be modified after initial sprites or vertices are added.
---|"stream" # The object data will always change between draws.

---@alias loveModule.love.graphics.StackType #Graphics state stack types used with love.graphics.push.
---|"transform" # The transformation stack (love.graphics.translate, love.graphics.rotate, etc.)
---|"all" # All love.graphics state, including transform state.

---@alias loveModule.love.graphics.StencilAction #How a stencil function modifies the stencil values of pixels it touches.
---|"replace" # The stencil value of a pixel will be replaced by the value specified in love.graphics.stencil, if any object touches the pixel.
---|"increment" # The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If the stencil value reaches 255 it will stay at 255.
---|"decrement" # The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value reaches 0 it will stay at 0.
---|"incrementwrap" # The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If a stencil value of 255 is incremented it will be set to 0.
---|"decrementwrap" # The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value of 0 is decremented it will be set to 255.
---|"invert" # The stencil value of a pixel will be bitwise-inverted for each object that touches the pixel. If a stencil value of 0 is inverted it will become 255.

---@alias loveModule.love.graphics.TextureType #Types of textures (2D, cubemap, etc.)
---|"2d" # Regular 2D texture with width and height.
---|"array" # Several same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues.
---|"cube" # Cubemap texture with 6 faces. Requires a custom shader (and Shader:send) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate.
---|"volume" # 3D texture with width, height, and depth. Requires a custom shader to use. Volume textures can have texture filtering applied along the 3rd axis.

---@alias loveModule.love.graphics.VertexAttributeStep #The frequency at which a vertex shader fetches the vertex attribute's data from the Mesh when it's drawn.Per-instance attributes can be used to render a Mesh many times with different positions, colors, or other attributes via a single love.graphics.drawInstanced call, without using the love_InstanceID vertex shader variable.
---|"pervertex" # The vertex attribute will have a unique value for each vertex in the Mesh.
---|"perinstance" # The vertex attribute will have a unique value for each instance of the Mesh.

---@alias loveModule.love.graphics.VertexWinding #How Mesh geometry vertices are ordered.
---|"cw" # Clockwise.
---|"ccw" # Counter-clockwise.

---@alias loveModule.love.graphics.WrapMode #How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1.
---|"clamp" # Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture.
---|"repeat" # Repeat the texture. Fills the whole available extent.
---|"mirroredrepeat" # Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile.
---|"clampzero" # Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)

---@alias loveModule.love.image.CompressedImageFormat #Compressed image data formats. Here and here are a couple overviews of many of the formats.Unlike traditional PNG or jpeg, these formats stay compressed in RAM and in the graphics card's VRAM. This is good for saving memory space as well as improving performance, since the graphics card will be able to keep more of the image's pixels in its fast-access cache when drawing it.
---|"DXT1" # The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems.
---|"DXT3" # The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format.
---|"DXT5" # The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems.
---|"BC4" # The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel.
---|"BC4s" # The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
---|"BC5" # The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel.
---|"BC5s" # The signed variant of the BC5 format.
---|"BC6h" # The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems.
---|"BC6hs" # The signed variant of the BC6H format. Stores RGB data in the range of +65504.
---|"BC7" # The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel.
---|"ETC1" # The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices.
---|"ETC2rgb" # The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices.
---|"ETC2rgba" # The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices.
---|"ETC2rgba1" # The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel.
---|"EACr" # The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel.
---|"EACrs" # The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
---|"EACrg" # The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel.
---|"EACrgs" # The signed two-channel variant of the EAC format.
---|"PVR1rgb2" # The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized.
---|"PVR1rgb4" # The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel.
---|"PVR1rgba2" # The 2 bit per pixel RGBA variant of the PVRTC1 format.
---|"PVR1rgba4" # The 4 bit per pixel RGBA variant of the PVRTC1 format.
---|"ASTC4x4" # The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel.
---|"ASTC5x4" # The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel.
---|"ASTC5x5" # The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel.
---|"ASTC6x5" # The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel.
---|"ASTC6x6" # The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel.
---|"ASTC8x5" # The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel.
---|"ASTC8x6" # The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel.
---|"ASTC8x8" # The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel.
---|"ASTC10x5" # The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel.
---|"ASTC10x6" # The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel.
---|"ASTC10x8" # The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel.
---|"ASTC10x10" # The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel.
---|"ASTC12x10" # The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel.
---|"ASTC12x12" # The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.

---@alias loveModule.love.image.ImageFormat #Encoded image formats.
---|"tga" # Targa image format.
---|"png" # PNG image format.
---|"jpg" # JPG image format.
---|"bmp" # BMP image format.

---@alias loveModule.love.image.PixelFormat #Pixel formats for Textures, ImageData, and CompressedImageData.
---|"unknown" # Indicates unknown pixel format, used internally.
---|"normal" # Alias for rgba8, or srgba8 if gamma-correct rendering is enabled.
---|"hdr" # A format suitable for high dynamic range content - an alias for the rgba16f format, normally.
---|"r8" # Single-channel (red component) format (8 bpp).
---|"rg8" # Two channels (red and green components) with 8 bits per channel (16 bpp).
---|"rgba8" # 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders).
---|"srgba8" # gamma-correct version of rgba8.
---|"r16" # Single-channel (red component) format (16 bpp).
---|"rg16" # Two channels (red and green components) with 16 bits per channel (32 bpp).
---|"rgba16" # 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders).
---|"r16f" # Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504].
---|"rg16f" # Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504].
---|"rgba16f" # Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504].
---|"r32f" # Floating point single-channel format (32 bpp).
---|"rg32f" # Floating point two-channel format with 32 bits per channel (64 bpp).
---|"rgba32f" # Floating point RGBA with 32 bits per channel (128 bpp).
---|"la8" # Same as rg8, but accessed as (L, L, L, A)
---|"rgba4" # 4 bits per channel (16 bpp) RGBA.
---|"rgb5a1" # RGB with 5 bits each, and a 1-bit alpha channel (16 bpp).
---|"rgb565" # RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format.
---|"rgb10a2" # RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp).
---|"rg11b10f" # Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024].
---|"stencil8" # No depth buffer and 8-bit stencil buffer.
---|"depth16" # 16-bit depth buffer and no stencil buffer.
---|"depth24" # 24-bit depth buffer and no stencil buffer.
---|"depth32f" # 32-bit float depth buffer and no stencil buffer.
---|"depth24stencil8" # 24-bit depth buffer and 8-bit stencil buffer.
---|"depth32fstencil8" # 32-bit float depth buffer and 8-bit stencil buffer.
---|"DXT1" # The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems.
---|"DXT3" # The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format.
---|"DXT5" # The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems.
---|"BC4" # The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel.
---|"BC4s" # The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
---|"BC5" # The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel.
---|"BC5s" # The signed variant of the BC5 format.
---|"BC6h" # The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems.
---|"BC6hs" # The signed variant of the BC6H format. Stores RGB data in the range of +65504.
---|"BC7" # The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel.
---|"ETC1" # The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices.
---|"ETC2rgb" # The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices.
---|"ETC2rgba" # The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices.
---|"ETC2rgba1" # The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel.
---|"EACr" # The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel.
---|"EACrs" # The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
---|"EACrg" # The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel.
---|"EACrgs" # The signed two-channel variant of the EAC format.
---|"PVR1rgb2" # The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized.
---|"PVR1rgb4" # The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel.
---|"PVR1rgba2" # The 2 bit per pixel RGBA variant of the PVRTC1 format.
---|"PVR1rgba4" # The 4 bit per pixel RGBA variant of the PVRTC1 format.
---|"ASTC4x4" # The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel.
---|"ASTC5x4" # The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel.
---|"ASTC5x5" # The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel.
---|"ASTC6x5" # The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel.
---|"ASTC6x6" # The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel.
---|"ASTC8x5" # The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel.
---|"ASTC8x6" # The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel.
---|"ASTC8x8" # The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel.
---|"ASTC10x5" # The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel.
---|"ASTC10x6" # The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel.
---|"ASTC10x8" # The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel.
---|"ASTC10x10" # The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel.
---|"ASTC12x10" # The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel.
---|"ASTC12x12" # The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.

---@alias loveModule.love.joystick.GamepadAxis #Virtual gamepad axes.
---|"leftx" # The x-axis of the left thumbstick.
---|"lefty" # The y-axis of the left thumbstick.
---|"rightx" # The x-axis of the right thumbstick.
---|"righty" # The y-axis of the right thumbstick.
---|"triggerleft" # Left analog trigger.
---|"triggerright" # Right analog trigger.

---@alias loveModule.love.joystick.GamepadButton #Virtual gamepad buttons.
---|"a" # Bottom face button (A).
---|"b" # Right face button (B).
---|"x" # Left face button (X).
---|"y" # Top face button (Y).
---|"back" # Back button.
---|"guide" # Guide button.
---|"start" # Start button.
---|"leftstick" # Left stick click button.
---|"rightstick" # Right stick click button.
---|"leftshoulder" # Left bumper.
---|"rightshoulder" # Right bumper.
---|"dpup" # D-pad up.
---|"dpdown" # D-pad down.
---|"dpleft" # D-pad left.
---|"dpright" # D-pad right.

---@alias loveModule.love.joystick.JoystickHat #Joystick hat positions.
---|"c" # Centered
---|"d" # Down
---|"l" # Left
---|"ld" # Left+Down
---|"lu" # Left+Up
---|"r" # Right
---|"rd" # Right+Down
---|"ru" # Right+Up
---|"u" # Up

---@alias loveModule.love.joystick.JoystickInputType #Types of Joystick inputs.
---|"axis" # Analog axis.
---|"button" # Button.
---|"hat" # 8-direction hat value.

---@alias loveModule.love.keyboard.KeyConstant #All the keys you can press. Note that some keys may not be available on your keyboard or system.
---|"a" # The A key
---|"b" # The B key
---|"c" # The C key
---|"d" # The D key
---|"e" # The E key
---|"f" # The F key
---|"g" # The G key
---|"h" # The H key
---|"i" # The I key
---|"j" # The J key
---|"k" # The K key
---|"l" # The L key
---|"m" # The M key
---|"n" # The N key
---|"o" # The O key
---|"p" # The P key
---|"q" # The Q key
---|"r" # The R key
---|"s" # The S key
---|"t" # The T key
---|"u" # The U key
---|"v" # The V key
---|"w" # The W key
---|"x" # The X key
---|"y" # The Y key
---|"z" # The Z key
---|"0" # The zero key
---|"1" # The one key
---|"2" # The two key
---|"3" # The three key
---|"4" # The four key
---|"5" # The five key
---|"6" # The six key
---|"7" # The seven key
---|"8" # The eight key
---|"9" # The nine key
---|"space" # Space key
---|"!" # Exclamation mark key
---|""" # Double quote key
---|"#" # Hash key
---|"$" # Dollar key
---|"&" # Ampersand key
---|"'" # Single quote key
---|"(" # Left parenthesis key
---|")" # Right parenthesis key
---|"*" # Asterisk key
---|"+" # Plus key
---|"," # Comma key
---|"-" # Hyphen-minus key
---|"." # Full stop key
---|"/" # Slash key
---|":" # Colon key
---|";" # Semicolon key
---|"<" # Less-than key
---|"=" # Equal key
---|">" # Greater-than key
---|"?" # Question mark key
---|"@" # At sign key
---|"[" # Left square bracket key
---|"\" # Backslash key
---|"]" # Right square bracket key
---|"^" # Caret key
---|"_" # Underscore key
---|"`" # Grave accent key
---|"kp0" # The numpad zero key
---|"kp1" # The numpad one key
---|"kp2" # The numpad two key
---|"kp3" # The numpad three key
---|"kp4" # The numpad four key
---|"kp5" # The numpad five key
---|"kp6" # The numpad six key
---|"kp7" # The numpad seven key
---|"kp8" # The numpad eight key
---|"kp9" # The numpad nine key
---|"kp." # The numpad decimal point key
---|"kp/" # The numpad division key
---|"kp*" # The numpad multiplication key
---|"kp-" # The numpad substraction key
---|"kp+" # The numpad addition key
---|"kpenter" # The numpad enter key
---|"kp=" # The numpad equals key
---|"up" # Up cursor key
---|"down" # Down cursor key
---|"right" # Right cursor key
---|"left" # Left cursor key
---|"home" # Home key
---|"end" # End key
---|"pageup" # Page up key
---|"pagedown" # Page down key
---|"insert" # Insert key
---|"backspace" # Backspace key
---|"tab" # Tab key
---|"clear" # Clear key
---|"return" # Return key
---|"delete" # Delete key
---|"f1" # The 1st function key
---|"f2" # The 2nd function key
---|"f3" # The 3rd function key
---|"f4" # The 4th function key
---|"f5" # The 5th function key
---|"f6" # The 6th function key
---|"f7" # The 7th function key
---|"f8" # The 8th function key
---|"f9" # The 9th function key
---|"f10" # The 10th function key
---|"f11" # The 11th function key
---|"f12" # The 12th function key
---|"f13" # The 13th function key
---|"f14" # The 14th function key
---|"f15" # The 15th function key
---|"numlock" # Num-lock key
---|"capslock" # Caps-lock key
---|"scrollock" # Scroll-lock key
---|"rshift" # Right shift key
---|"lshift" # Left shift key
---|"rctrl" # Right control key
---|"lctrl" # Left control key
---|"ralt" # Right alt key
---|"lalt" # Left alt key
---|"rmeta" # Right meta key
---|"lmeta" # Left meta key
---|"lsuper" # Left super key
---|"rsuper" # Right super key
---|"mode" # Mode key
---|"compose" # Compose key
---|"pause" # Pause key
---|"escape" # Escape key
---|"help" # Help key
---|"print" # Print key
---|"sysreq" # System request key
---|"break" # Break key
---|"menu" # Menu key
---|"power" # Power key
---|"euro" # Euro (&euro;) key
---|"undo" # Undo key
---|"www" # WWW key
---|"mail" # Mail key
---|"calculator" # Calculator key
---|"appsearch" # Application search key
---|"apphome" # Application home key
---|"appback" # Application back key
---|"appforward" # Application forward key
---|"apprefresh" # Application refresh key
---|"appbookmarks" # Application bookmarks key

---@alias loveModule.love.keyboard.Scancode #Keyboard scancodes.Scancodes are keyboard layout-independent, so the scancode "w" will be generated if the key in the same place as the "w" key on an American QWERTY keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.Using scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support.One could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated.
---|"a" # The 'A' key on an American layout.
---|"b" # The 'B' key on an American layout.
---|"c" # The 'C' key on an American layout.
---|"d" # The 'D' key on an American layout.
---|"e" # The 'E' key on an American layout.
---|"f" # The 'F' key on an American layout.
---|"g" # The 'G' key on an American layout.
---|"h" # The 'H' key on an American layout.
---|"i" # The 'I' key on an American layout.
---|"j" # The 'J' key on an American layout.
---|"k" # The 'K' key on an American layout.
---|"l" # The 'L' key on an American layout.
---|"m" # The 'M' key on an American layout.
---|"n" # The 'N' key on an American layout.
---|"o" # The 'O' key on an American layout.
---|"p" # The 'P' key on an American layout.
---|"q" # The 'Q' key on an American layout.
---|"r" # The 'R' key on an American layout.
---|"s" # The 'S' key on an American layout.
---|"t" # The 'T' key on an American layout.
---|"u" # The 'U' key on an American layout.
---|"v" # The 'V' key on an American layout.
---|"w" # The 'W' key on an American layout.
---|"x" # The 'X' key on an American layout.
---|"y" # The 'Y' key on an American layout.
---|"z" # The 'Z' key on an American layout.
---|"1" # The '1' key on an American layout.
---|"2" # The '2' key on an American layout.
---|"3" # The '3' key on an American layout.
---|"4" # The '4' key on an American layout.
---|"5" # The '5' key on an American layout.
---|"6" # The '6' key on an American layout.
---|"7" # The '7' key on an American layout.
---|"8" # The '8' key on an American layout.
---|"9" # The '9' key on an American layout.
---|"0" # The '0' key on an American layout.
---|"return" # The 'return' / 'enter' key on an American layout.
---|"escape" # The 'escape' key on an American layout.
---|"backspace" # The 'backspace' key on an American layout.
---|"tab" # The 'tab' key on an American layout.
---|"space" # The spacebar on an American layout.
---|"-" # The minus key on an American layout.
---|"=" # The equals key on an American layout.
---|"[" # The left-bracket key on an American layout.
---|"]" # The right-bracket key on an American layout.
---|"\" # The backslash key on an American layout.
---|"nonus#" # The non-U.S. hash scancode.
---|";" # The semicolon key on an American layout.
---|"'" # The apostrophe key on an American layout.
---|"`" # The back-tick / grave key on an American layout.
---|"," # The comma key on an American layout.
---|"." # The period key on an American layout.
---|"/" # The forward-slash key on an American layout.
---|"capslock" # The capslock key on an American layout.
---|"f1" # The F1 key on an American layout.
---|"f2" # The F2 key on an American layout.
---|"f3" # The F3 key on an American layout.
---|"f4" # The F4 key on an American layout.
---|"f5" # The F5 key on an American layout.
---|"f6" # The F6 key on an American layout.
---|"f7" # The F7 key on an American layout.
---|"f8" # The F8 key on an American layout.
---|"f9" # The F9 key on an American layout.
---|"f10" # The F10 key on an American layout.
---|"f11" # The F11 key on an American layout.
---|"f12" # The F12 key on an American layout.
---|"f13" # The F13 key on an American layout.
---|"f14" # The F14 key on an American layout.
---|"f15" # The F15 key on an American layout.
---|"f16" # The F16 key on an American layout.
---|"f17" # The F17 key on an American layout.
---|"f18" # The F18 key on an American layout.
---|"f19" # The F19 key on an American layout.
---|"f20" # The F20 key on an American layout.
---|"f21" # The F21 key on an American layout.
---|"f22" # The F22 key on an American layout.
---|"f23" # The F23 key on an American layout.
---|"f24" # The F24 key on an American layout.
---|"lctrl" # The left control key on an American layout.
---|"lshift" # The left shift key on an American layout.
---|"lalt" # The left alt / option key on an American layout.
---|"lgui" # The left GUI (command / windows / super) key on an American layout.
---|"rctrl" # The right control key on an American layout.
---|"rshift" # The right shift key on an American layout.
---|"ralt" # The right alt / option key on an American layout.
---|"rgui" # The right GUI (command / windows / super) key on an American layout.
---|"printscreen" # The printscreen key on an American layout.
---|"scrolllock" # The scroll-lock key on an American layout.
---|"pause" # The pause key on an American layout.
---|"insert" # The insert key on an American layout.
---|"home" # The home key on an American layout.
---|"numlock" # The numlock / clear key on an American layout.
---|"pageup" # The page-up key on an American layout.
---|"delete" # The forward-delete key on an American layout.
---|"end" # The end key on an American layout.
---|"pagedown" # The page-down key on an American layout.
---|"right" # The right-arrow key on an American layout.
---|"left" # The left-arrow key on an American layout.
---|"down" # The down-arrow key on an American layout.
---|"up" # The up-arrow key on an American layout.
---|"nonusbackslash" # The non-U.S. backslash scancode.
---|"application" # The application key on an American layout. Windows contextual menu, compose key.
---|"execute" # The 'execute' key on an American layout.
---|"help" # The 'help' key on an American layout.
---|"menu" # The 'menu' key on an American layout.
---|"select" # The 'select' key on an American layout.
---|"stop" # The 'stop' key on an American layout.
---|"again" # The 'again' key on an American layout.
---|"undo" # The 'undo' key on an American layout.
---|"cut" # The 'cut' key on an American layout.
---|"copy" # The 'copy' key on an American layout.
---|"paste" # The 'paste' key on an American layout.
---|"find" # The 'find' key on an American layout.
---|"kp/" # The keypad forward-slash key on an American layout.
---|"kp*" # The keypad '*' key on an American layout.
---|"kp-" # The keypad minus key on an American layout.
---|"kp+" # The keypad plus key on an American layout.
---|"kp=" # The keypad equals key on an American layout.
---|"kpenter" # The keypad enter key on an American layout.
---|"kp1" # The keypad '1' key on an American layout.
---|"kp2" # The keypad '2' key on an American layout.
---|"kp3" # The keypad '3' key on an American layout.
---|"kp4" # The keypad '4' key on an American layout.
---|"kp5" # The keypad '5' key on an American layout.
---|"kp6" # The keypad '6' key on an American layout.
---|"kp7" # The keypad '7' key on an American layout.
---|"kp8" # The keypad '8' key on an American layout.
---|"kp9" # The keypad '9' key on an American layout.
---|"kp0" # The keypad '0' key on an American layout.
---|"kp." # The keypad period key on an American layout.
---|"international1" # The 1st international key on an American layout. Used on Asian keyboards.
---|"international2" # The 2nd international key on an American layout.
---|"international3" # The 3rd international  key on an American layout. Yen.
---|"international4" # The 4th international key on an American layout.
---|"international5" # The 5th international key on an American layout.
---|"international6" # The 6th international key on an American layout.
---|"international7" # The 7th international key on an American layout.
---|"international8" # The 8th international key on an American layout.
---|"international9" # The 9th international key on an American layout.
---|"lang1" # Hangul/English toggle scancode.
---|"lang2" # Hanja conversion scancode.
---|"lang3" # Katakana scancode.
---|"lang4" # Hiragana scancode.
---|"lang5" # Zenkaku/Hankaku scancode.
---|"mute" # The mute key on an American layout.
---|"volumeup" # The volume up key on an American layout.
---|"volumedown" # The volume down key on an American layout.
---|"audionext" # The audio next track key on an American layout.
---|"audioprev" # The audio previous track key on an American layout.
---|"audiostop" # The audio stop key on an American layout.
---|"audioplay" # The audio play key on an American layout.
---|"audiomute" # The audio mute key on an American layout.
---|"mediaselect" # The media select key on an American layout.
---|"www" # The 'WWW' key on an American layout.
---|"mail" # The Mail key on an American layout.
---|"calculator" # The calculator key on an American layout.
---|"computer" # The 'computer' key on an American layout.
---|"acsearch" # The AC Search key on an American layout.
---|"achome" # The AC Home key on an American layout.
---|"acback" # The AC Back key on an American layout.
---|"acforward" # The AC Forward key on an American layout.
---|"acstop" # Th AC Stop key on an American layout.
---|"acrefresh" # The AC Refresh key on an American layout.
---|"acbookmarks" # The AC Bookmarks key on an American layout.
---|"power" # The system power scancode.
---|"brightnessdown" # The brightness-down scancode.
---|"brightnessup" # The brightness-up scancode.
---|"displayswitch" # The display switch scancode.
---|"kbdillumtoggle" # The keyboard illumination toggle scancode.
---|"kbdillumdown" # The keyboard illumination down scancode.
---|"kbdillumup" # The keyboard illumination up scancode.
---|"eject" # The eject scancode.
---|"sleep" # The system sleep scancode.
---|"alterase" # The alt-erase key on an American layout.
---|"sysreq" # The sysreq key on an American layout.
---|"cancel" # The 'cancel' key on an American layout.
---|"clear" # The 'clear' key on an American layout.
---|"prior" # The 'prior' key on an American layout.
---|"return2" # The 'return2' key on an American layout.
---|"separator" # The 'separator' key on an American layout.
---|"out" # The 'out' key on an American layout.
---|"oper" # The 'oper' key on an American layout.
---|"clearagain" # The 'clearagain' key on an American layout.
---|"crsel" # The 'crsel' key on an American layout.
---|"exsel" # The 'exsel' key on an American layout.
---|"kp00" # The keypad 00 key on an American layout.
---|"kp000" # The keypad 000 key on an American layout.
---|"thsousandsseparator" # The thousands-separator key on an American layout.
---|"decimalseparator" # The decimal separator key on an American layout.
---|"currencyunit" # The currency unit key on an American layout.
---|"currencysubunit" # The currency sub-unit key on an American layout.
---|"app1" # The 'app1' scancode.
---|"app2" # The 'app2' scancode.
---|"unknown" # An unknown key.

---@alias loveModule.love.math.MatrixLayout #The layout of matrix elements (row-major or column-major).
---|"row" # The matrix is row-major:
---|"column" # The matrix is column-major:

---@alias loveModule.love.mouse.CursorType #Types of hardware cursors.
---|"image" # The cursor is using a custom image.
---|"arrow" # An arrow pointer.
---|"ibeam" # An I-beam, normally used when mousing over editable or selectable text.
---|"wait" # Wait graphic.
---|"waitarrow" # Small wait cursor with an arrow pointer.
---|"crosshair" # Crosshair symbol.
---|"sizenwse" # Double arrow pointing to the top-left and bottom-right.
---|"sizenesw" # Double arrow pointing to the top-right and bottom-left.
---|"sizewe" # Double arrow pointing left and right.
---|"sizens" # Double arrow pointing up and down.
---|"sizeall" # Four-pointed arrow pointing up, down, left, and right.
---|"no" # Slashed circle or crossbones.
---|"hand" # Hand symbol.

---@alias loveModule.love.physics.BodyType #The types of a Body. 
---|"static" # Static bodies do not move.
---|"dynamic" # Dynamic bodies collide with all bodies.
---|"kinematic" # Kinematic bodies only collide with dynamic bodies.

---@alias loveModule.love.physics.JointType #Different types of joints.
---|"distance" # A DistanceJoint.
---|"friction" # A FrictionJoint.
---|"gear" # A GearJoint.
---|"mouse" # A MouseJoint.
---|"prismatic" # A PrismaticJoint.
---|"pulley" # A PulleyJoint.
---|"revolute" # A RevoluteJoint.
---|"rope" # A RopeJoint.
---|"weld" # A WeldJoint.

---@alias loveModule.love.physics.ShapeType #The different types of Shapes, as returned by Shape:getType.
---|"circle" # The Shape is a CircleShape.
---|"polygon" # The Shape is a PolygonShape.
---|"edge" # The Shape is a EdgeShape.
---|"chain" # The Shape is a ChainShape.

---@alias loveModule.love.system.PowerState #The basic state of the system's power supply.
---|"unknown" # Cannot determine power status.
---|"battery" # Not plugged in, running on a battery.
---|"nobattery" # Plugged in, no battery available.
---|"charging" # Plugged in, charging battery.
---|"charged" # Plugged in, battery is fully charged.

---@alias loveModule.love.window.DisplayOrientation #Types of device display orientation.
---|"unknown" # Orientation cannot be determined.
---|"landscape" # Landscape orientation.
---|"landscapeflipped" # Landscape orientation (flipped).
---|"portrait" # Portrait orientation.
---|"portraitflipped" # Portrait orientation (flipped).

---@alias loveModule.love.window.FullscreenType #Types of fullscreen modes.
---|"desktop" # Sometimes known as borderless fullscreen windowed mode. A borderless screen-sized window is created which sits on top of all desktop UI elements. The window is automatically resized to match the dimensions of the desktop, and its size cannot be changed.
---|"exclusive" # Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor.
---|"normal" # Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor.

---@alias loveModule.love.window.MessageBoxType #Types of message box dialogs. Different types may have slightly different looks.
---|"info" # Informational dialog.
---|"warning" # Warning dialog.
---|"error" # Error dialog.

---If a file called conf.lua is present in your game folder (or .love file), it is run before the LÖVE modules are loaded. You can use this file to overwrite the love.conf function, which is later called by the LÖVE 'boot' script. Using the love.conf function, you can set some configuration options, and change things like the default size of the window, which modules are loaded, and other stuff.
---@param t {
---identity : string|nil,
---appendidentity : boolean|nil,
---version : string|nil,
---console : boolean|nil,
---accelerometerjoystick : boolean|nil,
---externalstorage : boolean|nil,
---gammacorrect : boolean|nil,
---audio : {
---mic : boolean|nil,
---mixwithsystem : boolean|nil},
---window : {
---title : string|nil,
---icon : string|nil,
---width : number|nil,
---height : number|nil,
---borderless : boolean|nil,
---resizable : boolean|nil,
---minwidth : number|nil,
---minheight : number|nil,
---fullscreen : boolean|nil,
---fullscreentype : string|nil,
---usedpiscale : boolean|nil,
---vsync : number|nil,
---depth : number|nil,
---stencil : number|nil,
---msaa : number|nil,
---display : number|nil,
---highdpi : boolean|nil,
---x : number|nil,
---y : number|nil},
---modules : {
---audio : boolean|nil,
---event : boolean|nil,
---graphics : boolean|nil,
---image : boolean|nil,
---joystick : boolean|nil,
---keyboard : boolean|nil,
---math : boolean|nil,
---mouse : boolean|nil,
---physics : boolean|nil,
---sound : boolean|nil,
---system : boolean|nil,
---timer : boolean|nil,
---touch : boolean|nil,
---video : boolean|nil,
---window : boolean|nil,
---thread : boolean|nil}}# The love.conf function takes one argument: a table filled with all the default values which you can overwrite to your liking. If you want to change the default window size, for instance, do:function love.conf(t)    t.window.width = 1024    t.window.height = 768endIf you don't need the physics module or joystick module, do the following.function love.conf(t)    t.modules.joystick = false    t.modules.physics = falseendSetting unused modules to false is encouraged when you release your game. It reduces startup time slightly (especially if the joystick module is disabled) and reduces memory usage (slightly).Note that you can't disable love.filesystem; it's mandatory. The same goes for the love module itself. love.graphics needs love.window to be enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.conf(t) end

---Callback function triggered when a directory is dragged and dropped onto the window.
---@param path string# The full platform-dependent path to the directory. It can be used as an argument to love.filesystem.mount, in order to gain read access to the directory with love.filesystem.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.directorydropped(path) end

---Called when the device display orientation changed, for example, user rotated their phone 180 degrees.
---@param index number# The index of the display that changed orientation.
---@param orientation loveModule.love.window.DisplayOrientation# The new orientation.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.displayrotated(index, orientation) end

---Callback function used to draw on the screen every frame.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.draw() end

---The error handler, used to display error messages.
---@param msg string# The error message.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.errorhandler(msg) end

---Callback function triggered when a file is dragged and dropped onto the window.
---@param file love.filesystem.DroppedFile# The unopened File object representing the file that was dropped.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.filedropped(file) end

---Callback function triggered when window receives or loses focus.
---@param focus boolean# True if the window gains focus, false if it loses focus. 
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.focus(focus) end

---Called when a Joystick's virtual gamepad axis is moved.
---@param joystick love.joystick.Joystick# The joystick object.
---@param axis loveModule.love.joystick.GamepadAxis# The virtual gamepad axis.
---@param value number# The new axis value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.gamepadaxis(joystick, axis, value) end

---Called when a Joystick's virtual gamepad button is pressed.
---@param joystick love.joystick.Joystick# The joystick object.
---@param button loveModule.love.joystick.GamepadButton# The virtual gamepad button.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.gamepadpressed(joystick, button) end

---Called when a Joystick's virtual gamepad button is released.
---@param joystick love.joystick.Joystick# The joystick object.
---@param button loveModule.love.joystick.GamepadButton# The virtual gamepad button.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.gamepadreleased(joystick, button) end

---Called when a Joystick is connected.
---@param joystick love.joystick.Joystick# The newly connected Joystick object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.joystickadded(joystick) end

---Called when a joystick axis moves.
---@param joystick love.joystick.Joystick# The joystick object.
---@param axis number# The axis number.
---@param value number# The new axis value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.joystickaxis(joystick, axis, value) end

---Called when a joystick hat direction changes.
---@param joystick love.joystick.Joystick# The joystick object.
---@param hat number# The hat number.
---@param direction loveModule.love.joystick.JoystickHat# The new hat direction.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.joystickhat(joystick, hat, direction) end

---Called when a joystick button is pressed.
---@param joystick love.joystick.Joystick# The joystick object.
---@param button number# The button number.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.joystickpressed(joystick, button) end

---Called when a joystick button is released.
---@param joystick love.joystick.Joystick# The joystick object.
---@param button number# The button number.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.joystickreleased(joystick, button) end

---Called when a Joystick is disconnected.
---@param joystick love.joystick.Joystick# The now-disconnected Joystick object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.joystickremoved(joystick) end

---Callback function triggered when a key is pressed.
---@param key loveModule.love.keyboard.KeyConstant# Character of the pressed key.
---@param scancode loveModule.love.keyboard.Scancode# The scancode representing the pressed key.
---@param isrepeat boolean# Whether this keypress event is a repeat. The delay between key repeats depends on the user's system settings.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.keypressed(key, scancode, isrepeat) end

---Callback function triggered when a key is pressed.
---@param key loveModule.love.keyboard.KeyConstant# Character of the key pressed.
---@param isrepeat boolean# Whether this keypress event is a repeat. The delay between key repeats depends on the user's system settings.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.keypressed(key, isrepeat) end

---Callback function triggered when a keyboard key is released.
---@param key loveModule.love.keyboard.KeyConstant# Character of the released key.
---@param scancode loveModule.love.keyboard.Scancode# The scancode representing the released key.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.keyreleased(key, scancode) end

---This function is called exactly once at the beginning of the game.
---@param arg table# Command-line arguments given to the game.
---@param unfilteredArg table# Unfiltered command-line arguments given to the executable (see #Notes).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.load(arg, unfilteredArg) end

---Callback function triggered when the system is running out of memory on mobile devices.Mobile operating systems may forcefully kill the game if it uses too much memory, so any non-critical resource should be removed if possible (by setting all variables referencing the resources to '''nil'''), when this event is triggered. Sounds and images in particular tend to use the most memory.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.lowmemory() end

---Callback function triggered when window receives or loses mouse focus.
---@param focus boolean# Whether the window has mouse focus or not.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.mousefocus(focus) end

---Callback function triggered when the mouse is moved.
---@param x number# The mouse position on the x-axis.
---@param y number# The mouse position on the y-axis.
---@param dx number# The amount moved along the x-axis since the last time love.mousemoved was called.
---@param dy number# The amount moved along the y-axis since the last time love.mousemoved was called.
---@param istouch boolean# True if the mouse button press originated from a touchscreen touch-press.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.mousemoved(x, y, dx, dy, istouch) end

---Callback function triggered when a mouse button is pressed.
---@param x number# Mouse x position, in pixels.
---@param y number# Mouse y position, in pixels.
---@param button number# The button index that was pressed. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent.
---@param istouch boolean# True if the mouse button press originated from a touchscreen touch-press.
---@param presses number# The number of presses in a short time frame and small area, used to simulate double, triple clicks
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.mousepressed(x, y, button, istouch, presses) end

---Callback function triggered when a mouse button is released.
---@param x number# Mouse x position, in pixels.
---@param y number# Mouse y position, in pixels.
---@param button number# The button index that was released. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent.
---@param istouch boolean# True if the mouse button release originated from a touchscreen touch-release.
---@param presses number# The number of presses in a short time frame and small area, used to simulate double, triple clicks
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.mousereleased(x, y, button, istouch, presses) end

---Callback function triggered when the game is closed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.quit() end

---Called when the window is resized, for example if the user resizes the window, or if love.window.setMode is called with an unsupported width or height in fullscreen and the window chooses the closest appropriate size.
---@param w number# The new width.
---@param h number# The new height.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.resize(w, h) end

---The main function, containing the main loop. A sensible default is used when left out.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.run() end

---Called when the candidate text for an IME (Input Method Editor) has changed.The candidate text is not the final text that the user will eventually choose. Use love.textinput for that.
---@param text string# The UTF-8 encoded unicode candidate text.
---@param start number# The start cursor of the selected candidate text.
---@param length number# The length of the selected candidate text. May be 0.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.textedited(text, start, length) end

---Called when text has been entered by the user. For example if shift-2 is pressed on an American keyboard layout, the text '@' will be generated.
---@param text string# The UTF-8 encoded unicode text.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.textinput(text) end

---Callback function triggered when a Thread encounters an error.
---@param thread love.thread.Thread# The thread which produced the error.
---@param errorstr string# The error message.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.threaderror(thread, errorstr) end

---Callback function triggered when a touch press moves inside the touch screen.
---@param id lightuserdata# The identifier for the touch press.
---@param x number# The x-axis position of the touch inside the window, in pixels.
---@param y number# The y-axis position of the touch inside the window, in pixels.
---@param dx number# The x-axis movement of the touch inside the window, in pixels.
---@param dy number# The y-axis movement of the touch inside the window, in pixels.
---@param pressure number# The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.touchmoved(id, x, y, dx, dy, pressure) end

---Callback function triggered when the touch screen is touched.
---@param id lightuserdata# The identifier for the touch press.
---@param x number# The x-axis position of the touch press inside the window, in pixels.
---@param y number# The y-axis position of the touch press inside the window, in pixels.
---@param dx number# The x-axis movement of the touch press inside the window, in pixels. This should always be zero.
---@param dy number# The y-axis movement of the touch press inside the window, in pixels. This should always be zero.
---@param pressure number# The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.touchpressed(id, x, y, dx, dy, pressure) end

---Callback function triggered when the touch screen stops being touched.
---@param id lightuserdata# The identifier for the touch press.
---@param x number# The x-axis position of the touch inside the window, in pixels.
---@param y number# The y-axis position of the touch inside the window, in pixels.
---@param dx number# The x-axis movement of the touch inside the window, in pixels.
---@param dy number# The y-axis movement of the touch inside the window, in pixels.
---@param pressure number# The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.touchreleased(id, x, y, dx, dy, pressure) end

---Callback function used to update the state of the game every frame.
---@param dt number# Time since the last update in seconds.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.update(dt) end

---Callback function triggered when window is minimized/hidden or unminimized by the user.
---@param visible boolean# True if the window is visible, false if it isn't.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.visible(visible) end

---Callback function triggered when the mouse wheel is moved.
---@param x number# Amount of horizontal mouse wheel movement. Positive values indicate movement to the right.
---@param y number# Amount of vertical mouse wheel movement. Positive values indicate upward movement.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.wheelmoved(x, y) end

---Gets a list of the names of the currently enabled effects.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getActiveEffects() end

---Gets the current number of simultaneously playing sources.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getActiveSourceCount() end

---Returns the distance attenuation model.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getDistanceModel() end

---Gets the current global scale factor for velocity-based doppler effects.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getDopplerScale() end

---Gets the settings associated with an effect.
---@param name string# The name of the effect.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getEffect(name) end

---Gets the maximum number of active effects supported by the system.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getMaxSceneEffects() end

---Gets the maximum number of active Effects in a single Source object, that the system can support.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getMaxSourceEffects() end

---Returns the orientation of the listener.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getOrientation() end

---Returns the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getPosition() end

---Gets a list of RecordingDevices on the system.The first device in the list is the user's default recording device. The list may be empty if there are no microphones connected to the system.Audio recording is currently not supported on iOS.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getRecordingDevices() end

---Returns the velocity of the listener.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getVelocity() end

---Returns the master volume.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.getVolume() end

---Gets whether audio effects are supported in the system.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.isEffectsSupported() end

---Creates a new Source usable for real-time generated sound playback with Source:queue.
---@param samplerate number# Number of samples per second when playing.
---@param bitdepth number# Bits per sample (8 or 16).
---@param channels number# 1 for mono or 2 for stereo.
---@param buffercount number|nil# (0) The number of buffers that can be queued up at any given time with Source:queue. Cannot be greater than 64. A sensible default (~8) is chosen if no value is specified.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.newQueueableSource(samplerate, bitdepth, channels, buffercount) end

---Creates a new Source from a filepath, File, Decoder or SoundData.Sources created from SoundData are always static.
---@param filename string# The filepath to the audio file.
---@param type loveModule.love.audio.SourceType# Streaming or static source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.newSource(filename, type) end

---Creates a new Source from a filepath, File, Decoder or SoundData.Sources created from SoundData are always static.
---@param file love.filesystem.File# A File pointing to an audio file.
---@param type loveModule.love.audio.SourceType# Streaming or static source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.newSource(file, type) end

---Creates a new Source from a filepath, File, Decoder or SoundData.Sources created from SoundData are always static.
---@param decoder love.sound.Decoder# The Decoder to create a Source from.
---@param type loveModule.love.audio.SourceType# Streaming or static source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.newSource(decoder, type) end

---Creates a new Source from a filepath, File, Decoder or SoundData.Sources created from SoundData are always static.
---@param data love.filesystem.FileData# The FileData to create a Source from.
---@param type loveModule.love.audio.SourceType# Streaming or static source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.newSource(data, type) end

---Creates a new Source from a filepath, File, Decoder or SoundData.Sources created from SoundData are always static.
---@param data love.sound.SoundData# The SoundData to create a Source from.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.newSource(data) end

---Pauses specific or all currently played Sources.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.pause() end

---Pauses specific or all currently played Sources.
---@param source love.audio.Source# The first Source to pause.
---@param ... love.audio.Source# Additional Sources to pause.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.pause(source, ...) end

---Pauses specific or all currently played Sources.
---@param sources table[]# A table containing a list of Sources to pause.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.pause(sources) end

---Plays the specified Source.
---@param source love.audio.Source# The Source to play.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.play(source) end

---Plays the specified Source.
---@param sources table[]# Table containing a list of Sources to play.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.play(sources) end

---Plays the specified Source.
---@param source1 love.audio.Source# The first Source to play.
---@param source2 love.audio.Source# The second Source to play.
---@param ... love.audio.Source# Additional Sources to play.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.play(source1, source2, ...) end

---Sets the distance attenuation model.
---@param model loveModule.love.audio.DistanceModel# The new distance model.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.setDistanceModel(model) end

---Sets a global scale factor for velocity-based doppler effects. The default scale value is 1.
---@param scale number# The new doppler scale factor. The scale must be greater than 0.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.setDopplerScale(scale) end

---Defines an effect that can be applied to a Source.Not all system supports audio effects. Use love.audio.isEffectsSupported to check.
---@param name string# The name of the effect.
---@param settings {
---type : loveModule.love.audio.EffectType,
---volume : number,
---[...] : number}# The settings to use for this effect, with the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.setEffect(name, settings) end

---Defines an effect that can be applied to a Source.Not all system supports audio effects. Use love.audio.isEffectsSupported to check.
---@param name string# The name of the effect.
---@param enabled boolean|nil# (true) If false and the given effect name was previously set, disables the effect.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.setEffect(name, enabled) end

---Sets whether the system should mix the audio with the system's audio.
---@param mix boolean# True to enable mixing, false to disable it.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.setMixWithSystem(mix) end

---Sets the orientation of the listener.
---@param fx number# Forward vector of the listener orientation.
---@param fy number# Forward vector of the listener orientation.
---@param fz number# Forward vector of the listener orientation.
---@param ux number# Up vector of the listener orientation.
---@param uy number# Up vector of the listener orientation.
---@param uz number# Up vector of the listener orientation.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.setOrientation(fx, fy, fz, ux, uy, uz) end

---Sets the position of the listener, which determines how sounds play.
---@param x number# The x position of the listener.
---@param y number# The y position of the listener.
---@param z number# The z position of the listener.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.setPosition(x, y, z) end

---Sets the velocity of the listener.
---@param x number# The X velocity of the listener.
---@param y number# The Y velocity of the listener.
---@param z number# The Z velocity of the listener.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.setVelocity(x, y, z) end

---Sets the master volume.
---@param volume number# 1.0 is max and 0.0 is off.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.setVolume(volume) end

---Stops currently played sources.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.stop() end

---Stops currently played sources.
---@param source love.audio.Source# The source on which to stop the playback.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.stop(source) end

---Stops currently played sources.
---@param source1 love.audio.Source# The first Source to stop.
---@param source2 love.audio.Source# The second Source to stop.
---@param ... love.audio.Source# Additional Sources to stop.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.stop(source1, source2, ...) end

---Stops currently played sources.
---@param sources table[]# A table containing a list of Sources to stop.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_audio.stop(sources) end

---Gets the number of bits per sample in the data currently being recorded.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_RecordingDevice:getBitDepth() end

---Gets the number of channels currently being recorded (mono or stereo).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_RecordingDevice:getChannelCount() end

---Gets all recorded audio SoundData stored in the device's internal ring buffer.The internal ring buffer is cleared when this function is called, so calling it again will only get audio recorded after the previous call. If the device's internal ring buffer completely fills up before getData is called, the oldest data that doesn't fit into the buffer will be lost.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_RecordingDevice:getData() end

---Gets the name of the recording device.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_RecordingDevice:getName() end

---Gets the number of currently recorded samples.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_RecordingDevice:getSampleCount() end

---Gets the number of samples per second currently being recorded.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_RecordingDevice:getSampleRate() end

---Gets whether the device is currently recording.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_RecordingDevice:isRecording() end

---Begins recording audio using this device.
---@param samplecount number# The maximum number of samples to store in an internal ring buffer when recording. RecordingDevice:getData clears the internal buffer when called.
---@param samplerate number|nil# (8000) The number of samples per second to store when recording.
---@param bitdepth number|nil# (16) The number of bits per sample.
---@param channels number|nil# (1) Whether to record in mono or stereo. Most microphones don't support more than 1 channel.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_RecordingDevice:start(samplecount, samplerate, bitdepth, channels) end

---Stops recording audio from this device. Any sound data currently in the device's buffer will be returned.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_RecordingDevice:stop() end

---Creates an identical copy of the Source in the stopped state.Static Sources will use significantly less memory and take much less time to be created if Source:clone is used to create them instead of love.audio.newSource, so this method should be preferred when making multiple Sources which play the same sound.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:clone() end

---Gets a list of the Source's active effect names.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getActiveEffects() end

---Gets the amount of air absorption applied to the Source.By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getAirAbsorption() end

---Gets the reference and maximum attenuation distances of the Source. The values, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance from the listener.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getAttenuationDistances() end

---Gets the number of channels in the Source. Only 1-channel (mono) Sources can use directional and positional effects.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getChannelCount() end

---Gets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getCone() end

---Gets the direction of the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getDirection() end

---Gets the duration of the Source. For streaming Sources it may not always be sample-accurate, and may return -1 if the duration cannot be determined at all.
---@param unit loveModule.love.audio.TimeUnit|nil# ('seconds') The time unit for the return value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getDuration(unit) end

---Gets the filter settings associated to a specific effect.This function returns nil if the effect was applied with no filter settings associated to it.
---@param name string# The name of the effect.
---@param filtersettings table|nil# ({}) An optional empty table that will be filled with the filter settings.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getEffect(name, filtersettings) end

---Gets the filter settings currently applied to the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getFilter() end

---Gets the number of free buffer slots in a queueable Source. If the queueable Source is playing, this value will increase up to the amount the Source was created with. If the queueable Source is stopped, it will process all of its internal buffers first, in which case this function will always return the amount it was created with.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getFreeBufferCount() end

---Gets the current pitch of the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getPitch() end

---Gets the position of the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getPosition() end

---Returns the rolloff factor of the source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getRolloff() end

---Gets the type of the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getType() end

---Gets the velocity of the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getVelocity() end

---Gets the current volume of the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getVolume() end

---Returns the volume limits of the source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:getVolumeLimits() end

---Returns whether the Source will loop.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:isLooping() end

---Returns whether the Source is playing.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:isPlaying() end

---Gets whether the Source's position, velocity, direction, and cone angles are relative to the listener.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:isRelative() end

---Pauses the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:pause() end

---Starts playing the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:play() end

---Queues SoundData for playback in a queueable Source.This method requires the Source to be created via love.audio.newQueueableSource.
---@param sounddata love.sound.SoundData# The data to queue. The SoundData's sample rate, bit depth, and channel count must match the Source's.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:queue(sounddata) end

---Sets the currently playing position of the Source.
---@param offset number# The position to seek to.
---@param unit loveModule.love.audio.TimeUnit|nil# ('seconds') The unit of the position value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:seek(offset, unit) end

---Sets the amount of air absorption applied to the Source.By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.Air absorption can simulate sound transmission through foggy air, dry air, smoky atmosphere, etc. It can be used to simulate different atmospheric conditions within different locations in an area.
---@param amount number# The amount of air absorption applied to the Source. Must be between 0 and 10.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setAirAbsorption(amount) end

---Sets the reference and maximum attenuation distances of the Source. The parameters, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance.Distance attenuation is only applicable to Sources based on mono (rather than stereo) audio.
---@param ref number# The new reference attenuation distance. If the current DistanceModel is clamped, this is the minimum attenuation distance.
---@param max number# The new maximum attenuation distance.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setAttenuationDistances(ref, max) end

---Sets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction.
---@param innerAngle number# The inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle.
---@param outerAngle number# The outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles.
---@param outerVolume number|nil# (0) The Source's volume when the listener is outside both the inner and outer cone angles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setCone(innerAngle, outerAngle, outerVolume) end

---Sets the direction vector of the Source. A zero vector makes the source non-directional.
---@param x number# The X part of the direction vector.
---@param y number# The Y part of the direction vector.
---@param z number# The Z part of the direction vector.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setDirection(x, y, z) end

---Applies an audio effect to the Source.The effect must have been previously defined using love.audio.setEffect.
---@param name string# The name of the effect previously set up with love.audio.setEffect.
---@param enable boolean|nil# (true) If false and the given effect name was previously enabled on this Source, disables the effect.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setEffect(name, enable) end

---Applies an audio effect to the Source.The effect must have been previously defined using love.audio.setEffect.
---@param name string# The name of the effect previously set up with love.audio.setEffect.
---@param filtersettings {
---type : loveModule.love.audio.FilterType,
---volume : number,
---highgain : number,
---lowgain : number}# The filter settings to apply prior to the effect, with the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setEffect(name, filtersettings) end

---Sets a low-pass, high-pass, or band-pass filter to apply when playing the Source.
---@param settings {
---type : loveModule.love.audio.FilterType,
---volume : number,
---highgain : number,
---lowgain : number}# The filter settings to use for this Source, with the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setFilter(settings) end

---Sets a low-pass, high-pass, or band-pass filter to apply when playing the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setFilter() end

---Sets whether the Source should loop.
---@param loop boolean# True if the source should loop, false otherwise.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setLooping(loop) end

---Sets the pitch of the Source.
---@param pitch number# Calculated with regard to 1 being the base pitch. Each reduction by 50 percent equals a pitch shift of -12 semitones (one octave reduction). Each doubling equals a pitch shift of 12 semitones (one octave increase). Zero is not a legal value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setPitch(pitch) end

---Sets the position of the Source. Please note that this only works for mono (i.e. non-stereo) sound files!
---@param x number# The X position of the Source.
---@param y number# The Y position of the Source.
---@param z number# The Z position of the Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setPosition(x, y, z) end

---Sets whether the Source's position, velocity, direction, and cone angles are relative to the listener, or absolute.By default, all sources are absolute and therefore relative to the origin of love's coordinate system 0, 0. Only absolute sources are affected by the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources. 
---@param enable boolean|nil# (false) True to make the position, velocity, direction and cone angles relative to the listener, false to make them absolute.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setRelative(enable) end

---Sets the rolloff factor which affects the strength of the used distance attenuation.Extended information and detailed formulas can be found in the chapter '3.4. Attenuation By Distance' of OpenAL 1.1 specification.
---@param rolloff number# The new rolloff factor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setRolloff(rolloff) end

---Sets the velocity of the Source.This does '''not''' change the position of the Source, but lets the application know how it has to calculate the doppler effect.
---@param x number# The X part of the velocity vector.
---@param y number# The Y part of the velocity vector.
---@param z number# The Z part of the velocity vector.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setVelocity(x, y, z) end

---Sets the current volume of the Source.
---@param volume number# The volume for a Source, where 1.0 is normal volume. Volume cannot be raised above 1.0.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setVolume(volume) end

---Sets the volume limits of the source. The limits have to be numbers from 0 to 1.
---@param min number# The minimum volume.
---@param max number# The maximum volume.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:setVolumeLimits(min, max) end

---Stops a Source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:stop() end

---Gets the currently playing position of the Source.
---@param unit loveModule.love.audio.TimeUnit|nil# ('seconds') The type of unit for the return value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_audio_Source:tell(unit) end

---Compresses a string or data using a specific compression algorithm.
---@param container loveModule.love.data.ContainerType# What type to return the compressed data as.
---@param format loveModule.love.data.CompressedDataFormat# The format to use when compressing the string.
---@param rawstring string# The raw (un-compressed) string to compress.
---@param level number|nil# (-1) The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.compress(container, format, rawstring, level) end

---Compresses a string or data using a specific compression algorithm.
---@param container loveModule.love.data.ContainerType# What type to return the compressed data as.
---@param format loveModule.love.data.CompressedDataFormat# The format to use when compressing the data.
---@param data love.Data# A Data object containing the raw (un-compressed) data to compress.
---@param level number|nil# (-1) The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.compress(container, format, data, level) end

---Decode Data or a string from any of the EncodeFormats to Data or string.
---@param container loveModule.love.data.ContainerType# What type to return the decoded data as.
---@param format loveModule.love.data.EncodeFormat# The format of the input data.
---@param sourceString string# The raw (encoded) data to decode.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.decode(container, format, sourceString) end

---Decode Data or a string from any of the EncodeFormats to Data or string.
---@param container loveModule.love.data.ContainerType# What type to return the decoded data as.
---@param format loveModule.love.data.EncodeFormat# The format of the input data.
---@param sourceData love.Data# The raw (encoded) data to decode.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.decode(container, format, sourceData) end

---Decompresses a CompressedData or previously compressed string or Data object.
---@param container loveModule.love.data.ContainerType# What type to return the decompressed data as.
---@param compressedData love.data.CompressedData# The compressed data to decompress.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.decompress(container, compressedData) end

---Decompresses a CompressedData or previously compressed string or Data object.
---@param container loveModule.love.data.ContainerType# What type to return the decompressed data as.
---@param format loveModule.love.data.CompressedDataFormat# The format that was used to compress the given string.
---@param compressedString string# A string containing data previously compressed with love.data.compress.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.decompress(container, format, compressedString) end

---Decompresses a CompressedData or previously compressed string or Data object.
---@param container loveModule.love.data.ContainerType# What type to return the decompressed data as.
---@param format loveModule.love.data.CompressedDataFormat# The format that was used to compress the given data.
---@param data love.Data# A Data object containing data previously compressed with love.data.compress.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.decompress(container, format, data) end

---Encode Data or a string to a Data or string in one of the EncodeFormats.
---@param container loveModule.love.data.ContainerType# What type to return the encoded data as.
---@param format loveModule.love.data.EncodeFormat# The format of the output data.
---@param sourceString string# The raw data to encode.
---@param linelength number|nil# (0) The maximum line length of the output. Only supported for base64, ignored if 0.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.encode(container, format, sourceString, linelength) end

---Encode Data or a string to a Data or string in one of the EncodeFormats.
---@param container loveModule.love.data.ContainerType# What type to return the encoded data as.
---@param format loveModule.love.data.EncodeFormat# The format of the output data.
---@param sourceData love.Data# The raw data to encode.
---@param linelength number|nil# (0) The maximum line length of the output. Only supported for base64, ignored if 0.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.encode(container, format, sourceData, linelength) end

---Gets the size in bytes that a given format used with love.data.pack will use.This function behaves the same as Lua 5.3's string.packsize.
---@param format string# A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.getPackedSize(format) end

---Compute the message digest of a string using a specified hash algorithm.
---@param hashFunction loveModule.love.data.HashFunction# Hash algorithm to use.
---@param string string# String to hash.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.hash(hashFunction, string) end

---Compute the message digest of a string using a specified hash algorithm.
---@param hashFunction loveModule.love.data.HashFunction# Hash algorithm to use.
---@param data love.Data# Data to hash.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.hash(hashFunction, data) end

---Creates a new Data object containing arbitrary bytes.Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.
---@param datastring string# The byte string to copy.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.newByteData(datastring) end

---Creates a new Data object containing arbitrary bytes.Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.
---@param Data love.Data# The existing Data object to copy.
---@param offset number|nil# (0) The offset of the subsection to copy, in bytes.
---@param size number|nil# (data:getSize()) The size in bytes of the new Data object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.newByteData(Data, offset, size) end

---Creates a new Data object containing arbitrary bytes.Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.
---@param size number# The size in bytes of the new Data object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.newByteData(size) end

---Creates a new Data referencing a subsection of an existing Data object.
---@param data love.Data# The Data object to reference.
---@param offset number# The offset of the subsection to reference, in bytes.
---@param size number# The size in bytes of the subsection to reference.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.newDataView(data, offset, size) end

---Packs (serializes) simple Lua values.This function behaves the same as Lua 5.3's string.pack.
---@param container loveModule.love.data.ContainerType# What type to return the encoded data as.
---@param format string# A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings.
---@param v1 number|boolean|string# The first value (number, boolean, or string) to serialize.
---@param ... number|boolean|string# Additional values to serialize.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.pack(container, format, v1, ...) end

---Unpacks (deserializes) a byte-string or Data into simple Lua values.This function behaves the same as Lua 5.3's string.unpack.
---@param format string# A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings.
---@param datastring string# A string containing the packed (serialized) data.
---@param pos number|nil# (1) Where to start reading in the string. Negative values can be used to read relative from the end of the string.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.unpack(format, datastring, pos) end

---Unpacks (deserializes) a byte-string or Data into simple Lua values.This function behaves the same as Lua 5.3's string.unpack.
---@param format string# A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings.
---@param data love.Data# A Data object containing the packed (serialized) data.
---@param pos number|nil# (1) 1-based index indicating where to start reading in the Data. Negative values can be used to read relative from the end of the Data object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_data.unpack(format, data, pos) end

---Gets the compression format of the CompressedData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_data_CompressedData:getFormat() end

---Clears the event queue.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_event.clear() end

---Returns an iterator for messages in the event queue.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_event.poll() end

---Pump events into the event queue.This is a low-level function, and is usually not called by the user, but by love.run.Note that this does need to be called for any OS to think you're still running,and if you want to handle OS-generated events at all (think callbacks).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_event.pump() end

---Adds an event to the event queue.From 0.10.0 onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six.
---@param n loveModule.love.event.Event# The name of the event.
---@param a love.Variant|nil# (nil) First event argument.
---@param b love.Variant|nil# (nil) Second event argument.
---@param c love.Variant|nil# (nil) Third event argument.
---@param d love.Variant|nil# (nil) Fourth event argument.
---@param e love.Variant|nil# (nil) Fifth event argument.
---@param f love.Variant|nil# (nil) Sixth event argument.
---@param ... love.Variant|nil# (nil) Further event arguments may follow.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_event.push(n, a, b, c, d, e, f, ...) end

---Adds the quit event to the queue.The quit event is a signal for the event handler to close LÖVE. It's possible to abort the exit process with the love.quit callback.
---@param exitstatus number|nil# (0) The program exit status to use when closing the application.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_event.quit(exitstatus) end

---Adds the quit event to the queue.The quit event is a signal for the event handler to close LÖVE. It's possible to abort the exit process with the love.quit callback.
---@param restart string# Tells the default love.run to exit and restart the game without relaunching the executable.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_event.quit(restart) end

---Like love.event.poll(), but blocks until there is an event in the queue.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_event.wait() end

---Append data to an existing file.
---@param name string# The name (and path) of the file.
---@param data string# The string data to append to the file.
---@param size number|nil# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.append(name, data, size) end

---Append data to an existing file.
---@param name string# The name (and path) of the file.
---@param data love.Data# The Data object to append to the file.
---@param size number|nil# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.append(name, data, size) end

---Gets whether love.filesystem follows symbolic links.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.areSymlinksEnabled() end

---Recursively creates a directory.When called with 'a/b' it creates both 'a' and 'a/b', if they don't exist already.
---@param name string# The directory to create.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.createDirectory(name) end

---Returns the application data directory (could be the same as getUserDirectory)
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getAppdataDirectory() end

---Gets the filesystem paths that will be searched for c libraries when require is called.The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform.The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getCRequirePath() end

---Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.If the path passed to the function exists in the game and the save directory, it will list the files and directories from both places.
---@param dir string# The directory.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getDirectoryItems(dir) end

---Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.If the path passed to the function exists in the game and the save directory, it will list the files and directories from both places.
---@param dir string# The directory.
---@param callback function# A function which is called for each file and folder in the directory. The filename is passed to the function as an argument.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getDirectoryItems(dir, callback) end

---Gets the write directory name for your game. Note that this only returns the name of the folder to store your files in, not the full path.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getIdentity() end

---Gets information about the specified file or directory.
---@param path string# The file or directory path to check.
---@param filtertype loveModule.love.filesystem.FileType|nil# (nil) If supplied, this parameter causes getInfo to only return the info table if the item at the given path matches the specified file type.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getInfo(path, filtertype) end

---Gets information about the specified file or directory.
---@param path string# The file or directory path to check.
---@param info table# A table which will be filled in with info about the specified path.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getInfo(path, info) end

---Gets information about the specified file or directory.
---@param path string# The file or directory path to check.
---@param filtertype loveModule.love.filesystem.FileType# Causes getInfo to only return the info table if the item at the given path matches the specified file type.
---@param info table# A table which will be filled in with info about the specified path.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getInfo(path, filtertype, info) end

---Gets the platform-specific absolute path of the directory containing a filepath.This can be used to determine whether a file is inside the save directory or the game's source .love.
---@param filepath string# The filepath to get the directory of.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getRealDirectory(filepath) end

---Gets the filesystem paths that will be searched when require is called.The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.)The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getRequirePath() end

---Gets the full path to the designated save directory.This can be useful if you want to use the standard io library (or something else) toread or write in the save directory.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getSaveDirectory() end

---Returns the full path to the the .love file or directory. If the game is fused to the LÖVE executable, then the executable is returned.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getSource() end

---Returns the full path to the directory containing the .love file. If the game is fused to the LÖVE executable, then the directory containing the executable is returned.If love.filesystem.isFused is true, the path returned by this function can be passed to love.filesystem.mount, which will make the directory containing the main game (e.g. C:\Program Files\coolgame\) readable by love.filesystem.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getSourceBaseDirectory() end

---Returns the path of the user's directory
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getUserDirectory() end

---Gets the current working directory.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.getWorkingDirectory() end

---Initializes love.filesystem, will be called internally, so should not be used explicitly.
---@param appname string# The name of the application binary, typically love.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.init(appname) end

---Gets whether the game is in fused mode or not.If a game is in fused mode, its save directory will be directly in the Appdata directory instead of Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries which are located in the save directory.A game is in fused mode if the source .love has been fused to the executable (see Game Distribution), or if '--fused' has been given as a command-line argument when starting the game.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.isFused() end

---Iterate over the lines in a file.
---@param name string# The name (and path) of the file
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.lines(name) end

---Loads a Lua file (but does not run it).
---@param name string# The name (and path) of the file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.load(name) end

---Mounts a zip file or folder in the game's save directory for reading.It is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode.
---@param archive string# The folder or zip file in the game's save directory to mount.
---@param mountpoint string# The new path the archive will be mounted to.
---@param appendToPath boolean|nil# (false) Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.mount(archive, mountpoint, appendToPath) end

---Mounts a zip file or folder in the game's save directory for reading.It is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode.
---@param filedata love.filesystem.FileData# The FileData object in memory to mount.
---@param mountpoint string# The new path the archive will be mounted to.
---@param appendToPath boolean|nil# (false) Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.mount(filedata, mountpoint, appendToPath) end

---Mounts a zip file or folder in the game's save directory for reading.It is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode.
---@param data love.Data# The Data object in memory to mount.
---@param archivename string# The name to associate the mounted data with, for use with love.filesystem.unmount. Must be unique compared to other mounted data.
---@param mountpoint string# The new path the archive will be mounted to.
---@param appendToPath boolean|nil# (false) Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.mount(data, archivename, mountpoint, appendToPath) end

---Creates a new File object. It needs to be opened before it can be accessed.
---@param filename string# The filename of the file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.newFile(filename) end

---Creates a new File object. It needs to be opened before it can be accessed.
---@param filename string# The filename of the file.
---@param mode loveModule.love.filesystem.FileMode# The mode to open the file in.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.newFile(filename, mode) end

---Creates a new FileData object from a file on disk, or from a string in memory.
---@param contents string# The contents of the file in memory represented as a string.
---@param name string# The name of the file. The extension may be parsed and used by LÖVE when passing the FileData object into love.audio.newSource.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.newFileData(contents, name) end

---Creates a new FileData object from a file on disk, or from a string in memory.
---@param originaldata love.Data# The Data object to copy into the new FileData object.
---@param name string# The name of the file. The extension may be parsed and used by LÖVE when passing the FileData object into love.audio.newSource.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.newFileData(originaldata, name) end

---Creates a new FileData object from a file on disk, or from a string in memory.
---@param filepath string# Path to the file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.newFileData(filepath) end

---Read the contents of a file.
---@param name string# The name (and path) of the file.
---@param size number|nil# (all) How many bytes to read.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.read(name, size) end

---Read the contents of a file.
---@param container loveModule.love.data.ContainerType# What type to return the file's contents as.
---@param name string# The name (and path) of the file
---@param size number|nil# (all) How many bytes to read
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.read(container, name, size) end

---Removes a file or empty directory.
---@param name string# The file or directory to remove.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.remove(name) end

---Sets the filesystem paths that will be searched for c libraries when require is called.The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform.The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.
---@param paths string# The paths that the ''require'' function will check in love's filesystem.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.setCRequirePath(paths) end

---Sets the write directory for your game. Note that you can only set the name of the folder to store your files in, not the location.
---@param name string# The new identity that will be used as write directory.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.setIdentity(name) end

---Sets the write directory for your game. Note that you can only set the name of the folder to store your files in, not the location.
---@param name string# The new identity that will be used as write directory.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.setIdentity(name) end

---Sets the filesystem paths that will be searched when require is called.The paths string given to this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.)The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.
---@param paths string# The paths that the ''require'' function will check in love's filesystem.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.setRequirePath(paths) end

---Sets the source of the game, where the code is present. This function can only be called once, and is normally automatically done by LÖVE.
---@param path string# Absolute path to the game's source folder.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.setSource(path) end

---Sets whether love.filesystem follows symbolic links. It is enabled by default in version 0.10.0 and newer, and disabled by default in 0.9.2.
---@param enable boolean# Whether love.filesystem should follow symbolic links.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.setSymlinksEnabled(enable) end

---Unmounts a zip file or folder previously mounted for reading with love.filesystem.mount.
---@param archive string# The folder or zip file in the game's save directory which is currently mounted.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.unmount(archive) end

---Write data to a file in the save directory. If the file existed already, it will be completely replaced by the new contents.
---@param name string# The name (and path) of the file.
---@param data string# The string data to write to the file.
---@param size number|nil# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.write(name, data, size) end

---Write data to a file in the save directory. If the file existed already, it will be completely replaced by the new contents.
---@param name string# The name (and path) of the file.
---@param data love.Data# The Data object to write to the file.
---@param size number|nil# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_filesystem.write(name, data, size) end

---Closes a File.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:close() end

---Flushes any buffered written data in the file to the disk.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:flush() end

---Gets the buffer mode of a file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:getBuffer() end

---Gets the filename that the File object was created with. If the file object originated from the love.filedropped callback, the filename will be the full platform-dependent file path.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:getFilename() end

---Gets the FileMode the file has been opened with.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:getMode() end

---Returns the file size.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:getSize() end

---Gets whether end-of-file has been reached.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:isEOF() end

---Gets whether the file is open.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:isOpen() end

---Iterate over all the lines in a file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:lines() end

---Open the file for write, read or append.
---@param mode loveModule.love.filesystem.FileMode# The mode to open the file in.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:open(mode) end

---Read a number of bytes from a file.
---@param bytes number|nil# (all) The number of bytes to read.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:read(bytes) end

---Read a number of bytes from a file.
---@param container loveModule.love.data.ContainerType# What type to return the file's contents as.
---@param bytes number|nil# (all) The number of bytes to read.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:read(container, bytes) end

---Seek to a position in a file
---@param pos number# The position to seek to
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:seek(pos) end

---Sets the buffer mode for a file opened for writing or appending. Files with buffering enabled will not write data to the disk until the buffer size limit is reached, depending on the buffer mode.File:flush will force any buffered data to be written to the disk.
---@param mode loveModule.love.filesystem.BufferMode# The buffer mode to use.
---@param size number|nil# (0) The maximum size in bytes of the file's buffer.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:setBuffer(mode, size) end

---Returns the position in the file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:tell() end

---Write data to a file.
---@param data string# The string data to write.
---@param size number|nil# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:write(data, size) end

---Write data to a file.
---@param data love.Data# The Data object to write.
---@param size number|nil# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_File:write(data, size) end

---Gets the extension of the FileData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_FileData:getExtension() end

---Gets the filename of the FileData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_filesystem_FileData:getFilename() end

---Creates a new BMFont Rasterizer.
---@param imageData love.image.ImageData# The image data containing the drawable pictures of font glyphs.
---@param glyphs string# The sequence of glyphs in the ImageData.
---@param dpiscale number|nil# (1) DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newBMFontRasterizer(imageData, glyphs, dpiscale) end

---Creates a new BMFont Rasterizer.
---@param fileName string# The path to file containing the drawable pictures of font glyphs.
---@param glyphs string# The sequence of glyphs in the ImageData.
---@param dpiscale number|nil# (1) DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newBMFontRasterizer(fileName, glyphs, dpiscale) end

---Creates a new GlyphData.
---@param rasterizer love.font.Rasterizer# The Rasterizer containing the font.
---@param glyph number# The character code of the glyph.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newGlyphData(rasterizer, glyph) end

---Creates a new Image Rasterizer.
---@param imageData love.image.ImageData# Font image data.
---@param glyphs string# String containing font glyphs.
---@param extraSpacing number|nil# (0) Font extra spacing.
---@param dpiscale number|nil# (1) Font DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newImageRasterizer(imageData, glyphs, extraSpacing, dpiscale) end

---Creates a new Rasterizer.
---@param filename string# The font file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newRasterizer(filename) end

---Creates a new Rasterizer.
---@param data love.filesystem.FileData# The FileData of the font file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newRasterizer(data) end

---Creates a new Rasterizer.
---@param size number|nil# (12) The font size.
---@param hinting loveModule.love.font.HintingMode|nil# ('normal') True Type hinting mode.
---@param dpiscale number|nil# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newRasterizer(size, hinting, dpiscale) end

---Creates a new Rasterizer.
---@param fileName string# Path to font file.
---@param size number|nil# (12) The font size.
---@param hinting loveModule.love.font.HintingMode|nil# ('normal') True Type hinting mode.
---@param dpiscale number|nil# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newRasterizer(fileName, size, hinting, dpiscale) end

---Creates a new Rasterizer.
---@param fileData love.filesystem.FileData# File data containing font.
---@param size number|nil# (12) The font size.
---@param hinting loveModule.love.font.HintingMode|nil# ('normal') True Type hinting mode.
---@param dpiscale number|nil# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newRasterizer(fileData, size, hinting, dpiscale) end

---Creates a new Rasterizer.
---@param imageData love.image.ImageData# The image data containing the drawable pictures of font glyphs.
---@param glyphs string# The sequence of glyphs in the ImageData.
---@param dpiscale number|nil# (1) DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newRasterizer(imageData, glyphs, dpiscale) end

---Creates a new Rasterizer.
---@param fileName string# The path to file containing the drawable pictures of font glyphs.
---@param glyphs string# The sequence of glyphs in the ImageData.
---@param dpiscale number|nil# (1) DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newRasterizer(fileName, glyphs, dpiscale) end

---Creates a new TrueType Rasterizer.
---@param size number|nil# (12) The font size.
---@param hinting loveModule.love.font.HintingMode|nil# ('normal') True Type hinting mode.
---@param dpiscale number|nil# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newTrueTypeRasterizer(size, hinting, dpiscale) end

---Creates a new TrueType Rasterizer.
---@param fileName string# Path to font file.
---@param size number|nil# (12) The font size.
---@param hinting loveModule.love.font.HintingMode|nil# ('normal') True Type hinting mode.
---@param dpiscale number|nil# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newTrueTypeRasterizer(fileName, size, hinting, dpiscale) end

---Creates a new TrueType Rasterizer.
---@param fileData love.filesystem.FileData# File data containing font.
---@param size number|nil# (12) The font size.
---@param hinting loveModule.love.font.HintingMode|nil# ('normal') True Type hinting mode.
---@param dpiscale number|nil# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_font.newTrueTypeRasterizer(fileData, size, hinting, dpiscale) end

---Gets glyph advance.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_GlyphData:getAdvance() end

---Gets glyph bearing.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_GlyphData:getBearing() end

---Gets glyph bounding box.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_GlyphData:getBoundingBox() end

---Gets glyph dimensions.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_GlyphData:getDimensions() end

---Gets glyph pixel format.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_GlyphData:getFormat() end

---Gets glyph number.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_GlyphData:getGlyph() end

---Gets glyph string.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_GlyphData:getGlyphString() end

---Gets glyph height.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_GlyphData:getHeight() end

---Gets glyph width.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_GlyphData:getWidth() end

---Gets font advance.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_Rasterizer:getAdvance() end

---Gets ascent height.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_Rasterizer:getAscent() end

---Gets descent height.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_Rasterizer:getDescent() end

---Gets number of glyphs in font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_Rasterizer:getGlyphCount() end

---Gets glyph data of a specified glyph.
---@param glyph string# Glyph
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_Rasterizer:getGlyphData(glyph) end

---Gets glyph data of a specified glyph.
---@param glyphNumber number# Glyph number
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_Rasterizer:getGlyphData(glyphNumber) end

---Gets font height.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_Rasterizer:getHeight() end

---Gets line height of a font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_Rasterizer:getLineHeight() end

---Checks if font contains specified glyphs.
---@param glyph1 string|number# Glyph
---@param glyph2 string|number# Glyph
---@param ... string|number# Additional glyphs
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_font_Rasterizer:hasGlyphs(glyph1, glyph2, ...) end

---Applies the given Transform object to the current coordinate transformation.This effectively multiplies the existing coordinate transformation's matrix with the Transform object's internal matrix to produce the new coordinate transformation.
---@param transform love.math.Transform# The Transform object to apply to the current graphics coordinate transform.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.applyTransform(transform) end

---Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1 to angle2 in radians. The segments parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge.
---@param drawmode loveModule.love.graphics.DrawMode# How to draw the arc.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radius number# Radius of the arc.
---@param angle1 number# The angle at which the arc begins.
---@param angle2 number# The angle at which the arc terminates.
---@param segments number|nil# (10) The number of segments used for drawing the arc.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.arc(drawmode, x, y, radius, angle1, angle2, segments) end

---Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1 to angle2 in radians. The segments parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge.
---@param drawmode loveModule.love.graphics.DrawMode# How to draw the arc.
---@param arctype loveModule.love.graphics.ArcType# The type of arc to draw.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radius number# Radius of the arc.
---@param angle1 number# The angle at which the arc begins.
---@param angle2 number# The angle at which the arc terminates.
---@param segments number|nil# (10) The number of segments used for drawing the arc.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.arc(drawmode, arctype, x, y, radius, angle1, angle2, segments) end

---Creates a screenshot once the current frame is done (after love.draw has finished).Since this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame.
---@param filename string# The filename to save the screenshot to. The encoded image type is determined based on the extension of the filename, and must be one of the ImageFormats.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.captureScreenshot(filename) end

---Creates a screenshot once the current frame is done (after love.draw has finished).Since this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame.
---@param callback fun(imageData:love.image.ImageData)# Function which gets called once the screenshot has been captured. An ImageData is passed into the function as its only argument.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.captureScreenshot(callback) end

---Creates a screenshot once the current frame is done (after love.draw has finished).Since this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame.
---@param channel love.thread.Channel# The Channel to push the generated ImageData to.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.captureScreenshot(channel) end

---Draws a circle.
---@param mode loveModule.love.graphics.DrawMode# How to draw the circle.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radius number# The radius of the circle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.circle(mode, x, y, radius) end

---Draws a circle.
---@param mode loveModule.love.graphics.DrawMode# How to draw the circle.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radius number# The radius of the circle.
---@param segments number# The number of segments used for drawing the circle. Note: The default variable for the segments parameter varies between different versions of LÖVE.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.circle(mode, x, y, radius, segments) end

---Clears the screen or active Canvas to the specified color.This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.Note that the scissor area bounds the cleared region.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.In versions prior to background color instead.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.clear() end

---Clears the screen or active Canvas to the specified color.This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.Note that the scissor area bounds the cleared region.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.In versions prior to background color instead.
---@param r number# The red channel of the color to clear the screen to.
---@param g number# The green channel of the color to clear the screen to.
---@param b number# The blue channel of the color to clear the screen to.
---@param a number|nil# (1) The alpha channel of the color to clear the screen to.
---@param clearstencil boolean|nil# (true) Whether to clear the active stencil buffer, if present. It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.
---@param cleardepth boolean|nil# (true) Whether to clear the active depth buffer, if present. It can also be a number between 0 and 1 to clear the depth buffer to a specific value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.clear(r, g, b, a, clearstencil, cleardepth) end

---Clears the screen or active Canvas to the specified color.This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.Note that the scissor area bounds the cleared region.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.In versions prior to background color instead.
---@param color table[]# A table in the form of {r, g, b, a} containing the color to clear the first active Canvas to.
---@param ... table[]# Additional tables for each active Canvas.
---@param clearstencil boolean|nil# (true) Whether to clear the active stencil buffer, if present. It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.
---@param cleardepth boolean|nil# (true) Whether to clear the active depth buffer, if present. It can also be a number between 0 and 1 to clear the depth buffer to a specific value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.clear(color, ..., clearstencil, cleardepth) end

---Clears the screen or active Canvas to the specified color.This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.Note that the scissor area bounds the cleared region.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.In versions prior to background color instead.
---@param clearcolor boolean# Whether to clear the active color canvas to transparent black (0, 0, 0, 0). Typically this should be set to false with this variant of the function.
---@param clearstencil boolean# Whether to clear the active stencil buffer, if present. It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.
---@param cleardepth boolean# Whether to clear the active depth buffer, if present. It can also be a number between 0 and 1 to clear the depth buffer to a specific value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.clear(clearcolor, clearstencil, cleardepth) end

---Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases.If the active Canvas has just been changed and the 'replace' BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices.On some desktop systems this function may do nothing.
---@param discardcolor boolean|nil# (true) Whether to discard the texture(s) of the active Canvas(es) (the contents of the screen if no Canvas is active.)
---@param discardstencil boolean|nil# (true) Whether to discard the contents of the stencil buffer of the screen / active Canvas.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.discard(discardcolor, discardstencil) end

---Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases.If the active Canvas has just been changed and the 'replace' BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices.On some desktop systems this function may do nothing.
---@param discardcolors table[]# An array containing boolean values indicating whether to discard the texture of each active Canvas, when multiple simultaneous Canvases are active.
---@param discardstencil boolean|nil# (true) Whether to discard the contents of the stencil buffer of the screen / active Canvas.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.discard(discardcolors, discardstencil) end

---Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.The right and bottom edges of the object are shifted at an angle defined by the shearing factors.When using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.
---@param drawable love.graphics.Drawable# A drawable object.
---@param x number|nil# (0) The position to draw the object (x-axis).
---@param y number|nil# (0) The position to draw the object (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.draw(drawable, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.The right and bottom edges of the object are shifted at an angle defined by the shearing factors.When using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.
---@param texture love.graphics.Texture# A Texture (Image or Canvas) to texture the Quad with.
---@param quad love.graphics.Quad# The Quad to draw on screen.
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.draw(texture, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.The right and bottom edges of the object are shifted at an angle defined by the shearing factors.When using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.
---@param drawable love.graphics.Drawable# A drawable object.
---@param transform love.math.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.draw(drawable, transform) end

---Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.The right and bottom edges of the object are shifted at an angle defined by the shearing factors.When using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.
---@param texture love.graphics.Texture# A Texture (Image or Canvas) to texture the Quad with.
---@param quad love.graphics.Quad# The Quad to draw on screen.
---@param transform love.math.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.draw(texture, quad, transform) end

---Draws many instances of a Mesh with a single draw call, using hardware geometry instancing.Each instance can have unique properties (positions, colors, etc.) but will not by default unless a custom per-instance vertex attributes or the love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all render at the same position on top of each other.Instancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check.
---@param mesh love.graphics.Mesh# The mesh to render.
---@param instancecount number# The number of instances to render.
---@param x number|nil# (0) The position to draw the instances (x-axis).
---@param y number|nil# (0) The position to draw the instances (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.drawInstanced(mesh, instancecount, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws many instances of a Mesh with a single draw call, using hardware geometry instancing.Each instance can have unique properties (positions, colors, etc.) but will not by default unless a custom per-instance vertex attributes or the love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all render at the same position on top of each other.Instancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check.
---@param mesh love.graphics.Mesh# The mesh to render.
---@param instancecount number# The number of instances to render.
---@param transform love.math.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.drawInstanced(mesh, instancecount, transform) end

---Draws a layer of an Array Texture.
---@param texture love.graphics.Texture# The Array Texture to draw.
---@param layerindex number# The index of the layer to use when drawing.
---@param x number|nil# (0) The position to draw the texture (x-axis).
---@param y number|nil# (0) The position to draw the texture (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.drawLayer(texture, layerindex, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws a layer of an Array Texture.
---@param texture love.graphics.Texture# The Array Texture to draw.
---@param layerindex number# The index of the layer to use when drawing.
---@param quad love.graphics.Quad# The subsection of the texture's layer to use when drawing.
---@param x number|nil# (0) The position to draw the texture (x-axis).
---@param y number|nil# (0) The position to draw the texture (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.drawLayer(texture, layerindex, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws a layer of an Array Texture.
---@param texture love.graphics.Texture# The Array Texture to draw.
---@param layerindex number# The index of the layer to use when drawing.
---@param transform love.math.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.drawLayer(texture, layerindex, transform) end

---Draws a layer of an Array Texture.
---@param texture love.graphics.Texture# The Array Texture to draw.
---@param layerindex number# The index of the layer to use when drawing.
---@param quad love.graphics.Quad# The subsection of the texture's layer to use when drawing.
---@param transform love.math.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.drawLayer(texture, layerindex, quad, transform) end

---Draws an ellipse.
---@param mode loveModule.love.graphics.DrawMode# How to draw the ellipse.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radiusx number# The radius of the ellipse along the x-axis (half the ellipse's width).
---@param radiusy number# The radius of the ellipse along the y-axis (half the ellipse's height).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.ellipse(mode, x, y, radiusx, radiusy) end

---Draws an ellipse.
---@param mode loveModule.love.graphics.DrawMode# How to draw the ellipse.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radiusx number# The radius of the ellipse along the x-axis (half the ellipse's width).
---@param radiusy number# The radius of the ellipse along the y-axis (half the ellipse's height).
---@param segments number# The number of segments used for drawing the ellipse.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.ellipse(mode, x, y, radiusx, radiusy, segments) end

---Immediately renders any pending automatically batched draws.LÖVE will call this function internally as needed when most state is changed, so it is not necessary to manually call it.The current batch will be automatically flushed by love.graphics state changes (except for the transform stack and the current color), as well as Shader:send and methods on Textures which change their state. Using a different Image in consecutive love.graphics.draw calls will also flush the current batch.SpriteBatches, ParticleSystems, Meshes, and Text objects do their own batching and do not affect automatic batching of other draws, aside from flushing the current batch when they're drawn.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.flushBatch() end

---Gets the current background color.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getBackgroundColor() end

---Gets the blending mode.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getBlendMode() end

---Gets the current target Canvas.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getCanvas() end

---Gets the available Canvas formats, and whether each is supported.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getCanvasFormats() end

---Gets the available Canvas formats, and whether each is supported.
---@param readable boolean# If true, the returned formats will only be indicated as supported if readable flag set to true for that format, and vice versa if the parameter is false.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getCanvasFormats(readable) end

---Gets the current color.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getColor() end

---Gets the active color components used when drawing. Normally all 4 components are active unless love.graphics.setColorMask has been used.The color mask determines whether individual components of the colors of drawn objects will affect the color of the screen. They affect love.graphics.clear and Canvas:clear as well.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getColorMask() end

---Gets the DPI scale factor of the window.The DPI scale factor represents relative pixel density. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.graphics.getDPIScale() would return 2 in that case.The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getDPIScale() end

---Returns the default scaling filters used with Images, Canvases, and Fonts.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getDefaultFilter() end

---Gets the current depth test mode and whether writing to the depth buffer is enabled.This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getDepthMode() end

---Gets the width and height in pixels of the window.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getDimensions() end

---Gets the current Font object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getFont() end

---Gets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getFrontFaceWinding() end

---Gets the height in pixels of the window.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getHeight() end

---Gets the raw and compressed pixel formats usable for Images, and whether each is supported.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getImageFormats() end

---Gets the line join style.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getLineJoin() end

---Gets the line style.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getLineStyle() end

---Gets the current line width.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getLineWidth() end

---Gets whether back-facing triangles in a Mesh are culled.Mesh face culling is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getMeshCullMode() end

---Gets the width and height in pixels of the window.love.graphics.getDimensions gets the dimensions of the window in units scaled by the screen's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing to the screen and using the graphics coordinate system (calculating the center of the screen, for example), and getPixelDimensions only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getPixelDimensions() end

---Gets the height in pixels of the window.The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getHeight for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelHeight only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getPixelHeight() end

---Gets the width in pixels of the window.The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getWidth for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelWidth only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getPixelWidth() end

---Gets the point size.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getPointSize() end

---Gets information about the system's video card and drivers.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getRendererInfo() end

---Gets the current scissor box.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getScissor() end

---Gets the current Shader. Returns nil if none is set.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getShader() end

---Gets the current depth of the transform / state stack (the number of pushes without corresponding pops).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getStackDepth() end

---Gets performance-related rendering statistics. 
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getStats() end

---Gets performance-related rendering statistics. 
---@param stats table# A table which will be filled in with the stat fields below.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getStats(stats) end

---Gets the current stencil test configuration.When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.Each Canvas has its own per-pixel stencil values.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getStencilTest() end

---Gets the optional graphics features and whether they're supported on the system.Some older or low-end systems don't always support all graphics features.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getSupported() end

---Gets the system-dependent maximum values for love.graphics features.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getSystemLimits() end

---Gets the available texture types, and whether each is supported.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getTextureTypes() end

---Gets the width in pixels of the window.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.getWidth() end

---Sets the scissor to the rectangle created by the intersection of the specified rectangle with the existing scissor.  If no scissor is active yet, it behaves like love.graphics.setScissor.The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear.The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).
---@param x number# The x-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle.
---@param y number# The y-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle.
---@param width number# The width of the rectangle to intersect with the existing scissor rectangle.
---@param height number# The height of the rectangle to intersect with the existing scissor rectangle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.intersectScissor(x, y, width, height) end

---Converts the given 2D position from screen-space into global coordinates.This effectively applies the reverse of the current graphics transformations to the given position. A similar Transform:inverseTransformPoint method exists for Transform objects.
---@param screenX number# The x component of the screen-space position.
---@param screenY number# The y component of the screen-space position.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.inverseTransformPoint(screenX, screenY) end

---Gets whether the graphics module is able to be used. If it is not active, love.graphics function and method calls will not work correctly and may cause the program to crash.The graphics module is inactive if a window is not open, or if the app is in the background on iOS. Typically the app's execution will be automatically paused by the system, in the latter case.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.isActive() end

---Gets whether gamma-correct rendering is supported and enabled. It can be enabled by setting t.gammacorrect = true in love.conf.Not all devices support gamma-correct rendering, in which case it will be automatically disabled and this function will return false. It is supported on desktop systems which have graphics cards that are capable of using OpenGL 3 / DirectX 10, and iOS devices that can use OpenGL ES 3.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.isGammaCorrect() end

---Gets whether wireframe mode is used when drawing.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.isWireframe() end

---Draws lines between points.
---@param x1 number# The position of first point on the x-axis.
---@param y1 number# The position of first point on the y-axis.
---@param x2 number# The position of second point on the x-axis.
---@param y2 number# The position of second point on the y-axis.
---@param ... number# You can continue passing point positions to draw a polyline.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.line(x1, y1, x2, y2, ...) end

---Draws lines between points.
---@param points table[]# A table of point positions, as described above.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.line(points) end

---Creates a new array Image.An array image / array texture is a single object which contains multiple 'layers' or 'slices' of 2D sub-images. It can be thought of similarly to a texture atlas or sprite sheet, but it doesn't suffer from the same tile / quad bleeding artifacts that texture atlases do – although every sub-image must have the same dimensions.A specific layer of an array image can be drawn with love.graphics.drawLayer / SpriteBatch:addLayer, or with the Quad variant of love.graphics.draw and Quad:setLayer, or via a custom Shader.To use an array image in a Shader, it must be declared as a ArrayImage or sampler2DArray type (instead of Image or sampler2D). The Texel(ArrayImage image, vec3 texturecoord) shader function must be used to get pixel colors from a slice of the array image. The vec3 argument contains the texture coordinate in the first two components, and the 0-based slice index in the third component.
---@param slices table[]# A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. Each sub-image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the slice index of that sub-table.
---@param settings {
---mipmaps : boolean|nil,
---linear : boolean|nil,
---dpiscale : number|nil}|nil# (nil) Optional table of settings to configure the array image, containing the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newArrayImage(slices, settings) end

---Creates a new Canvas object for offscreen rendering.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newCanvas() end

---Creates a new Canvas object for offscreen rendering.
---@param width number# The desired width of the Canvas.
---@param height number# The desired height of the Canvas.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newCanvas(width, height) end

---Creates a new Canvas object for offscreen rendering.
---@param width number# The desired width of the Canvas.
---@param height number# The desired height of the Canvas.
---@param settings {
---type : loveModule.love.graphics.TextureType|nil,
---format : loveModule.love.image.PixelFormat|nil,
---readable : boolean,
---msaa : number|nil,
---dpiscale : number|nil,
---mipmaps : loveModule.love.graphics.MipmapMode|nil}|nil# (nil) A table containing the given fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newCanvas(width, height, settings) end

---Creates a new Canvas object for offscreen rendering.
---@param width number# The desired width of the Canvas.
---@param height number# The desired height of the Canvas.
---@param layers number# The number of array layers (if the Canvas is an Array Texture), or the volume depth (if the Canvas is a Volume Texture).
---@param settings {
---type : loveModule.love.graphics.TextureType|nil,
---format : loveModule.love.image.PixelFormat|nil,
---readable : boolean|nil,
---msaa : number|nil,
---dpiscale : number|nil,
---mipmaps : loveModule.love.graphics.MipmapMode|nil}|nil# (nil) A table containing the given fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newCanvas(width, height, layers, settings) end

---Creates a new cubemap Image.Cubemap images have 6 faces (sides) which represent a cube. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).To use a cubemap image in a Shader, it must be declared as a CubeImage or samplerCube type (instead of Image or sampler2D). The Texel(CubeImage image, vec3 direction) shader function must be used to get pixel colors from the cubemap. The vec3 argument is a normalized direction from the center of the cube, rather than explicit texture coordinates.Each face in a cubemap image must have square dimensions.For variants of this function which accept a single image containing multiple cubemap faces, they must be laid out in one of the following forms in the image:   +y+z +x -z   -y   -xor:   +y-x +z +x -z   -yor:+x-x+y-y+z-zor:+x -x +y -y +z -z
---@param filename string# The filepath to a cubemap image file (or a File, FileData, or ImageData).
---@param settings {
---mipmaps : boolean|nil,
---linear : boolean|nil}|nil# (nil) Optional table of settings to configure the cubemap image, containing the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newCubeImage(filename, settings) end

---Creates a new cubemap Image.Cubemap images have 6 faces (sides) which represent a cube. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).To use a cubemap image in a Shader, it must be declared as a CubeImage or samplerCube type (instead of Image or sampler2D). The Texel(CubeImage image, vec3 direction) shader function must be used to get pixel colors from the cubemap. The vec3 argument is a normalized direction from the center of the cube, rather than explicit texture coordinates.Each face in a cubemap image must have square dimensions.For variants of this function which accept a single image containing multiple cubemap faces, they must be laid out in one of the following forms in the image:   +y+z +x -z   -y   -xor:   +y-x +z +x -z   -yor:+x-x+y-y+z-zor:+x -x +y -y +z -z
---@param faces table# A table containing 6 filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. Each face image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the cube face index of that sub-table.
---@param settings {
---mipmaps : boolean|nil,
---linear : boolean|nil}|nil# (nil) Optional table of settings to configure the cubemap image, containing the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newCubeImage(faces, settings) end

---Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.All variants which accept a filename can also accept a Data object instead.
---@param filename string# The filepath to the BMFont or TrueType font file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newFont(filename) end

---Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.All variants which accept a filename can also accept a Data object instead.
---@param filename string# The filepath to the TrueType font file.
---@param size number# The size of the font in pixels.
---@param hinting loveModule.love.font.HintingMode|nil# ('normal') True Type hinting mode.
---@param dpiscale number|nil# (love.graphics.getDPIScale()) The DPI scale factor of the font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newFont(filename, size, hinting, dpiscale) end

---Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.All variants which accept a filename can also accept a Data object instead.
---@param filename string# The filepath to the BMFont file.
---@param imagefilename string# The filepath to the BMFont's image file. If this argument is omitted, the path specified inside the BMFont file will be used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newFont(filename, imagefilename) end

---Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.All variants which accept a filename can also accept a Data object instead.
---@param size number|nil# (12) The size of the font in pixels.
---@param hinting loveModule.love.font.HintingMode|nil# ('normal') True Type hinting mode.
---@param dpiscale number|nil# (love.graphics.getDPIScale()) The DPI scale factor of the font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newFont(size, hinting, dpiscale) end

---Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.
---@param filename string# The filepath to the image file.
---@param settings {
---dpiscale : number|nil,
---linear : boolean|nil,
---mipmaps : boolean|nil}|nil# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newImage(filename, settings) end

---Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.
---@param fileData love.filesystem.FileData# The FileData containing image file.
---@param settings {
---dpiscale : number|nil,
---linear : boolean|nil,
---mipmaps : boolean|nil}|nil# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newImage(fileData, settings) end

---Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.
---@param imageData love.image.ImageData# The ImageData containing image.
---@param settings {
---dpiscale : number|nil,
---linear : boolean|nil,
---mipmaps : boolean|nil}|nil# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newImage(imageData, settings) end

---Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.
---@param compressedImageData love.image.CompressedImageData# A CompressedImageData object. The Image will use this CompressedImageData to reload itself when love.window.setMode is called.
---@param settings {
---dpiscale : number|nil,
---linear : boolean|nil,
---mipmaps : boolean|nil}|nil# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newImage(compressedImageData, settings) end

---Creates a new specifically formatted image.In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs string.
---@param filename string# The filepath to the image file.
---@param glyphs string# A string of the characters in the image in order from left to right.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newImageFont(filename, glyphs) end

---Creates a new specifically formatted image.In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs string.
---@param imageData love.image.ImageData# The ImageData object to create the font from.
---@param glyphs string# A string of the characters in the image in order from left to right.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newImageFont(imageData, glyphs) end

---Creates a new specifically formatted image.In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs string.
---@param filename string# The filepath to the image file.
---@param glyphs string# A string of the characters in the image in order from left to right.
---@param extraspacing number# Additional spacing (positive or negative) to apply to each glyph in the Font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newImageFont(filename, glyphs, extraspacing) end

---Creates a new Mesh.Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param vertices {
---[1] : number,
---[2] : number,
---[3] : number|nil,
---[4] : number|nil,
---[5] : number|nil,
---[6] : number|nil,
---[7] : number|nil,
---[8] : number|nil}[]# The table filled with vertex information tables for each vertex as follows:
---@param mode loveModule.love.graphics.MeshDrawMode|nil# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@param usage loveModule.love.graphics.SpriteBatchUsage|nil# ('dynamic') The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newMesh(vertices, mode, usage) end

---Creates a new Mesh.Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param vertexcount number# The total number of vertices the Mesh will use. Each vertex is initialized to {0,0, 0,0, 1,1,1,1}.
---@param mode loveModule.love.graphics.MeshDrawMode|nil# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@param usage loveModule.love.graphics.SpriteBatchUsage|nil# ('dynamic') The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newMesh(vertexcount, mode, usage) end

---Creates a new Mesh.Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param vertexformat {
---attribute : table,
---[...] : table}# A table in the form of {attribute, ...}. Each attribute is a table which specifies a custom vertex attribute used for each vertex.
---@param vertices {
---attributecomponent : number,
---[...] : number}# The table filled with vertex information tables for each vertex, in the form of {vertex, ...} where each vertex is a table in the form of {attributecomponent, ...}.
---@param mode loveModule.love.graphics.MeshDrawMode|nil# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@param usage loveModule.love.graphics.SpriteBatchUsage|nil# ('dynamic') The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newMesh(vertexformat, vertices, mode, usage) end

---Creates a new Mesh.Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param vertexformat {
---attribute : table,
---[...] : table}# A table in the form of {attribute, ...}. Each attribute is a table which specifies a custom vertex attribute used for each vertex.
---@param vertexcount number# The total number of vertices the Mesh will use.
---@param mode loveModule.love.graphics.MeshDrawMode|nil# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@param usage loveModule.love.graphics.SpriteBatchUsage|nil# ('dynamic') The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newMesh(vertexformat, vertexcount, mode, usage) end

---Creates a new Mesh.Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param vertexcount number# The total number of vertices the Mesh will use. Each vertex is initialized to {0,0, 0,0, 255,255,255,255}.
---@param texture love.graphics.Texture|nil# (nil) The Image or Canvas to use when drawing the Mesh. May be nil to use no texture.
---@param mode loveModule.love.graphics.MeshDrawMode|nil# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newMesh(vertexcount, texture, mode) end

---Creates a new ParticleSystem.
---@param image love.graphics.Image# The image to use.
---@param buffer number|nil# (1000) The max number of particles at the same time.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newParticleSystem(image, buffer) end

---Creates a new ParticleSystem.
---@param texture love.graphics.Texture# The texture (Image or Canvas) to use.
---@param buffer number|nil# (1000) The max number of particles at the same time.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newParticleSystem(texture, buffer) end

---Creates a new Quad.The purpose of a Quad is to use a fraction of an image to draw objects, as opposed to drawing entire image. It is most useful for sprite sheets and atlases: in a sprite atlas, multiple sprites reside in same image, quad is used to draw a specific sprite from that image; in animated sprites with all frames residing in the same image, quad is used to draw specific frame from the animation.
---@param x number# The top-left position in the Image along the x-axis.
---@param y number# The top-left position in the Image along the y-axis.
---@param width number# The width of the Quad in the Image. (Must be greater than 0.)
---@param height number# The height of the Quad in the Image. (Must be greater than 0.)
---@param sw number# The reference width, the width of the Image. (Must be greater than 0.)
---@param sh number# The reference height, the height of the Image. (Must be greater than 0.)
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newQuad(x, y, width, height, sw, sh) end

---Creates a new Quad.The purpose of a Quad is to use a fraction of an image to draw objects, as opposed to drawing entire image. It is most useful for sprite sheets and atlases: in a sprite atlas, multiple sprites reside in same image, quad is used to draw a specific sprite from that image; in animated sprites with all frames residing in the same image, quad is used to draw specific frame from the animation.
---@param x number# The top-left position in the Image along the x-axis.
---@param y number# The top-left position in the Image along the y-axis.
---@param width number# The width of the Quad in the Image. (Must be greater than 0.)
---@param height number# The height of the Quad in the Image. (Must be greater than 0.)
---@param texture love.graphics.Texture# The texture whose width and height will be used as the reference width and height.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newQuad(x, y, width, height, texture) end

---Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both.Shaders are small programs which are run on the graphics card when drawing. Vertex shaders are run once for each vertex (for example, an image has 4 vertices - one at each corner. A Mesh might have many more.) Pixel shaders are run once for each pixel on the screen which the drawn object touches. Pixel shader code is executed after all the object's vertices have been processed by the vertex shader.
---@param code string# The pixel shader or vertex shader code, or a filename pointing to a file with the code.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newShader(code) end

---Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both.Shaders are small programs which are run on the graphics card when drawing. Vertex shaders are run once for each vertex (for example, an image has 4 vertices - one at each corner. A Mesh might have many more.) Pixel shaders are run once for each pixel on the screen which the drawn object touches. Pixel shader code is executed after all the object's vertices have been processed by the vertex shader.
---@param pixelcode string# The pixel shader code, or a filename pointing to a file with the code.
---@param vertexcode string# The vertex shader code, or a filename pointing to a file with the code.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newShader(pixelcode, vertexcode) end

---Creates a new SpriteBatch object.
---@param image love.graphics.Image# The Image to use for the sprites.
---@param maxsprites number|nil# (1000) The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newSpriteBatch(image, maxsprites) end

---Creates a new SpriteBatch object.
---@param image love.graphics.Image# The Image to use for the sprites.
---@param maxsprites number|nil# (1000) The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch.
---@param usage loveModule.love.graphics.SpriteBatchUsage|nil# ('dynamic') The expected usage of the SpriteBatch. The specified usage mode affects the SpriteBatch's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newSpriteBatch(image, maxsprites, usage) end

---Creates a new SpriteBatch object.
---@param texture love.graphics.Texture# The Image or Canvas to use for the sprites.
---@param maxsprites number|nil# (1000) The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch.
---@param usage loveModule.love.graphics.SpriteBatchUsage|nil# ('dynamic') The expected usage of the SpriteBatch. The specified usage mode affects the SpriteBatch's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newSpriteBatch(texture, maxsprites, usage) end

---Creates a new drawable Text object.
---@param font love.graphics.Font# The font to use for the text.
---@param textstring string|nil# (nil) The initial string of text that the new Text object will contain. May be nil.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newText(font, textstring) end

---Creates a new drawable Text object.
---@param font love.graphics.Font# The font to use for the text.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : love.Variant}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newText(font, coloredtext) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---@param filename string# The file path to the Ogg Theora video file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newVideo(filename) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---@param videostream love.video.VideoStream# A video stream object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newVideo(videostream) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---@param filename string# The file path to the Ogg Theora video file (or VideoStream).
---@param settings {
---audio : boolean|nil,
---dpiscale : number|nil}|nil# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newVideo(filename, settings) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---@param filename string# The file path to the Ogg Theora video file.
---@param loadaudio boolean|nil# (nil) Whether to try to load the video's audio into an audio Source. If not explicitly set to true or false, it will try without causing an error if the video has no audio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newVideo(filename, loadaudio) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---@param videostream love.video.VideoStream# A video stream object.
---@param loadaudio boolean|nil# (nil) Whether to try to load the video's audio into an audio Source. If not explicitly set to true or false, it will try without causing an error if the video has no audio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newVideo(videostream, loadaudio) end

---Creates a new volume (3D) Image.Volume images are 3D textures with width, height, and depth. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).To use a volume image in a Shader, it must be declared as a VolumeImage or sampler3D type (instead of Image or sampler2D). The Texel(VolumeImage image, vec3 texcoords) shader function must be used to get pixel colors from the volume image. The vec3 argument is a normalized texture coordinate with the z component representing the depth to sample at (ranging from 1).Volume images are typically used as lookup tables in shaders for color grading, for example, because sampling using a texture coordinate that is partway in between two pixels can interpolate across all 3 dimensions in the volume image, resulting in a smooth gradient even when a small-sized volume image is used as the lookup table.Array images are a much better choice than volume images for storing multiple different sprites in a single array image for directly drawing them.
---@param layers table[]# A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. A table of tables can also be given, where each sub-table represents a single mipmap level and contains all layers for that mipmap.
---@param settings {
---mipmaps : boolean|nil,
---linear : boolean|nil}|nil# (nil) Optional table of settings to configure the volume image, containing the following fields:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.newVolumeImage(layers, settings) end

---Resets the current coordinate transformation.This function is always used to reverse any previous calls to love.graphics.rotate, love.graphics.scale, love.graphics.shear or love.graphics.translate. It returns the current transformation state to its defaults.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.origin() end

---Draws one or more points.
---@param x number# The position of the first point on the x-axis.
---@param y number# The position of the first point on the y-axis.
---@param ... number# The x and y coordinates of additional points.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.points(x, y, ...) end

---Draws one or more points.
---@param points table[]# A table containing multiple point positions, in the form of {x, y, ...}.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.points(points) end

---Draws one or more points.
---@param points {
---point : table,
---[...] : table}# A table containing multiple individually colored points, in the form of {point, ...}.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.points(points) end

---Draw a polygon.Following the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices.
---@param mode loveModule.love.graphics.DrawMode# How to draw the polygon.
---@param ... number# The vertices of the polygon.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.polygon(mode, ...) end

---Draw a polygon.Following the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices.
---@param mode loveModule.love.graphics.DrawMode# How to draw the polygon.
---@param vertices table[]# The vertices of the polygon as a table.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.polygon(mode, vertices) end

---Pops the current coordinate transformation from the transformation stack.This function is always used to reverse a previous push operation. It returns the current transformation state to what it was before the last preceding push.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.pop() end

---Displays the results of drawing operations on the screen.This function is used when writing your own love.run function. It presents all the results of your drawing operations on the screen. See the example in love.run for a typical use of this function.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.present() end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param text string# The text to draw.
---@param x number|nil# (0) The position to draw the object (x-axis).
---@param y number|nil# (0) The position to draw the object (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.print(text, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param x number|nil# (0) The position of the text on the x-axis.
---@param y number|nil# (0) The position of the text on the y-axis.
---@param angle number|nil# (0) The orientation of the text in radians.
---@param sx number|nil# (1) Scale factor on the x-axis.
---@param sy number|nil# (sx) Scale factor on the y-axis.
---@param ox number|nil# (0) Origin offset on the x-axis.
---@param oy number|nil# (0) Origin offset on the y-axis.
---@param kx number|nil# (0) Shearing / skew factor on the x-axis.
---@param ky number|nil# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.print(coloredtext, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param text string# The text to draw.
---@param transform love.math.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.print(text, transform) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param transform love.math.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.print(coloredtext, transform) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param text string# The text to draw.
---@param font love.graphics.Font# The Font object to use.
---@param transform love.math.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.print(text, font, transform) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param font love.graphics.Font# The Font object to use.
---@param transform love.math.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.print(coloredtext, font, transform) end

---Draws formatted text, with word wrap and alignment.See additional notes in love.graphics.print.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param text string# A text string.
---@param x number# The position on the x-axis.
---@param y number# The position on the y-axis.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align loveModule.love.graphics.AlignMode|nil# ('left') The alignment.
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.printf(text, x, y, limit, align, r, sx, sy, ox, oy, kx, ky) end

---Draws formatted text, with word wrap and alignment.See additional notes in love.graphics.print.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param text string# A text string.
---@param font love.graphics.Font# The Font object to use.
---@param x number# The position on the x-axis.
---@param y number# The position on the y-axis.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align loveModule.love.graphics.AlignMode|nil# ('left') The alignment.
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.printf(text, font, x, y, limit, align, r, sx, sy, ox, oy, kx, ky) end

---Draws formatted text, with word wrap and alignment.See additional notes in love.graphics.print.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param text string# A text string.
---@param transform love.math.Transform# Transformation object.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align loveModule.love.graphics.AlignMode|nil# ('left') The alignment.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.printf(text, transform, limit, align) end

---Draws formatted text, with word wrap and alignment.See additional notes in love.graphics.print.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param text string# A text string.
---@param font love.graphics.Font# The Font object to use.
---@param transform love.math.Transform# Transformation object.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align loveModule.love.graphics.AlignMode|nil# ('left') The alignment.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.printf(text, font, transform, limit, align) end

---Draws formatted text, with word wrap and alignment.See additional notes in love.graphics.print.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param x number# The position of the text (x-axis).
---@param y number# The position of the text (y-axis).
---@param limit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align loveModule.love.graphics.AlignMode# The alignment of the text.
---@param angle number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing / skew factor (x-axis).
---@param ky number|nil# (0) Shearing / skew factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.printf(coloredtext, x, y, limit, align, angle, sx, sy, ox, oy, kx, ky) end

---Draws formatted text, with word wrap and alignment.See additional notes in love.graphics.print.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param font love.graphics.Font# The Font object to use.
---@param x number# The position on the x-axis.
---@param y number# The position on the y-axis.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align loveModule.love.graphics.AlignMode|nil# ('left') The alignment.
---@param angle number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.printf(coloredtext, font, x, y, limit, align, angle, sx, sy, ox, oy, kx, ky) end

---Draws formatted text, with word wrap and alignment.See additional notes in love.graphics.print.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param transform love.math.Transform# Transformation object.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align loveModule.love.graphics.AlignMode|nil# ('left') The alignment.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.printf(coloredtext, transform, limit, align) end

---Draws formatted text, with word wrap and alignment.See additional notes in love.graphics.print.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param font love.graphics.Font# The Font object to use.
---@param transform love.math.Transform# Transformation object.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align loveModule.love.graphics.AlignMode|nil# ('left') The alignment.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.printf(coloredtext, font, transform, limit, align) end

---Copies and pushes the current coordinate transformation to the transformation stack.This function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.push() end

---Copies and pushes the current coordinate transformation to the transformation stack.This function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push.
---@param stack loveModule.love.graphics.StackType# The type of stack to push (e.g. just transformation state, or all love.graphics state).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.push(stack) end

---Draws a rectangle.
---@param mode loveModule.love.graphics.DrawMode# How to draw the rectangle.
---@param x number# The position of top-left corner along the x-axis.
---@param y number# The position of top-left corner along the y-axis.
---@param width number# Width of the rectangle.
---@param height number# Height of the rectangle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.rectangle(mode, x, y, width, height) end

---Draws a rectangle.
---@param mode loveModule.love.graphics.DrawMode# How to draw the rectangle.
---@param x number# The position of top-left corner along the x-axis.
---@param y number# The position of top-left corner along the y-axis.
---@param width number# Width of the rectangle.
---@param height number# Height of the rectangle.
---@param rx number# The x-axis radius of each round corner. Cannot be greater than half the rectangle's width.
---@param ry number|nil# (rx) The y-axis radius of each round corner. Cannot be greater than half the rectangle's height.
---@param segments number|nil# (nil) The number of segments used for drawing the round corners. A default amount will be chosen if no number is given.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.rectangle(mode, x, y, width, height, rx, ry, segments) end

---Replaces the current coordinate transformation with the given Transform object.
---@param transform love.math.Transform# The Transform object to replace the current graphics coordinate transform with.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.replaceTransform(transform) end

---Resets the current graphics settings.Calling reset makes the current drawing color white, the current background color black, disables any active color component masks, disables wireframe mode and resets the current graphics transformation to the origin. It also sets both the point and line drawing modes to smooth and their sizes to 1.0.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.reset() end

---Rotates the coordinate system in two dimensions.Calling this function affects all future drawing operations by rotating the coordinate system around the origin by the given amount of radians. This change lasts until love.draw() exits.
---@param angle number# The amount to rotate the coordinate system in radians.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.rotate(angle) end

---Scales the coordinate system in two dimensions.By default the coordinate system in LÖVE corresponds to the display pixels in horizontal and vertical directions one-to-one, and the x-axis increases towards the right while the y-axis increases downwards. Scaling the coordinate system changes this relation.After scaling by sx and sy, all coordinates are treated as if they were multiplied by sx and sy. Every result of a drawing operation is also correspondingly scaled, so scaling by (2, 2) for example would mean making everything twice as large in both x- and y-directions. Scaling by a negative value flips the coordinate system in the corresponding direction, which also means everything will be drawn flipped or upside down, or both. Scaling by zero is not a useful operation.Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.Scaling lasts until love.draw() exits.
---@param sx number# The scaling in the direction of the x-axis.
---@param sy number|nil# (sx) The scaling in the direction of the y-axis. If omitted, it defaults to same as parameter sx.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.scale(sx, sy) end

---Sets the background color.
---@param red number# The red component (0-1).
---@param green number# The green component (0-1).
---@param blue number# The blue component (0-1).
---@param alpha number|nil# (1) The alpha component (0-1).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setBackgroundColor(red, green, blue, alpha) end

---Sets the background color.
---@param rgba table[]# A numerical indexed table with the red, green, blue and alpha values as numbers. The alpha is optional and defaults to 1 if it is left out.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setBackgroundColor(rgba) end

---Sets the blending mode.
---@param mode loveModule.love.graphics.BlendMode# The blend mode to use.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setBlendMode(mode) end

---Sets the blending mode.
---@param mode loveModule.love.graphics.BlendMode# The blend mode to use.
---@param alphamode loveModule.love.graphics.BlendAlphaMode|nil# ('alphamultiply') What to do with the alpha of drawn objects when blending.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setBlendMode(mode, alphamode) end

---Captures drawing operations to a Canvas.
---@param canvas love.graphics.Canvas# The new target.
---@param mipmap number|nil# (1) The mipmap level to render to, for Canvases with mipmaps.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setCanvas(canvas, mipmap) end

---Captures drawing operations to a Canvas.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setCanvas() end

---Captures drawing operations to a Canvas.
---@param canvas1 love.graphics.Canvas# The first render target.
---@param canvas2 love.graphics.Canvas# The second render target.
---@param ... love.graphics.Canvas# More canvases.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setCanvas(canvas1, canvas2, ...) end

---Captures drawing operations to a Canvas.
---@param canvas love.graphics.Canvas# The new render target.
---@param slice number# For cubemaps this is the cube face index to render to (between 1 and 6). For Array textures this is the array layer. For volume textures this is the depth slice. 2D canvases should use a value of 1.
---@param mipmap number|nil# (1) The mipmap level to render to, for Canvases with mipmaps.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setCanvas(canvas, slice, mipmap) end

---Captures drawing operations to a Canvas.
---@param setup {
---[1] : love.graphics.Canvas,
---[2] : love.graphics.Canvas|nil,
---[...] : love.graphics.Canvas,
---stencil : boolean|nil,
---depth : boolean|nil,
---depthstencil : love.graphics.Canvas|nil}# A table specifying the active Canvas(es), their mipmap levels and active layers if applicable, and whether to use a stencil and/or depth buffer.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setCanvas(setup) end

---Sets the color used for drawing.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param red number# The amount of red.
---@param green number# The amount of green.
---@param blue number# The amount of blue.
---@param alpha number|nil# (1) The amount of alpha.  The alpha value will be applied to all subsequent draw operations, even the drawing of an image.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setColor(red, green, blue, alpha) end

---Sets the color used for drawing.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param rgba table[]# A numerical indexed table with the red, green, blue and alpha values as numbers. The alpha is optional and defaults to 1 if it is left out.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setColor(rgba) end

---Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if '''red''' is set to '''false''', no further changes will be made to the red component of any pixels.
---@param red boolean# Render red component.
---@param green boolean# Render green component.
---@param blue boolean# Render blue component.
---@param alpha boolean# Render alpha component.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setColorMask(red, green, blue, alpha) end

---Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if '''red''' is set to '''false''', no further changes will be made to the red component of any pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setColorMask() end

---Sets the default scaling filters used with Images, Canvases, and Fonts.
---@param min loveModule.love.graphics.FilterMode# Filter mode used when scaling the image down.
---@param mag loveModule.love.graphics.FilterMode|nil# (min) Filter mode used when scaling the image up.
---@param anisotropy number|nil# (1) Maximum amount of Anisotropic Filtering used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setDefaultFilter(min, mag, anisotropy) end

---Configures depth testing and writing to the depth buffer.This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.
---@param comparemode loveModule.love.graphics.CompareMode# Depth comparison mode used for depth testing.
---@param write boolean# Whether to write update / write values to the depth buffer when rendering.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setDepthMode(comparemode, write) end

---Configures depth testing and writing to the depth buffer.This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setDepthMode() end

---Set an already-loaded Font as the current font or create and load a new one from the file and size.It's recommended that Font objects are created with love.graphics.newFont in the loading stage and then passed to this function in the drawing stage.
---@param font love.graphics.Font# The Font object to use.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setFont(font) end

---Sets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.
---@param winding loveModule.love.graphics.VertexWinding# The winding mode to use. The default winding is counterclockwise ('ccw').
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setFrontFaceWinding(winding) end

---Sets the line join style. See LineJoin for the possible options.
---@param join loveModule.love.graphics.LineJoin# The LineJoin to use.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setLineJoin(join) end

---Sets the line style.
---@param style loveModule.love.graphics.LineStyle# The LineStyle to use. Line styles include smooth and rough.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setLineStyle(style) end

---Sets the line width.
---@param width number# The width of the line.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setLineWidth(width) end

---Sets whether back-facing triangles in a Mesh are culled.This is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.By default, both front- and back-facing triangles in Meshes are rendered.
---@param mode loveModule.love.graphics.CullMode# The Mesh face culling mode to use (whether to render everything, cull back-facing triangles, or cull front-facing triangles).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setMeshCullMode(mode) end

---Creates and sets a new Font.
---@param size number|nil# (12) The size of the font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setNewFont(size) end

---Creates and sets a new Font.
---@param filename string# The path and name of the file with the font.
---@param size number|nil# (12) The size of the font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setNewFont(filename, size) end

---Creates and sets a new Font.
---@param file love.filesystem.File# A File with the font.
---@param size number|nil# (12) The size of the font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setNewFont(file, size) end

---Creates and sets a new Font.
---@param data love.Data# A Data with the font.
---@param size number|nil# (12) The size of the font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setNewFont(data, size) end

---Creates and sets a new Font.
---@param rasterizer love.font.Rasterizer# A rasterizer.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setNewFont(rasterizer) end

---Sets the point size.
---@param size number# The new point size.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setPointSize(size) end

---Sets or disables scissor.The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear. The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).
---@param x number# x coordinate of upper left corner.
---@param y number# y coordinate of upper left corner.
---@param width number# width of clipping rectangle.
---@param height number# height of clipping rectangle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setScissor(x, y, width, height) end

---Sets or disables scissor.The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear. The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setScissor() end

---Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified.
---@param shader love.graphics.Shader# The new shader.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setShader(shader) end

---Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setShader() end

---Configures or disables stencil testing.When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.
---@param comparemode loveModule.love.graphics.CompareMode# The type of comparison to make for each pixel.
---@param comparevalue number# The value to use when comparing with the stencil value of each pixel. Must be between 0 and 255.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setStencilTest(comparemode, comparevalue) end

---Configures or disables stencil testing.When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setStencilTest() end

---Sets whether wireframe lines will be used when drawing.
---@param enable boolean# True to enable wireframe mode when drawing, false to disable it.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.setWireframe(enable) end

---Shears the coordinate system.
---@param kx number# The shear factor on the x-axis.
---@param ky number# The shear factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.shear(kx, ky) end

---Draws geometry as a stencil.The geometry drawn by the supplied function sets invisible stencil values of pixels, instead of setting pixel colors. The stencil buffer (which contains those stencil values) can act like a mask / stencil - love.graphics.setStencilTest can be used afterward to determine how further rendering is affected by the stencil values in each pixel.Stencil values are integers within the range of 255.
---@param stencilfunction function# Function which draws geometry. The stencil values of pixels, rather than the color of each pixel, will be affected by the geometry.
---@param action loveModule.love.graphics.StencilAction|nil# ('replace') How to modify any stencil values of pixels that are touched by what's drawn in the stencil function.
---@param value number|nil# (1) The new stencil value to use for pixels if the 'replace' stencil action is used. Has no effect with other stencil actions. Must be between 0 and 255.
---@param keepvalues boolean|nil# (false) True to preserve old stencil values of pixels, false to re-set every pixel's stencil value to 0 before executing the stencil function. love.graphics.clear will also re-set all stencil values.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.stencil(stencilfunction, action, value, keepvalues) end

---Converts the given 2D position from global coordinates into screen-space.This effectively applies the current graphics transformations to the given position. A similar Transform:transformPoint method exists for Transform objects.
---@param globalX number# The x component of the position in global coordinates.
---@param globalY number# The y component of the position in global coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.transformPoint(globalX, globalY) end

---Translates the coordinate system in two dimensions.When this function is called with two numbers, dx, and dy, all the following drawing operations take effect as if their x and y coordinates were x+dx and y+dy. Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.This change lasts until love.draw() exits or else a love.graphics.pop reverts to a previous love.graphics.push.Translating using whole numbers will prevent tearing/blurring of images and fonts draw after translating.
---@param dx number# The translation relative to the x-axis.
---@param dy number# The translation relative to the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.translate(dx, dy) end

---Validates shader code. Check if specified shader code does not contain any errors.
---@param gles boolean# Validate code as GLSL ES shader.
---@param code string# The pixel shader or vertex shader code, or a filename pointing to a file with the code.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.validateShader(gles, code) end

---Validates shader code. Check if specified shader code does not contain any errors.
---@param gles boolean# Validate code as GLSL ES shader.
---@param pixelcode string# The pixel shader code, or a filename pointing to a file with the code.
---@param vertexcode string# The vertex shader code, or a filename pointing to a file with the code.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_graphics.validateShader(gles, pixelcode, vertexcode) end

---Generates mipmaps for the Canvas, based on the contents of the highest-resolution mipmap level.The Canvas must be created with mipmaps set to a MipmapMode other than 'none' for this function to work. It should only be called while the Canvas is not the active render target.If the mipmap mode is set to 'auto', this function is automatically called inside love.graphics.setCanvas when switching from this Canvas to another Canvas or to the main screen.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Canvas:generateMipmaps() end

---Gets the number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.This may be different than the number used as an argument to love.graphics.newCanvas if the system running LÖVE doesn't support that number.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Canvas:getMSAA() end

---Gets the MipmapMode this Canvas was created with.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Canvas:getMipmapMode() end

---Generates ImageData from the contents of the Canvas.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Canvas:newImageData() end

---Generates ImageData from the contents of the Canvas.
---@param slice number# The cubemap face index, array index, or depth layer for cubemap, array, or volume type Canvases, respectively. This argument is ignored for regular 2D canvases.
---@param mipmap number|nil# (1) The mipmap index to use, for Canvases with mipmaps.
---@param x number# The x-axis of the top-left corner (in pixels) of the area within the Canvas to capture.
---@param y number# The y-axis of the top-left corner (in pixels) of the area within the Canvas to capture.
---@param width number# The width in pixels of the area within the Canvas to capture.
---@param height number# The height in pixels of the area within the Canvas to capture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Canvas:newImageData(slice, mipmap, x, y, width, height) end

---Render to the Canvas using a function.This is a shortcut to love.graphics.setCanvas:canvas:renderTo( func )is the same aslove.graphics.setCanvas( canvas )func()love.graphics.setCanvas()
---@param func fun(...:any)# A function performing drawing operations.
---@param ... any# Additional arguments to call the function with.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Canvas:renderTo(func, ...) end

---Gets the ascent of the Font.The ascent spans the distance between the baseline and the top of the glyph that reaches farthest from the baseline.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getAscent() end

---Gets the baseline of the Font.Most scripts share the notion of a baseline: an imaginary horizontal line on which characters rest. In some scripts, parts of glyphs lie below the baseline.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getBaseline() end

---Gets the DPI scale factor of the Font.The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the font's glyphs have twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a font with a DPI scale factor of 1.The font size of TrueType fonts is scaled internally by the font's specified DPI scale factor. By default, LÖVE uses the screen's DPI scale factor when creating TrueType fonts.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getDPIScale() end

---Gets the descent of the Font.The descent spans the distance between the baseline and the lowest descending glyph in a typeface.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getDescent() end

---Gets the filter mode for a font.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getFilter() end

---Gets the height of the Font.The height of the font is the size including any spacing; the height which it will need.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getHeight() end

---Gets the kerning between two characters in the Font.Kerning is normally handled automatically in love.graphics.print, Text objects, Font:getWidth, Font:getWrap, etc. This function is useful when stitching text together manually.
---@param leftchar string# The left character.
---@param rightchar string# The right character.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getKerning(leftchar, rightchar) end

---Gets the kerning between two characters in the Font.Kerning is normally handled automatically in love.graphics.print, Text objects, Font:getWidth, Font:getWrap, etc. This function is useful when stitching text together manually.
---@param leftglyph number# The unicode number for the left glyph.
---@param rightglyph number# The unicode number for the right glyph.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getKerning(leftglyph, rightglyph) end

---Gets the line height.This will be the value previously set by Font:setLineHeight, or 1.0 by default.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getLineHeight() end

---Determines the maximum width (accounting for newlines) taken by the given string.
---@param text string# A string.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getWidth(text) end

---Gets formatting information for text, given a wrap limit.This function accounts for newlines correctly (i.e. '\n').
---@param text string# The text that will be wrapped.
---@param wraplimit number# The maximum width in pixels of each line that ''text'' is allowed before wrapping.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getWrap(text, wraplimit) end

---Gets formatting information for text, given a wrap limit.This function accounts for newlines correctly (i.e. '\n').
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param wraplimit number# The maximum width in pixels of each line that ''text'' is allowed before wrapping.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:getWrap(coloredtext, wraplimit) end

---Gets whether the Font can render a character or string.
---@param text string# A UTF-8 encoded unicode string.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:hasGlyphs(text) end

---Gets whether the Font can render a character or string.
---@param character1 string# A unicode character.
---@param character2 string# Another unicode character.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:hasGlyphs(character1, character2) end

---Gets whether the Font can render a character or string.
---@param codepoint1 number# A unicode codepoint number.
---@param codepoint2 number# Another unicode codepoint number.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:hasGlyphs(codepoint1, codepoint2) end

---Sets the fallback fonts. When the Font doesn't contain a glyph, it will substitute the glyph from the next subsequent fallback Fonts. This is akin to setting a 'font stack' in Cascading Style Sheets (CSS).
---@param fallbackfont1 love.graphics.Font# The first fallback Font to use.
---@param ... love.graphics.Font# Additional fallback Fonts.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:setFallbacks(fallbackfont1, ...) end

---Sets the filter mode for a font.
---@param min loveModule.love.graphics.FilterMode# How to scale a font down.
---@param mag loveModule.love.graphics.FilterMode# How to scale a font up.
---@param anisotropy number|nil# (1) Maximum amount of anisotropic filtering used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:setFilter(min, mag, anisotropy) end

---Sets the line height.When rendering the font in lines the actual height will be determined by the line height multiplied by the height of the font. The default is 1.0.
---@param height number# The new line height.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Font:setLineHeight(height) end

---Gets whether the Image was created from CompressedData.Compressed images take up less space in VRAM, and drawing a compressed image will generally be more efficient than drawing one created from raw pixel data.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Image:isCompressed() end

---Gets whether the Image was created with the linear (non-gamma corrected) flag set to true.This method always returns false when gamma-correct rendering is not enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Image:isFormatLinear() end

---Replace the contents of an Image.
---@param data love.image.ImageData# The new ImageData to replace the contents with.
---@param slice number|nil# (1) Which cubemap face, array index, or volume layer to replace, if applicable.
---@param mipmap number|nil# (1) The mimap level to replace, if the Image has mipmaps.
---@param x number|nil# (0) The x-offset in pixels from the top-left of the image to replace. The given ImageData's width plus this value must not be greater than the pixel width of the Image's specified mipmap level.
---@param y number|nil# (0) The y-offset in pixels from the top-left of the image to replace. The given ImageData's height plus this value must not be greater than the pixel height of the Image's specified mipmap level.
---@param reloadmipmaps boolean|nil# (false) Whether to generate new mipmaps after replacing the Image's pixels. True by default if the Image was created with automatically generated mipmaps, false by default otherwise.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Image:replacePixels(data, slice, mipmap, x, y, reloadmipmaps) end

---Attaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. This can be used to share vertex attribute data between several different Meshes.
---@param name string# The name of the vertex attribute to attach.
---@param mesh love.graphics.Mesh# The Mesh to get the vertex attribute from.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:attachAttribute(name, mesh) end

---Attaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. This can be used to share vertex attribute data between several different Meshes.
---@param name string# The name of the vertex attribute to attach.
---@param mesh love.graphics.Mesh# The Mesh to get the vertex attribute from.
---@param step loveModule.love.graphics.VertexAttributeStep|nil# ('pervertex') Whether the attribute will be per-vertex or per-instance when the mesh is drawn.
---@param attachname string|nil# (name) The name of the attribute to use in shader code. Defaults to the name of the attribute in the given mesh. Can be used to use a different name for this attribute when rendering.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:attachAttribute(name, mesh, step, attachname) end

---Removes a previously attached vertex attribute from this Mesh.
---@param name string# The name of the attached vertex attribute to detach.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:detachAttribute(name) end

---Immediately sends all modified vertex data in the Mesh to the graphics card.Normally it isn't necessary to call this method as love.graphics.draw(mesh, ...) will do it automatically if needed, but explicitly using **Mesh:flush** gives more control over when the work happens.If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(mesh, ...) calls.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:flush() end

---Gets the mode used when drawing the Mesh.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:getDrawMode() end

---Gets the range of vertices used when drawing the Mesh.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:getDrawRange() end

---Gets the texture (Image or Canvas) used when drawing the Mesh.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:getTexture() end

---Gets the properties of a vertex in the Mesh.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param index number# The one-based index of the vertex you want to retrieve the information for.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:getVertex(index) end

---Gets the properties of a vertex in the Mesh.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param index number# The index of the vertex you want to retrieve the information for.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:getVertex(index) end

---Gets the properties of a specific attribute within a vertex in the Mesh.Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.
---@param vertexindex number# The index of the the vertex you want to retrieve the attribute for (one-based).
---@param attributeindex number# The index of the attribute within the vertex to be retrieved (one-based).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:getVertexAttribute(vertexindex, attributeindex) end

---Gets the total number of vertices in the Mesh.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:getVertexCount() end

---Gets the vertex format that the Mesh was created with.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:getVertexFormat() end

---Gets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.If no vertex map has been set previously via Mesh:setVertexMap, then this function will return nil in LÖVE 0.10.0+, or an empty table in 0.9.2 and older.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:getVertexMap() end

---Gets whether a specific vertex attribute in the Mesh is enabled. Vertex data from disabled attributes is not used when drawing the Mesh.
---@param name string# The name of the vertex attribute to be checked.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:isAttributeEnabled(name) end

---Enables or disables a specific vertex attribute in the Mesh. Vertex data from disabled attributes is not used when drawing the Mesh.
---@param name string# The name of the vertex attribute to enable or disable.
---@param enable boolean# Whether the vertex attribute is used when drawing this Mesh.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setAttributeEnabled(name, enable) end

---Sets the mode used when drawing the Mesh.
---@param mode loveModule.love.graphics.MeshDrawMode# The mode to use when drawing the Mesh.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setDrawMode(mode) end

---Restricts the drawn vertices of the Mesh to a subset of the total.
---@param start number# The index of the first vertex to use when drawing, or the index of the first value in the vertex map to use if one is set for this Mesh.
---@param count number# The number of vertices to use when drawing, or number of values in the vertex map to use if one is set for this Mesh.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setDrawRange(start, count) end

---Restricts the drawn vertices of the Mesh to a subset of the total.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setDrawRange() end

---Sets the texture (Image or Canvas) used when drawing the Mesh.
---@param texture love.graphics.Texture# The Image or Canvas to texture the Mesh with when drawing.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setTexture(texture) end

---Sets the texture (Image or Canvas) used when drawing the Mesh.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setTexture() end

---Sets the properties of a vertex in the Mesh.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param index number# The index of the the vertex you want to modify (one-based).
---@param attributecomponent number# The first component of the first vertex attribute in the specified vertex.
---@param ... number# Additional components of all vertex attributes in the specified vertex.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertex(index, attributecomponent, ...) end

---Sets the properties of a vertex in the Mesh.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param index number# The index of the the vertex you want to modify (one-based).
---@param vertex {
---attributecomponent : number,
---[...] : number}# A table with vertex information, in the form of {attributecomponent, ...}.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertex(index, vertex) end

---Sets the properties of a vertex in the Mesh.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param index number# The index of the the vertex you want to modify (one-based).
---@param x number# The position of the vertex on the x-axis.
---@param y number# The position of the vertex on the y-axis.
---@param u number# The horizontal component of the texture coordinate.
---@param v number# The vertical component of the texture coordinate.
---@param r number|nil# (1) The red component of the vertex's color.
---@param g number|nil# (1) The green component of the vertex's color.
---@param b number|nil# (1) The blue component of the vertex's color.
---@param a number|nil# (1) The alpha component of the vertex's color.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertex(index, x, y, u, v, r, g, b, a) end

---Sets the properties of a vertex in the Mesh.In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---@param index number# The index of the the vertex you want to modify (one-based).
---@param vertex {
---[1] : number,
---[2] : number,
---[3] : number,
---[4] : number,
---[5] : number|nil,
---[6] : number|nil,
---[7] : number|nil,
---[8] : number|nil}# A table with vertex information.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertex(index, vertex) end

---Sets the properties of a specific attribute within a vertex in the Mesh.Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.
---@param vertexindex number# The index of the the vertex to be modified (one-based).
---@param attributeindex number# The index of the attribute within the vertex to be modified (one-based).
---@param value1 number# The new value for the first component of the attribute.
---@param value2 number# The new value for the second component of the attribute.
---@param ... number# Any additional vertex attribute components.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertexAttribute(vertexindex, attributeindex, value1, value2, ...) end

---Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.The vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes.
---@param map table# A table containing a list of vertex indices to use when drawing. Values must be in the range of Mesh:getVertexCount().
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertexMap(map) end

---Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.The vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes.
---@param vi1 number# The index of the first vertex to use when drawing. Must be in the range of Mesh:getVertexCount().
---@param vi2 number# The index of the second vertex to use when drawing.
---@param vi3 number# The index of the third vertex to use when drawing.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertexMap(vi1, vi2, vi3) end

---Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.The vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes.
---@param data love.Data# Array of vertex indices to use when drawing. Values must be in the range of Mesh:getVertexCount()-1
---@param datatype loveModule.love.graphics.IndexDataType# Datatype of the vertex indices array above.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertexMap(data, datatype) end

---Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop.
---@param vertices {
---attributecomponent : number,
---[...] : number}# The table filled with vertex information tables for each vertex, in the form of {vertex, ...} where each vertex is a table in the form of {attributecomponent, ...}.
---@param startvertex number|nil# (1) The index of the first vertex to replace.
---@param count number|nil# (all) Amount of vertices to replace.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertices(vertices, startvertex, count) end

---Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop.
---@param data love.Data# A Data object to copy from. The contents of the Data must match the layout of this Mesh's vertex format.
---@param startvertex number|nil# (1) The index of the first vertex to replace.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertices(data, startvertex) end

---Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop.
---@param vertices {
---[1] : number,
---[2] : number,
---[3] : number,
---[4] : number,
---[5] : number|nil,
---[6] : number|nil,
---[7] : number|nil,
---[8] : number|nil}# The table filled with vertex information tables for each vertex as follows:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Mesh:setVertices(vertices) end

---Creates an identical copy of the ParticleSystem in the stopped state.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:clone() end

---Emits a burst of particles from the particle emitter.
---@param numparticles number# The amount of particles to emit. The number of emitted particles will be truncated if the particle system's max buffer size is reached.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:emit(numparticles) end

---Gets the maximum number of particles the ParticleSystem can have at once.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getBufferSize() end

---Gets the series of colors applied to the particle sprite.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getColors() end

---Gets the number of particles that are currently in the system.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getCount() end

---Gets the direction of the particle emitter (in radians).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getDirection() end

---Gets the area-based spawn parameters for the particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getEmissionArea() end

---Gets the amount of particles emitted per second.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getEmissionRate() end

---Gets how long the particle system will emit particles (if -1 then it emits particles forever).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getEmitterLifetime() end

---Gets the mode used when the ParticleSystem adds new particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getInsertMode() end

---Gets the linear acceleration (acceleration along the x and y axes) for particles.Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getLinearAcceleration() end

---Gets the amount of linear damping (constant deceleration) for particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getLinearDamping() end

---Gets the particle image's draw offset.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getOffset() end

---Gets the lifetime of the particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getParticleLifetime() end

---Gets the position of the emitter.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getPosition() end

---Gets the series of Quads used for the particle sprites.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getQuads() end

---Gets the radial acceleration (away from the emitter).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getRadialAcceleration() end

---Gets the rotation of the image upon particle creation (in radians).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getRotation() end

---Gets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getSizeVariation() end

---Gets the series of sizes by which the sprite is scaled. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getSizes() end

---Gets the speed of the particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getSpeed() end

---Gets the spin of the sprite.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getSpin() end

---Gets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getSpinVariation() end

---Gets the amount of directional spread of the particle emitter (in radians).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getSpread() end

---Gets the tangential acceleration (acceleration perpendicular to the particle's direction).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getTangentialAcceleration() end

---Gets the texture (Image or Canvas) used for the particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:getTexture() end

---Gets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:hasRelativeRotation() end

---Checks whether the particle system is actively emitting particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:isActive() end

---Checks whether the particle system is paused.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:isPaused() end

---Checks whether the particle system is stopped.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:isStopped() end

---Moves the position of the emitter. This results in smoother particle spawning behaviour than if ParticleSystem:setPosition is used every frame.
---@param x number# Position along x-axis.
---@param y number# Position along y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:moveTo(x, y) end

---Pauses the particle emitter.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:pause() end

---Resets the particle emitter, removing any existing particles and resetting the lifetime counter.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:reset() end

---Sets the size of the buffer (the max allowed amount of particles in the system).
---@param size number# The buffer size.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setBufferSize(size) end

---Sets a series of colors to apply to the particle sprite. The particle system will interpolate between each color evenly over the particle's lifetime.Arguments can be passed in groups of four, representing the components of the desired RGBA value, or as tables of RGBA component values, with a default alpha value of 1 if only three values are given. At least one color must be specified. A maximum of eight may be used.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param r1 number# First color, red component (0-1).
---@param g1 number# First color, green component (0-1).
---@param b1 number# First color, blue component (0-1).
---@param a1 number|nil# (1) First color, alpha component (0-1).
---@param ... number# Additional colors.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setColors(r1, g1, b1, a1, ...) end

---Sets a series of colors to apply to the particle sprite. The particle system will interpolate between each color evenly over the particle's lifetime.Arguments can be passed in groups of four, representing the components of the desired RGBA value, or as tables of RGBA component values, with a default alpha value of 1 if only three values are given. At least one color must be specified. A maximum of eight may be used.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param rgba1 table[]# First color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1). The alpha is optional and defaults to 1 if it is left out.
---@param ... table[]# Additional color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1). The alpha is optional and defaults to 1 if it is left out.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setColors(rgba1, ...) end

---Sets the direction the particles will be emitted in.
---@param direction number# The direction of the particles (in radians).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setDirection(direction) end

---Sets area-based spawn parameters for the particles. Newly created particles will spawn in an area around the emitter based on the parameters to this function.
---@param distribution loveModule.love.graphics.AreaSpreadDistribution# The type of distribution for new particles.
---@param dx number# The maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution.
---@param dy number# The maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution.
---@param angle number|nil# (0) The angle in radians of the emission area.
---@param directionRelativeToCenter boolean|nil# (false) True if newly spawned particles will be oriented relative to the center of the emission area, false otherwise.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setEmissionArea(distribution, dx, dy, angle, directionRelativeToCenter) end

---Sets the amount of particles emitted per second.
---@param rate number# The amount of particles per second.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setEmissionRate(rate) end

---Sets how long the particle system should emit particles (if -1 then it emits particles forever).
---@param life number# The lifetime of the emitter (in seconds).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setEmitterLifetime(life) end

---Sets the mode to use when the ParticleSystem adds new particles.
---@param mode loveModule.love.graphics.ParticleInsertMode# The mode to use when the ParticleSystem adds new particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setInsertMode(mode) end

---Sets the linear acceleration (acceleration along the x and y axes) for particles.Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.
---@param xmin number# The minimum acceleration along the x axis.
---@param ymin number# The minimum acceleration along the y axis.
---@param xmax number|nil# (xmin) The maximum acceleration along the x axis.
---@param ymax number|nil# (ymin) The maximum acceleration along the y axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setLinearAcceleration(xmin, ymin, xmax, ymax) end

---Sets the amount of linear damping (constant deceleration) for particles.
---@param min number# The minimum amount of linear damping applied to particles.
---@param max number|nil# (min) The maximum amount of linear damping applied to particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setLinearDamping(min, max) end

---Set the offset position which the particle sprite is rotated around.If this function is not used, the particles rotate around their center.
---@param x number# The x coordinate of the rotation offset.
---@param y number# The y coordinate of the rotation offset.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setOffset(x, y) end

---Sets the lifetime of the particles.
---@param min number# The minimum life of the particles (in seconds).
---@param max number|nil# (min) The maximum life of the particles (in seconds).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setParticleLifetime(min, max) end

---Sets the position of the emitter.
---@param x number# Position along x-axis.
---@param y number# Position along y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setPosition(x, y) end

---Sets a series of Quads to use for the particle sprites. Particles will choose a Quad from the list based on the particle's current lifetime, allowing for the use of animated sprite sheets with ParticleSystems.
---@param quad1 love.graphics.Quad# The first Quad to use.
---@param ... love.graphics.Quad# Additional Quads to use.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setQuads(quad1, ...) end

---Sets a series of Quads to use for the particle sprites. Particles will choose a Quad from the list based on the particle's current lifetime, allowing for the use of animated sprite sheets with ParticleSystems.
---@param quads table[]# A table containing the Quads to use.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setQuads(quads) end

---Set the radial acceleration (away from the emitter).
---@param min number# The minimum acceleration.
---@param max number|nil# (min) The maximum acceleration.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setRadialAcceleration(min, max) end

---Sets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.
---@param enable boolean# True to enable relative particle rotation, false to disable it.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setRelativeRotation(enable) end

---Sets the rotation of the image upon particle creation (in radians).
---@param min number# The minimum initial angle (radians).
---@param max number|nil# (min) The maximum initial angle (radians).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setRotation(min, max) end

---Sets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).
---@param variation number# The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setSizeVariation(variation) end

---Sets a series of sizes by which to scale a particle sprite. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.At least one size must be specified. A maximum of eight may be used.
---@param size1 number# The first size.
---@param size2 number|nil# (nil) The second size.
---@param size8 number|nil# (nil) The eighth size.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setSizes(size1, size2, size8) end

---Sets the speed of the particles.
---@param min number# The minimum linear speed of the particles.
---@param max number|nil# (min) The maximum linear speed of the particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setSpeed(min, max) end

---Sets the spin of the sprite.
---@param min number# The minimum spin (radians per second).
---@param max number|nil# (min) The maximum spin (radians per second).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setSpin(min, max) end

---Sets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).
---@param variation number# The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setSpinVariation(variation) end

---Sets the amount of spread for the system.
---@param spread number# The amount of spread (radians).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setSpread(spread) end

---Sets the tangential acceleration (acceleration perpendicular to the particle's direction).
---@param min number# The minimum acceleration.
---@param max number|nil# (min) The maximum acceleration.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setTangentialAcceleration(min, max) end

---Sets the texture (Image or Canvas) to be used for the particles.
---@param texture love.graphics.Texture# An Image or Canvas to use for the particles.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:setTexture(texture) end

---Starts the particle emitter.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:start() end

---Stops the particle emitter, resetting the lifetime counter.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:stop() end

---Updates the particle system; moving, creating and killing particles.
---@param dt number# The time (seconds) since last frame.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_ParticleSystem:update(dt) end

---Gets reference texture dimensions initially specified in love.graphics.newQuad.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Quad:getTextureDimensions() end

---Gets the current viewport of this Quad.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Quad:getViewport() end

---Sets the texture coordinates according to a viewport.
---@param x number# The top-left corner along the x-axis.
---@param y number# The top-left corner along the y-axis.
---@param w number# The width of the viewport.
---@param h number# The height of the viewport.
---@param sw number|nil# (nil) Optional new reference width, the width of the Texture. Must be greater than 0 if set.
---@param sh number|nil# (nil) Optional new reference height, the height of the Texture. Must be greater than 0 if set.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Quad:setViewport(x, y, w, h, sw, sh) end

---Returns any warning and error messages from compiling the shader code. This can be used for debugging your shaders if there's anything the graphics hardware doesn't like.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:getWarnings() end

---Gets whether a uniform / extern variable exists in the Shader.If a graphics driver's shader compiler determines that a uniform / extern variable doesn't affect the final output of the shader, it may optimize the variable out. This function will return false in that case.
---@param name string# The name of the uniform variable.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:hasUniform(name) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.uniform float time;  // 'float' is the typical number type used in GLSL shaders.uniform float varsvec2 light_pos;uniform vec4 colors[4;The corresponding send calls would beshader:send('time', t)shader:send('vars',a,b)shader:send('light_pos', {light_x, light_y})shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---@param name string# Name of the number to send to the shader.
---@param number number# Number to send to store in the uniform variable.
---@param ... number# Additional numbers to send if the uniform variable is an array.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:send(name, number, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.uniform float time;  // 'float' is the typical number type used in GLSL shaders.uniform float varsvec2 light_pos;uniform vec4 colors[4;The corresponding send calls would beshader:send('time', t)shader:send('vars',a,b)shader:send('light_pos', {light_x, light_y})shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---@param name string# Name of the vector to send to the shader.
---@param vector table# Numbers to send to the uniform variable as a vector. The number of elements in the table determines the type of the vector (e.g. two numbers -&gt; vec2). At least two and at most four numbers can be used.
---@param ... table# Additional vectors to send if the uniform variable is an array. All vectors need to be of the same size (e.g. only vec3's).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:send(name, vector, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.uniform float time;  // 'float' is the typical number type used in GLSL shaders.uniform float varsvec2 light_pos;uniform vec4 colors[4;The corresponding send calls would beshader:send('time', t)shader:send('vars',a,b)shader:send('light_pos', {light_x, light_y})shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---@param name string# Name of the matrix to send to the shader.
---@param matrix table# 2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using table form: {{a,b,c,d}, {e,f,g,h}, ... } or (since version 0.10.2) {a,b,c,d, e,f,g,h, ...}. The order in 0.10.2 is column-major; starting in 11.0 it's row-major instead.
---@param ... table# Additional matrices of the same type as ''matrix'' to store in a uniform array.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:send(name, matrix, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.uniform float time;  // 'float' is the typical number type used in GLSL shaders.uniform float varsvec2 light_pos;uniform vec4 colors[4;The corresponding send calls would beshader:send('time', t)shader:send('vars',a,b)shader:send('light_pos', {light_x, light_y})shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---@param name string# Name of the Texture to send to the shader.
---@param texture love.graphics.Texture# Texture (Image or Canvas) to send to the uniform variable.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:send(name, texture) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.uniform float time;  // 'float' is the typical number type used in GLSL shaders.uniform float varsvec2 light_pos;uniform vec4 colors[4;The corresponding send calls would beshader:send('time', t)shader:send('vars',a,b)shader:send('light_pos', {light_x, light_y})shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---@param name string# Name of the boolean to send to the shader.
---@param boolean boolean# Boolean to send to store in the uniform variable.
---@param ... boolean# Additional booleans to send if the uniform variable is an array.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:send(name, boolean, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.uniform float time;  // 'float' is the typical number type used in GLSL shaders.uniform float varsvec2 light_pos;uniform vec4 colors[4;The corresponding send calls would beshader:send('time', t)shader:send('vars',a,b)shader:send('light_pos', {light_x, light_y})shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---@param name string# Name of the matrix to send to the shader.
---@param matrixlayout loveModule.love.math.MatrixLayout# The layout (row- or column-major) of the matrix.
---@param matrix table# 2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using table form: {{a,b,c,d}, {e,f,g,h}, ... } or {a,b,c,d, e,f,g,h, ...}.
---@param ... table# Additional matrices of the same type as ''matrix'' to store in a uniform array.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:send(name, matrixlayout, matrix, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.uniform float time;  // 'float' is the typical number type used in GLSL shaders.uniform float varsvec2 light_pos;uniform vec4 colors[4;The corresponding send calls would beshader:send('time', t)shader:send('vars',a,b)shader:send('light_pos', {light_x, light_y})shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---@param name string# Name of the uniform to send to the shader.
---@param data love.Data# Data object containing the values to send.
---@param offset number|nil# (0) Offset in bytes from the start of the Data object.
---@param size number|nil# (all) Size in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:send(name, data, offset, size) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.uniform float time;  // 'float' is the typical number type used in GLSL shaders.uniform float varsvec2 light_pos;uniform vec4 colors[4;The corresponding send calls would beshader:send('time', t)shader:send('vars',a,b)shader:send('light_pos', {light_x, light_y})shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---@param name string# Name of the uniform matrix to send to the shader.
---@param data love.Data# Data object containing the values to send.
---@param matrixlayout loveModule.love.math.MatrixLayout# The layout (row- or column-major) of the matrix in memory.
---@param offset number|nil# (0) Offset in bytes from the start of the Data object.
---@param size number|nil# (all) Size in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:send(name, data, matrixlayout, offset, size) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.uniform float time;  // 'float' is the typical number type used in GLSL shaders.uniform float varsvec2 light_pos;uniform vec4 colors[4;The corresponding send calls would beshader:send('time', t)shader:send('vars',a,b)shader:send('light_pos', {light_x, light_y})shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---@param name string# Name of the uniform matrix to send to the shader.
---@param matrixlayout loveModule.love.math.MatrixLayout# The layout (row- or column-major) of the matrix in memory.
---@param data love.Data# Data object containing the values to send.
---@param offset number|nil# (0) Offset in bytes from the start of the Data object.
---@param size number|nil# (all) Size in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:send(name, matrixlayout, data, offset, size) end

---Sends one or more colors to a special (''extern'' / ''uniform'') vec3 or vec4 variable inside the shader. The color components must be in the range of 1. The colors are gamma-corrected if global gamma-correction is enabled.Extern variables must be marked using the ''extern'' keyword, e.g.extern vec4 Color;The corresponding sendColor call would beshader:sendColor('Color', {r, g, b, a})Extern variables can be accessed in both the Vertex and Pixel stages of a shader, as long as the variable is declared in each.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param name string# The name of the color extern variable to send to in the shader.
---@param color table[]# A table with red, green, blue, and optional alpha color components in the range of 1 to send to the extern as a vector.
---@param ... table[]# Additional colors to send in case the extern is an array. All colors need to be of the same size (e.g. only vec3's).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Shader:sendColor(name, color, ...) end

---Adds a sprite to the batch. Sprites are drawn in the order they are added.
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shear factor (x-axis).
---@param ky number|nil# (0) Shear factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:add(x, y, r, sx, sy, ox, oy, kx, ky) end

---Adds a sprite to the batch. Sprites are drawn in the order they are added.
---@param quad love.graphics.Quad# The Quad to add.
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shear factor (x-axis).
---@param ky number|nil# (0) Shear factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:add(quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Adds a sprite to a batch created with an Array Texture.
---@param layerindex number# The index of the layer to use for this sprite.
---@param x number|nil# (0) The position to draw the sprite (x-axis).
---@param y number|nil# (0) The position to draw the sprite (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:addLayer(layerindex, x, y, r, sx, sy, ox, oy, kx, ky) end

---Adds a sprite to a batch created with an Array Texture.
---@param layerindex number# The index of the layer to use for this sprite.
---@param quad love.graphics.Quad# The subsection of the texture's layer to use when drawing the sprite.
---@param x number|nil# (0) The position to draw the sprite (x-axis).
---@param y number|nil# (0) The position to draw the sprite (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:addLayer(layerindex, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Adds a sprite to a batch created with an Array Texture.
---@param layerindex number# The index of the layer to use for this sprite.
---@param transform love.math.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:addLayer(layerindex, transform) end

---Adds a sprite to a batch created with an Array Texture.
---@param layerindex number# The index of the layer to use for this sprite.
---@param quad love.graphics.Quad# The subsection of the texture's layer to use when drawing the sprite.
---@param transform love.math.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:addLayer(layerindex, quad, transform) end

---Attaches a per-vertex attribute from a Mesh onto this SpriteBatch, for use when drawing. This can be combined with a Shader to augment a SpriteBatch with per-vertex or additional per-sprite information instead of just having per-sprite colors.Each sprite in a SpriteBatch has 4 vertices in the following order: top-left, bottom-left, top-right, bottom-right. The index returned by SpriteBatch:add (and used by SpriteBatch:set) can used to determine the first vertex of a specific sprite with the formula 1 + 4 * ( id - 1 ).
---@param name string# The name of the vertex attribute to attach.
---@param mesh love.graphics.Mesh# The Mesh to get the vertex attribute from.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:attachAttribute(name, mesh) end

---Removes all sprites from the buffer.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:clear() end

---Immediately sends all new and modified sprite data in the batch to the graphics card.Normally it isn't necessary to call this method as love.graphics.draw(spritebatch, ...) will do it automatically if needed, but explicitly using SpriteBatch:flush gives more control over when the work happens.If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(spritebatch, ...) calls.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:flush() end

---Gets the maximum number of sprites the SpriteBatch can hold.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:getBufferSize() end

---Gets the color that will be used for the next add and set operations.If no color has been set with SpriteBatch:setColor or the current SpriteBatch color has been cleared, this method will return nil.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:getColor() end

---Gets the number of sprites currently in the SpriteBatch.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:getCount() end

---Gets the texture (Image or Canvas) used by the SpriteBatch.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:getTexture() end

---Changes a sprite in the batch. This requires the sprite index returned by SpriteBatch:add or SpriteBatch:addLayer.
---@param spriteindex number# The index of the sprite that will be changed.
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shear factor (x-axis).
---@param ky number|nil# (0) Shear factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:set(spriteindex, x, y, r, sx, sy, ox, oy, kx, ky) end

---Changes a sprite in the batch. This requires the sprite index returned by SpriteBatch:add or SpriteBatch:addLayer.
---@param spriteindex number# The index of the sprite that will be changed.
---@param quad love.graphics.Quad# The Quad used on the image of the batch.
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shear factor (x-axis).
---@param ky number|nil# (0) Shear factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:set(spriteindex, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Sets the color that will be used for the next add and set operations. Calling the function without arguments will disable all per-sprite colors for the SpriteBatch.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.In version 0.9.2 and older, the global color set with love.graphics.setColor will not work on the SpriteBatch if any of the sprites has its own color.
---@param r number# The amount of red.
---@param g number# The amount of green.
---@param b number# The amount of blue.
---@param a number|nil# (1) The amount of alpha.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:setColor(r, g, b, a) end

---Sets the color that will be used for the next add and set operations. Calling the function without arguments will disable all per-sprite colors for the SpriteBatch.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.In version 0.9.2 and older, the global color set with love.graphics.setColor will not work on the SpriteBatch if any of the sprites has its own color.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:setColor() end

---Restricts the drawn sprites in the SpriteBatch to a subset of the total.
---@param start number# The index of the first sprite to draw. Index 1 corresponds to the first sprite added with SpriteBatch:add.
---@param count number# The number of sprites to draw.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:setDrawRange(start, count) end

---Restricts the drawn sprites in the SpriteBatch to a subset of the total.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:setDrawRange() end

---Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.
---@param spriteindex number# The index of the existing sprite to replace.
---@param layerindex number# The index of the layer in the Array Texture to use for this sprite.
---@param x number|nil# (0) The position to draw the sprite (x-axis).
---@param y number|nil# (0) The position to draw the sprite (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:setLayer(spriteindex, layerindex, x, y, r, sx, sy, ox, oy, kx, ky) end

---Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.
---@param spriteindex number# The index of the existing sprite to replace.
---@param layerindex number# The index of the layer to use for this sprite.
---@param quad love.graphics.Quad# The subsection of the texture's layer to use when drawing the sprite.
---@param x number|nil# (0) The position to draw the sprite (x-axis).
---@param y number|nil# (0) The position to draw the sprite (y-axis).
---@param r number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing factor (x-axis).
---@param ky number|nil# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:setLayer(spriteindex, layerindex, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.
---@param spriteindex number# The index of the existing sprite to replace.
---@param layerindex number# The index of the layer to use for the sprite.
---@param transform love.math.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:setLayer(spriteindex, layerindex, transform) end

---Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.
---@param spriteindex number# The index of the existing sprite to replace.
---@param layerindex number# The index of the layer to use for the sprite.
---@param quad love.graphics.Quad# The subsection of the texture's layer to use when drawing the sprite.
---@param transform love.math.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:setLayer(spriteindex, layerindex, quad, transform) end

---Sets the texture (Image or Canvas) used for the sprites in the batch, when drawing.
---@param texture love.graphics.Texture# The new Image or Canvas to use for the sprites in the batch.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_SpriteBatch:setTexture(texture) end

---Adds additional colored text to the Text object at the specified position.
---@param textstring string# The text to add to the object.
---@param x number|nil# (0) The position of the new text on the x-axis.
---@param y number|nil# (0) The position of the new text on the y-axis.
---@param angle number|nil# (0) The orientation of the new text in radians.
---@param sx number|nil# (1) Scale factor on the x-axis.
---@param sy number|nil# (sx) Scale factor on the y-axis.
---@param ox number|nil# (0) Origin offset on the x-axis.
---@param oy number|nil# (0) Origin offset on the y-axis.
---@param kx number|nil# (0) Shearing / skew factor on the x-axis.
---@param ky number|nil# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:add(textstring, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Adds additional colored text to the Text object at the specified position.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param x number|nil# (0) The position of the new text on the x-axis.
---@param y number|nil# (0) The position of the new text on the y-axis.
---@param angle number|nil# (0) The orientation of the new text in radians.
---@param sx number|nil# (1) Scale factor on the x-axis.
---@param sy number|nil# (sx) Scale factor on the y-axis.
---@param ox number|nil# (0) Origin offset on the x-axis.
---@param oy number|nil# (0) Origin offset on the y-axis.
---@param kx number|nil# (0) Shearing / skew factor on the x-axis.
---@param ky number|nil# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:add(coloredtext, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Adds additional formatted / colored text to the Text object at the specified position.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---@param textstring string# The text to add to the object.
---@param wraplimit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align loveModule.love.graphics.AlignMode# The alignment of the text.
---@param x number# The position of the new text (x-axis).
---@param y number# The position of the new text (y-axis).
---@param angle number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing / skew factor (x-axis).
---@param ky number|nil# (0) Shearing / skew factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:addf(textstring, wraplimit, align, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Adds additional formatted / colored text to the Text object at the specified position.The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param wraplimit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align loveModule.love.graphics.AlignMode# The alignment of the text.
---@param x number# The position of the new text (x-axis).
---@param y number# The position of the new text (y-axis).
---@param angle number|nil# (0) Orientation (radians).
---@param sx number|nil# (1) Scale factor (x-axis).
---@param sy number|nil# (sx) Scale factor (y-axis).
---@param ox number|nil# (0) Origin offset (x-axis).
---@param oy number|nil# (0) Origin offset (y-axis).
---@param kx number|nil# (0) Shearing / skew factor (x-axis).
---@param ky number|nil# (0) Shearing / skew factor (y-axis).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:addf(coloredtext, wraplimit, align, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Clears the contents of the Text object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:clear() end

---Gets the width and height of the text in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:getDimensions() end

---Gets the width and height of the text in pixels.
---@param index number# An index number returned by Text:add or Text:addf.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:getDimensions(index) end

---Gets the Font used with the Text object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:getFont() end

---Gets the height of the text in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:getHeight() end

---Gets the height of the text in pixels.
---@param index number# An index number returned by Text:add or Text:addf.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:getHeight(index) end

---Gets the width of the text in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:getWidth() end

---Gets the width of the text in pixels.
---@param index number# An index number returned by Text:add or Text:addf.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:getWidth(index) end

---Replaces the contents of the Text object with a new unformatted string.
---@param textstring string# The new string of text to use.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:set(textstring) end

---Replaces the contents of the Text object with a new unformatted string.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to use as the new text, in the form of {color1, string1, color2, string2, ...}.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:set(coloredtext) end

---Replaces the Font used with the text.
---@param font love.graphics.Font# The new font to use with this Text object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:setFont(font) end

---Replaces the contents of the Text object with a new formatted string.
---@param textstring string# The new string of text to use.
---@param wraplimit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align loveModule.love.graphics.AlignMode# The alignment of the text.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:setf(textstring, wraplimit, align) end

---Replaces the contents of the Text object with a new formatted string.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to use as the new text, in the form of {color1, string1, color2, string2, ...}.
---@param wraplimit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align loveModule.love.graphics.AlignMode# The alignment of the text.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Text:setf(coloredtext, wraplimit, align) end

---Gets the DPI scale factor of the Texture.The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1.For example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi /  retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getDPIScale() end

---Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getDepth() end

---Gets the comparison mode used when sampling from a depth texture in a shader.Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getDepthSampleMode() end

---Gets the width and height of the Texture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getDimensions() end

---Gets the filter mode of the Texture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getFilter() end

---Gets the pixel format of the Texture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getFormat() end

---Gets the height of the Texture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getHeight() end

---Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getLayerCount() end

---Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getMipmapCount() end

---Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getMipmapFilter() end

---Gets the width and height in pixels of the Texture.Texture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getPixelDimensions() end

---Gets the height in pixels of the Texture.DPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getPixelHeight() end

---Gets the width in pixels of the Texture.DPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getPixelWidth() end

---Gets the type of the Texture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getTextureType() end

---Gets the width of the Texture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getWidth() end

---Gets the wrapping properties of a Texture.This function returns the currently set horizontal and vertical wrapping modes for the texture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:getWrap() end

---Gets whether the Texture can be drawn and sent to a Shader.Canvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas.Non-readable Canvases can still be rendered to.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:isReadable() end

---Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.When using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation.Depth texture comparison can only be used with readable depth-formatted Canvases.
---@param compare loveModule.love.graphics.CompareMode# The comparison mode used when sampling from this texture in a shader.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:setDepthSampleMode(compare) end

---Sets the filter mode of the Texture.
---@param min loveModule.love.graphics.FilterMode# Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels).
---@param mag loveModule.love.graphics.FilterMode|nil# (min) Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels).
---@param anisotropy number|nil# (1) Maximum amount of anisotropic filtering to use.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:setFilter(min, mag, anisotropy) end

---Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues.In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers.Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps.
---@param filtermode loveModule.love.graphics.FilterMode# The filter mode to use in between mipmap levels. 'nearest' will often give better performance.
---@param sharpness number|nil# (0) A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:setMipmapFilter(filtermode, sharpness) end

---Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues.In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers.Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:setMipmapFilter() end

---Sets the wrapping properties of a Texture.This function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions.Clamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad.
---@param horiz loveModule.love.graphics.WrapMode# Horizontal wrapping mode of the texture.
---@param vert loveModule.love.graphics.WrapMode|nil# (horiz) Vertical wrapping mode of the texture.
---@param depth loveModule.love.graphics.WrapMode|nil# (horiz) Wrapping mode for the z-axis of a Volume texture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Texture:setWrap(horiz, vert, depth) end

---Gets the width and height of the Video in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:getDimensions() end

---Gets the scaling filters used when drawing the Video.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:getFilter() end

---Gets the height of the Video in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:getHeight() end

---Gets the audio Source used for playing back the video's audio. May return nil if the video has no audio, or if Video:setSource is called with a nil argument.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:getSource() end

---Gets the VideoStream object used for decoding and controlling the video.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:getStream() end

---Gets the width of the Video in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:getWidth() end

---Gets whether the Video is currently playing.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:isPlaying() end

---Pauses the Video.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:pause() end

---Starts playing the Video. In order for the video to appear onscreen it must be drawn with love.graphics.draw.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:play() end

---Rewinds the Video to the beginning.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:rewind() end

---Sets the current playback position of the Video.
---@param offset number# The time in seconds since the beginning of the Video.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:seek(offset) end

---Sets the scaling filters used when drawing the Video.
---@param min loveModule.love.graphics.FilterMode# The filter mode used when scaling the Video down.
---@param mag loveModule.love.graphics.FilterMode# The filter mode used when scaling the Video up.
---@param anisotropy number|nil# (1) Maximum amount of anisotropic filtering used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:setFilter(min, mag, anisotropy) end

---Sets the audio Source used for playing back the video's audio. The audio Source also controls playback speed and synchronization.
---@param source love.audio.Source|nil# (nil) The audio Source used for audio playback, or nil to disable audio synchronization.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:setSource(source) end

---Gets the current playback position of the Video.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_graphics_Video:tell() end

---Determines whether a file can be loaded as CompressedImageData.
---@param filename string# The filename of the potentially compressed image file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_image.isCompressed(filename) end

---Determines whether a file can be loaded as CompressedImageData.
---@param fileData love.filesystem.FileData# A FileData potentially containing a compressed image.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_image.isCompressed(fileData) end

---Create a new CompressedImageData object from a compressed image file. LÖVE supports several compressed texture formats, enumerated in the CompressedImageFormat page.
---@param filename string# The filename of the compressed image file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_image.newCompressedData(filename) end

---Create a new CompressedImageData object from a compressed image file. LÖVE supports several compressed texture formats, enumerated in the CompressedImageFormat page.
---@param fileData love.filesystem.FileData# A FileData containing a compressed image.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_image.newCompressedData(fileData) end

---Creates a new ImageData object.
---@param width number# The width of the ImageData.
---@param height number# The height of the ImageData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_image.newImageData(width, height) end

---Creates a new ImageData object.
---@param width number# The width of the ImageData.
---@param height number# The height of the ImageData.
---@param format loveModule.love.image.PixelFormat|nil# ('rgba8') The pixel format of the ImageData.
---@param data string|nil# (nil) Optional raw byte data to load into the ImageData, in the format specified by ''format''.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_image.newImageData(width, height, format, data) end

---Creates a new ImageData object.
---@param width number# The width of the ImageData.
---@param height number# The height of the ImageData.
---@param data string# The data to load into the ImageData (RGBA bytes, left to right and top to bottom).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_image.newImageData(width, height, data) end

---Creates a new ImageData object.
---@param filename string# The filename of the image file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_image.newImageData(filename) end

---Creates a new ImageData object.
---@param filedata love.filesystem.FileData# The encoded file data to decode into image data.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_image.newImageData(filedata) end

---Gets the width and height of the CompressedImageData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_CompressedImageData:getDimensions() end

---Gets the width and height of the CompressedImageData.
---@param level number# A mipmap level. Must be in the range of CompressedImageData:getMipmapCount().
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_CompressedImageData:getDimensions(level) end

---Gets the format of the CompressedImageData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_CompressedImageData:getFormat() end

---Gets the height of the CompressedImageData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_CompressedImageData:getHeight() end

---Gets the height of the CompressedImageData.
---@param level number# A mipmap level. Must be in the range of CompressedImageData:getMipmapCount().
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_CompressedImageData:getHeight(level) end

---Gets the number of mipmap levels in the CompressedImageData. The base mipmap level (original image) is included in the count.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_CompressedImageData:getMipmapCount() end

---Gets the width of the CompressedImageData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_CompressedImageData:getWidth() end

---Gets the width of the CompressedImageData.
---@param level number# A mipmap level. Must be in the range of  CompressedImageData:getMipmapCount().
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_CompressedImageData:getWidth(level) end

---Encodes the ImageData and optionally writes it to the save directory.
---@param format loveModule.love.image.ImageFormat# The format to encode the image as.
---@param filename string|nil# (nil) The filename to write the file to. If nil, no file will be written but the FileData will still be returned.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:encode(format, filename) end

---Encodes the ImageData and optionally writes it to the save directory.
---@param outFile string# Name of a file to write encoded data to. The format will be automatically deduced from the file extension.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:encode(outFile) end

---Encodes the ImageData and optionally writes it to the save directory.
---@param outFile string# Name of a file to write encoded data to.
---@param format loveModule.love.image.ImageFormat# The format to encode the image in.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:encode(outFile, format) end

---Gets the width and height of the ImageData in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:getDimensions() end

---Gets the height of the ImageData in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:getHeight() end

---Gets the color of a pixel at a specific position in the image.Valid x and y values start at 0 and go up to image width and height minus 1. Non-integer values are floored.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param x number# The position of the pixel on the x-axis.
---@param y number# The position of the pixel on the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:getPixel(x, y) end

---Gets the width of the ImageData in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:getWidth() end

---Transform an image by applying a function to every pixel.This function is a higher-order function. It takes another function as a parameter, and calls it once for each pixel in the ImageData.The passed function is called with six parameters for each pixel in turn. The parameters are numbers that represent the x and y coordinates of the pixel and its red, green, blue and alpha values. The function should return the new red, green, blue, and alpha values for that pixel.function pixelFunction(x, y, r, g, b, a)    -- template for defining your own pixel mapping function    -- perform computations giving the new values for r, g, b and a    -- ...    return r, g, b, aendIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param pixelFunction fun(x:number, y:number, r:number, g:number, b:number, a:number): r:number, g:number, b:number, a:number# Function to apply to every pixel.
---@param x number|nil# (0) The x-axis of the top-left corner of the area within the ImageData to apply the function to.
---@param y number|nil# (0) The y-axis of the top-left corner of the area within the ImageData to apply the function to.
---@param width number|nil# (ImageData:getWidth()) The width of the area within the ImageData to apply the function to.
---@param height number|nil# (ImageData:getHeight()) The height of the area within the ImageData to apply the function to.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:mapPixel(pixelFunction, x, y, width, height) end

---Paste into ImageData from another source ImageData.
---@param source love.image.ImageData# Source ImageData from which to copy.
---@param dx number# Destination top-left position on x-axis.
---@param dy number# Destination top-left position on y-axis.
---@param sx number# Source top-left position on x-axis.
---@param sy number# Source top-left position on y-axis.
---@param sw number# Source width.
---@param sh number# Source height.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:paste(source, dx, dy, sx, sy, sw, sh) end

---Sets the color of a pixel at a specific position in the image.Valid x and y values start at 0 and go up to image width and height minus 1.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param x number# The position of the pixel on the x-axis.
---@param y number# The position of the pixel on the y-axis.
---@param r number# The red component (0-1).
---@param g number# The green component (0-1).
---@param b number# The blue component (0-1).
---@param a number# The alpha component (0-1).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:setPixel(x, y, r, g, b, a) end

---Sets the color of a pixel at a specific position in the image.Valid x and y values start at 0 and go up to image width and height minus 1.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param x number# The position of the pixel on the x-axis.
---@param y number# The position of the pixel on the y-axis.
---@param color table[]# A numerical indexed table with the red, green, blue and alpha values as numbers.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:setPixel(x, y, color) end

---Gets the pixel format of the ImageData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_image_ImageData:getFormat() end

---Gets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a gamepad.The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings.
---@param guid string# The GUID value to get the mapping string for.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_joystick.getGamepadMappingString(guid) end

---Gets the number of connected joysticks.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_joystick.getJoystickCount() end

---Gets a list of connected Joysticks.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_joystick.getJoysticks() end

---Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.It also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this nice database. If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded.
---@param filename string# The filename to load the mappings string from.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_joystick.loadGamepadMappings(filename) end

---Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.It also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this nice database. If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded.
---@param mappings string# The mappings string to load.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_joystick.loadGamepadMappings(mappings) end

---Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified.The mappings are stored as a string for use with love.joystick.loadGamepadMappings.
---@param filename string# The filename to save the mappings string to.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_joystick.saveGamepadMappings(filename) end

---Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified.The mappings are stored as a string for use with love.joystick.loadGamepadMappings.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_joystick.saveGamepadMappings() end

---Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X.LÖVE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.The virtual gamepad buttons and axes are designed around the Xbox 360 controller layout.
---@param guid string# The OS-dependent GUID for the type of Joystick the binding will affect.
---@param button loveModule.love.joystick.GamepadButton# The virtual gamepad button to bind.
---@param inputtype loveModule.love.joystick.JoystickInputType# The type of input to bind the virtual gamepad button to.
---@param inputindex number# The index of the axis, button, or hat to bind the virtual gamepad button to.
---@param hatdir loveModule.love.joystick.JoystickHat|nil# (nil) The direction of the hat, if the virtual gamepad button will be bound to a hat. nil otherwise.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_joystick.setGamepadMapping(guid, button, inputtype, inputindex, hatdir) end

---Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X.LÖVE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.The virtual gamepad buttons and axes are designed around the Xbox 360 controller layout.
---@param guid string# The OS-dependent GUID for the type of Joystick the binding will affect.
---@param axis loveModule.love.joystick.GamepadAxis# The virtual gamepad axis to bind.
---@param inputtype loveModule.love.joystick.JoystickInputType# The type of input to bind the virtual gamepad axis to.
---@param inputindex number# The index of the axis, button, or hat to bind the virtual gamepad axis to.
---@param hatdir loveModule.love.joystick.JoystickHat|nil# (nil) The direction of the hat, if the virtual gamepad axis will be bound to a hat. nil otherwise.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_joystick.setGamepadMapping(guid, axis, inputtype, inputindex, hatdir) end

---Gets the direction of each axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getAxes() end

---Gets the direction of an axis.
---@param axis number# The index of the axis to be checked.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getAxis(axis) end

---Gets the number of axes on the joystick.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getAxisCount() end

---Gets the number of buttons on the joystick.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getButtonCount() end

---Gets the USB vendor ID, product ID, and product version numbers of joystick which consistent across operating systems.Can be used to show different icons, etc. for different gamepads.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getDeviceInfo() end

---Gets a stable GUID unique to the type of the physical joystick which does not change over time. For example, all Sony Dualshock 3 controllers in OS X have the same GUID. The value is platform-dependent.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getGUID() end

---Gets the direction of a virtual gamepad axis. If the Joystick isn't recognized as a gamepad or isn't connected, this function will always return 0.
---@param axis loveModule.love.joystick.GamepadAxis# The virtual axis to be checked.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getGamepadAxis(axis) end

---Gets the button, axis or hat that a virtual gamepad input is bound to.
---@param axis loveModule.love.joystick.GamepadAxis# The virtual gamepad axis to get the binding for.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getGamepadMapping(axis) end

---Gets the button, axis or hat that a virtual gamepad input is bound to.
---@param button loveModule.love.joystick.GamepadButton# The virtual gamepad button to get the binding for.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getGamepadMapping(button) end

---Gets the full gamepad mapping string of this Joystick, or nil if it's not recognized as a gamepad.The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getGamepadMappingString() end

---Gets the direction of the Joystick's hat.
---@param hat number# The index of the hat to be checked.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getHat(hat) end

---Gets the number of hats on the joystick.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getHatCount() end

---Gets the joystick's unique identifier. The identifier will remain the same for the life of the game, even when the Joystick is disconnected and reconnected, but it '''will''' change when the game is re-launched.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getID() end

---Gets the name of the joystick.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getName() end

---Gets the current vibration motor strengths on a Joystick with rumble support.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:getVibration() end

---Gets whether the Joystick is connected.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:isConnected() end

---Checks if a button on the Joystick is pressed.LÖVE 0.9.0 had a bug which required the button indices passed to Joystick:isDown to be 0-based instead of 1-based, for example button 1 would be 0 for this function. It was fixed in 0.9.1.
---@param buttonN number# The index of a button to check.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:isDown(buttonN) end

---Gets whether the Joystick is recognized as a gamepad. If this is the case, the Joystick's buttons and axes can be used in a standardized manner across different operating systems and joystick models via Joystick:getGamepadAxis, Joystick:isGamepadDown, love.gamepadpressed, and related functions.LÖVE automatically recognizes most popular controllers with a similar layout to the Xbox 360 controller as gamepads, but you can add more with love.joystick.setGamepadMapping.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:isGamepad() end

---Checks if a virtual gamepad button on the Joystick is pressed. If the Joystick is not recognized as a Gamepad or isn't connected, then this function will always return false.
---@param buttonN loveModule.love.joystick.GamepadButton# The gamepad button to check.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:isGamepadDown(buttonN) end

---Gets whether the Joystick supports vibration.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:isVibrationSupported() end

---Sets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use Joystick:isVibrationSupported to check.
---@param left number# Strength of the left vibration motor on the Joystick. Must be in the range of 1.
---@param right number# Strength of the right vibration motor on the Joystick. Must be in the range of 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:setVibration(left, right) end

---Sets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use Joystick:isVibrationSupported to check.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:setVibration() end

---Sets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use Joystick:isVibrationSupported to check.
---@param left number# Strength of the left vibration motor on the Joystick. Must be in the range of 1.
---@param right number# Strength of the right vibration motor on the Joystick. Must be in the range of 1.
---@param duration number|nil# (-1) The duration of the vibration in seconds. A negative value means infinite duration.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_joystick_Joystick:setVibration(left, right, duration) end

---Gets the key corresponding to the given hardware scancode.Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.Scancodes are useful for creating default controls that have the same physical locations on on all systems.
---@param scancode loveModule.love.keyboard.Scancode# The scancode to get the key from.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.getKeyFromScancode(scancode) end

---Gets the hardware scancode corresponding to the given key.Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.Scancodes are useful for creating default controls that have the same physical locations on on all systems.
---@param key loveModule.love.keyboard.KeyConstant# The key to get the scancode from.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.getScancodeFromKey(key) end

---Gets whether key repeat is enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.hasKeyRepeat() end

---Gets whether screen keyboard is supported.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.hasScreenKeyboard() end

---Gets whether text input events are enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.hasTextInput() end

---Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased.
---@param key loveModule.love.keyboard.KeyConstant# The key to check.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.isDown(key) end

---Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased.
---@param key loveModule.love.keyboard.KeyConstant# A key to check.
---@param ... loveModule.love.keyboard.KeyConstant# Additional keys to check.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.isDown(key, ...) end

---Checks whether the specified Scancodes are pressed. Not to be confused with love.keypressed or love.keyreleased.Unlike regular KeyConstants, Scancodes are keyboard layout-independent. The scancode 'w' is used if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.
---@param scancode loveModule.love.keyboard.Scancode# A Scancode to check.
---@param ... loveModule.love.keyboard.Scancode# Additional Scancodes to check.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.isScancodeDown(scancode, ...) end

---Enables or disables key repeat for love.keypressed. It is disabled by default.
---@param enable boolean# Whether repeat keypress events should be enabled when a key is held down.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.setKeyRepeat(enable) end

---Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android.On touch devices, this shows the system's native on-screen keyboard when it's enabled.
---@param enable boolean# Whether text input events should be enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.setTextInput(enable) end

---Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android.On touch devices, this shows the system's native on-screen keyboard when it's enabled.
---@param enable boolean# Whether text input events should be enabled.
---@param x number# Text rectangle x position.
---@param y number# Text rectangle y position.
---@param w number# Text rectangle width.
---@param h number# Text rectangle height.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_keyboard.setTextInput(enable, x, y, w, h) end

---Converts a color from 0..255 to 0..1 range.
---@param rb number# Red color component in 0..255 range.
---@param gb number# Green color component in 0..255 range.
---@param bb number# Blue color component in 0..255 range.
---@param ab number|nil# (nil) Alpha color component in 0..255 range.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.colorFromBytes(rb, gb, bb, ab) end

---Converts a color from 0..1 to 0..255 range.
---@param r number# Red color component.
---@param g number# Green color component.
---@param b number# Blue color component.
---@param a number|nil# (nil) Alpha color component.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.colorToBytes(r, g, b, a) end

---Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.Read more about gamma-correct rendering here, here, and here.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param r number# The red channel of the sRGB color to convert.
---@param g number# The green channel of the sRGB color to convert.
---@param b number# The blue channel of the sRGB color to convert.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.gammaToLinear(r, g, b) end

---Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.Read more about gamma-correct rendering here, here, and here.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param color table# An array with the red, green, and blue channels of the sRGB color to convert.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.gammaToLinear(color) end

---Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.Read more about gamma-correct rendering here, here, and here.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param c number# The value of a color channel in sRGB space to convert.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.gammaToLinear(c) end

---Gets the seed of the random number generator.The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer  values above 2^53, but the seed can be an integer value up to 2^64.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.getRandomSeed() end

---Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with love.math.setRandomState or RandomGenerator:setState.This is different from love.math.getRandomSeed in that getRandomState gets the random number generator's current state, whereas getRandomSeed gets the previously set seed number.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.getRandomState() end

---Checks whether a polygon is convex.PolygonShapes in love.physics, some forms of Meshes, and polygons drawn with love.graphics.polygon must be simple convex polygons.
---@param vertices table[]# The vertices of the polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.isConvex(vertices) end

---Checks whether a polygon is convex.PolygonShapes in love.physics, some forms of Meshes, and polygons drawn with love.graphics.polygon must be simple convex polygons.
---@param x1 number# The position of the first vertex of the polygon on the x-axis.
---@param y1 number# The position of the first vertex of the polygon on the y-axis.
---@param x2 number# The position of the second vertex of the polygon on the x-axis.
---@param y2 number# The position of the second vertex of the polygon on the y-axis.
---@param ... number# Additional position of the vertex of the polygon on the x-axis and y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.isConvex(x1, y1, x2, y2, ...) end

---Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.Read more about gamma-correct rendering here, here, and here.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param lr number# The red channel of the linear RGB color to convert.
---@param lg number# The green channel of the linear RGB color to convert.
---@param lb number# The blue channel of the linear RGB color to convert.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.linearToGamma(lr, lg, lb) end

---Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.Read more about gamma-correct rendering here, here, and here.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param color table[]# An array with the red, green, and blue channels of the linear RGB color to convert.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.linearToGamma(color) end

---Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.Read more about gamma-correct rendering here, here, and here.In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---@param lc number# The value of a color channel in linear RGB space to convert.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.linearToGamma(lc) end

---Creates a new BezierCurve object.The number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four vertices define a cubic (degree 3) Bézier curve, etc.
---@param vertices table[]# The vertices of the control polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.newBezierCurve(vertices) end

---Creates a new BezierCurve object.The number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four vertices define a cubic (degree 3) Bézier curve, etc.
---@param x1 number# The position of the first vertex of the control polygon on the x-axis.
---@param y1 number# The position of the first vertex of the control polygon on the y-axis.
---@param x2 number# The position of the second vertex of the control polygon on the x-axis.
---@param y2 number# The position of the second vertex of the control polygon on the y-axis.
---@param ... number# Additional position of the vertex of the control polygon on the x-axis and y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.newBezierCurve(x1, y1, x2, y2, ...) end

---Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.newRandomGenerator() end

---Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.
---@param seed number# The initial seed number to use for this object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.newRandomGenerator(seed) end

---Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.
---@param low number# The lower 32 bits of the seed number to use for this object.
---@param high number# The higher 32 bits of the seed number to use for this object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.newRandomGenerator(low, high) end

---Creates a new Transform object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.newTransform() end

---Creates a new Transform object.
---@param x number# The position of the new Transform on the x-axis.
---@param y number# The position of the new Transform on the y-axis.
---@param angle number|nil# (0) The orientation of the new Transform in radians.
---@param sx number|nil# (1) Scale factor on the x-axis.
---@param sy number|nil# (sx) Scale factor on the y-axis.
---@param ox number|nil# (0) Origin offset on the x-axis.
---@param oy number|nil# (0) Origin offset on the y-axis.
---@param kx number|nil# (0) Shearing / skew factor on the x-axis.
---@param ky number|nil# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.newTransform(x, y, angle, sx, sy, ox, oy, kx, ky) end

---Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.There are many webpages which discuss Perlin and Simplex noise in detail.
---@param x number# The number used to generate the noise value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.noise(x) end

---Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.There are many webpages which discuss Perlin and Simplex noise in detail.
---@param x number# The first value of the 2-dimensional vector used to generate the noise value.
---@param y number# The second value of the 2-dimensional vector used to generate the noise value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.noise(x, y) end

---Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.There are many webpages which discuss Perlin and Simplex noise in detail.
---@param x number# The first value of the 3-dimensional vector used to generate the noise value.
---@param y number# The second value of the 3-dimensional vector used to generate the noise value.
---@param z number# The third value of the 3-dimensional vector used to generate the noise value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.noise(x, y, z) end

---Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.There are many webpages which discuss Perlin and Simplex noise in detail.
---@param x number# The first value of the 4-dimensional vector used to generate the noise value.
---@param y number# The second value of the 4-dimensional vector used to generate the noise value.
---@param z number# The third value of the 4-dimensional vector used to generate the noise value.
---@param w number# The fourth value of the 4-dimensional vector used to generate the noise value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.noise(x, y, z, w) end

---Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.random() end

---Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself.
---@param max number# The maximum possible value it should return.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.random(max) end

---Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself.
---@param min number# The minimum possible value it should return.
---@param max number# The maximum possible value it should return.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.random(min, max) end

---Get a normally distributed pseudo random number.
---@param stddev number|nil# (1) Standard deviation of the distribution.
---@param mean number|nil# (0) The mean of the distribution.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.randomNormal(stddev, mean) end

---Sets the seed of the random number generator using the specified integer number. This is called internally at startup, so you generally don't need to call it yourself.
---@param seed number# The integer number with which you want to seed the randomization. Must be within the range of 2^53 - 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.setRandomSeed(seed) end

---Sets the seed of the random number generator using the specified integer number. This is called internally at startup, so you generally don't need to call it yourself.
---@param low number# The lower 32 bits of the seed value. Must be within the range of 2^32 - 1.
---@param high number# The higher 32 bits of the seed value. Must be within the range of 2^32 - 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.setRandomSeed(low, high) end

---Sets the current state of the random number generator. The value used as an argument for this function is an opaque implementation-dependent string and should only originate from a previous call to love.math.getRandomState.This is different from love.math.setRandomSeed in that setRandomState directly sets the random number generator's current implementation-dependent state, whereas setRandomSeed gives it a new seed value.
---@param state string# The new state of the random number generator, represented as a string. This should originate from a previous call to love.math.getRandomState.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.setRandomState(state) end

---Decomposes a simple convex or concave polygon into triangles.
---@param polygon table# Polygon to triangulate. Must not intersect itself.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.triangulate(polygon) end

---Decomposes a simple convex or concave polygon into triangles.
---@param x1 number# The position of the first vertex of the polygon on the x-axis.
---@param y1 number# The position of the first vertex of the polygon on the y-axis.
---@param x2 number# The position of the second vertex of the polygon on the x-axis.
---@param y2 number# The position of the second vertex of the polygon on the y-axis.
---@param x3 number# The position of the third vertex of the polygon on the x-axis.
---@param y3 number# The position of the third vertex of the polygon on the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_math.triangulate(x1, y1, x2, y2, x3, y3) end

---Evaluate Bézier curve at parameter t. The parameter must be between 0 and 1 (inclusive).This function can be used to move objects along paths or tween parameters. However it should not be used to render the curve, see BezierCurve:render for that purpose.
---@param t number# Where to evaluate the curve.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:evaluate(t) end

---Get coordinates of the i-th control point. Indices start with 1.
---@param i number# Index of the control point.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:getControlPoint(i) end

---Get the number of control points in the Bézier curve.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:getControlPointCount() end

---Get degree of the Bézier curve. The degree is equal to number-of-control-points - 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:getDegree() end

---Get the derivative of the Bézier curve.This function can be used to rotate sprites moving along a curve in the direction of the movement and compute the direction perpendicular to the curve at some parameter t.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:getDerivative() end

---Gets a BezierCurve that corresponds to the specified segment of this BezierCurve.
---@param startpoint number# The starting point along the curve. Must be between 0 and 1.
---@param endpoint number# The end of the segment. Must be between 0 and 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:getSegment(startpoint, endpoint) end

---Insert control point as the new i-th control point. Existing control points from i onwards are pushed back by 1. Indices start with 1. Negative indices wrap around: -1 is the last control point, -2 the one before the last, etc.
---@param x number# Position of the control point along the x axis.
---@param y number# Position of the control point along the y axis.
---@param i number|nil# (-1) Index of the control point.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:insertControlPoint(x, y, i) end

---Removes the specified control point.
---@param index number# The index of the control point to remove.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:removeControlPoint(index) end

---Get a list of coordinates to be used with love.graphics.line.This function samples the Bézier curve using recursive subdivision. You can control the recursion depth using the depth parameter.If you are just interested to know the position on the curve given a parameter, use BezierCurve:evaluate.
---@param depth number|nil# (5) Number of recursive subdivision steps.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:render(depth) end

---Get a list of coordinates on a specific part of the curve, to be used with love.graphics.line.This function samples the Bézier curve using recursive subdivision. You can control the recursion depth using the depth parameter.If you are just need to know the position on the curve given a parameter, use BezierCurve:evaluate.
---@param startpoint number# The starting point along the curve. Must be between 0 and 1.
---@param endpoint number# The end of the segment to render. Must be between 0 and 1.
---@param depth number|nil# (5) Number of recursive subdivision steps.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:renderSegment(startpoint, endpoint, depth) end

---Rotate the Bézier curve by an angle.
---@param angle number# Rotation angle in radians.
---@param ox number|nil# (0) X coordinate of the rotation center.
---@param oy number|nil# (0) Y coordinate of the rotation center.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:rotate(angle, ox, oy) end

---Scale the Bézier curve by a factor.
---@param s number# Scale factor.
---@param ox number|nil# (0) X coordinate of the scaling center.
---@param oy number|nil# (0) Y coordinate of the scaling center.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:scale(s, ox, oy) end

---Set coordinates of the i-th control point. Indices start with 1.
---@param i number# Index of the control point.
---@param x number# Position of the control point along the x axis.
---@param y number# Position of the control point along the y axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:setControlPoint(i, x, y) end

---Move the Bézier curve by an offset.
---@param dx number# Offset along the x axis.
---@param dy number# Offset along the y axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_BezierCurve:translate(dx, dy) end

---Gets the seed of the random number generator object.The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer  values above 2^53, but the seed value is an integer number in the range of 2^64 - 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_RandomGenerator:getSeed() end

---Gets the current state of the random number generator. This returns an opaque string which is only useful for later use with RandomGenerator:setState in the same major version of LÖVE.This is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_RandomGenerator:getState() end

---Generates a pseudo-random number in a platform independent manner.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_RandomGenerator:random() end

---Generates a pseudo-random number in a platform independent manner.
---@param max number# The maximum possible value it should return.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_RandomGenerator:random(max) end

---Generates a pseudo-random number in a platform independent manner.
---@param min number# The minimum possible value it should return.
---@param max number# The maximum possible value it should return.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_RandomGenerator:random(min, max) end

---Get a normally distributed pseudo random number.
---@param stddev number|nil# (1) Standard deviation of the distribution.
---@param mean number|nil# (0) The mean of the distribution.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_RandomGenerator:randomNormal(stddev, mean) end

---Sets the seed of the random number generator using the specified integer number.
---@param seed number# The integer number with which you want to seed the randomization. Must be within the range of 2^53.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_RandomGenerator:setSeed(seed) end

---Sets the seed of the random number generator using the specified integer number.
---@param low number# The lower 32 bits of the seed value. Must be within the range of 2^32 - 1.
---@param high number# The higher 32 bits of the seed value. Must be within the range of 2^32 - 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_RandomGenerator:setSeed(low, high) end

---Sets the current state of the random number generator. The value used as an argument for this function is an opaque string and should only originate from a previous call to RandomGenerator:getState in the same major version of LÖVE.This is different from RandomGenerator:setSeed in that setState directly sets the RandomGenerator's current implementation-dependent state, whereas setSeed gives it a new seed value.
---@param state string# The new state of the RandomGenerator object, represented as a string. This should originate from a previous call to RandomGenerator:getState.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_RandomGenerator:setState(state) end

---Applies the given other Transform object to this one.This effectively multiplies this Transform's internal transformation matrix with the other Transform's (i.e. self * other), and stores the result in this object.
---@param other love.math.Transform# The other Transform object to apply to this Transform.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:apply(other) end

---Creates a new copy of this Transform.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:clone() end

---Gets the internal 4x4 transformation matrix stored by this Transform. The matrix is returned in row-major order.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:getMatrix() end

---Creates a new Transform containing the inverse of this Transform.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:inverse() end

---Applies the reverse of the Transform object's transformation to the given 2D position.This effectively converts the given position from the local coordinate space of the Transform into global coordinates.One use of this method can be to convert a screen-space mouse position into global world coordinates, if the given Transform has transformations applied that are used for a camera system in-game.
---@param localX number# The x component of the position with the transform applied.
---@param localY number# The y component of the position with the transform applied.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:inverseTransformPoint(localX, localY) end

---Checks whether the Transform is an affine transformation.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:isAffine2DTransform() end

---Resets the Transform to an identity state. All previously applied transformations are erased.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:reset() end

---Applies a rotation to the Transform's coordinate system. This method does not reset any previously applied transformations.
---@param angle number# The relative angle in radians to rotate this Transform by.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:rotate(angle) end

---Scales the Transform's coordinate system. This method does not reset any previously applied transformations.
---@param sx number# The relative scale factor along the x-axis.
---@param sy number|nil# (sx) The relative scale factor along the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:scale(sx, sy) end

---Directly sets the Transform's internal 4x4 transformation matrix.
---@param e1_1 number# The first column of the first row of the matrix.
---@param e1_2 number# The second column of the first row of the matrix.
---@param e1_3 number# The third column of the first row of the matrix.
---@param e1_4 number# The fourth column of the first row of the matrix.
---@param e2_1 number# The first column of the second row of the matrix.
---@param e2_2 number# The second column of the second row of the matrix.
---@param e2_3 number# The third column of the second row of the matrix.
---@param e2_4 number# The fourth column of the second row of the matrix.
---@param e3_1 number# The first column of the third row of the matrix.
---@param e3_2 number# The second column of the third row of the matrix.
---@param e3_3 number# The third column of the third row of the matrix.
---@param e3_4 number# The fourth column of the third row of the matrix.
---@param e4_1 number# The first column of the fourth row of the matrix.
---@param e4_2 number# The second column of the fourth row of the matrix.
---@param e4_3 number# The third column of the fourth row of the matrix.
---@param e4_4 number# The fourth column of the fourth row of the matrix.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:setMatrix(e1_1, e1_2, e1_3, e1_4, e2_1, e2_2, e2_3, e2_4, e3_1, e3_2, e3_3, e3_4, e4_1, e4_2, e4_3, e4_4) end

---Directly sets the Transform's internal 4x4 transformation matrix.
---@param layout loveModule.love.math.MatrixLayout# How to interpret the matrix element arguments (row-major or column-major).
---@param e1_1 number# The first column of the first row of the matrix.
---@param e1_2 number# The second column of the first row or the first column of the second row of the matrix, depending on the specified layout.
---@param e1_3 number# The third column/row of the first row/column of the matrix.
---@param e1_4 number# The fourth column/row of the first row/column of the matrix.
---@param e2_1 number# The first column/row of the second row/column of the matrix.
---@param e2_2 number# The second column/row of the second row/column of the matrix.
---@param e2_3 number# The third column/row of the second row/column of the matrix.
---@param e2_4 number# The fourth column/row of the second row/column of the matrix.
---@param e3_1 number# The first column/row of the third row/column of the matrix.
---@param e3_2 number# The second column/row of the third row/column of the matrix.
---@param e3_3 number# The third column/row of the third row/column of the matrix.
---@param e3_4 number# The fourth column/row of the third row/column of the matrix.
---@param e4_1 number# The first column/row of the fourth row/column of the matrix.
---@param e4_2 number# The second column/row of the fourth row/column of the matrix.
---@param e4_3 number# The third column/row of the fourth row/column of the matrix.
---@param e4_4 number# The fourth column of the fourth row of the matrix.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:setMatrix(layout, e1_1, e1_2, e1_3, e1_4, e2_1, e2_2, e2_3, e2_4, e3_1, e3_2, e3_3, e3_4, e4_1, e4_2, e4_3, e4_4) end

---Directly sets the Transform's internal 4x4 transformation matrix.
---@param layout loveModule.love.math.MatrixLayout# How to interpret the matrix element arguments (row-major or column-major).
---@param matrix table[]# A flat table containing the 16 matrix elements.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:setMatrix(layout, matrix) end

---Directly sets the Transform's internal 4x4 transformation matrix.
---@param layout loveModule.love.math.MatrixLayout# How to interpret the matrix element arguments (row-major or column-major).
---@param matrix table# A table of 4 tables, with each sub-table containing 4 matrix elements.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:setMatrix(layout, matrix) end

---Resets the Transform to the specified transformation parameters.
---@param x number# The position of the Transform on the x-axis.
---@param y number# The position of the Transform on the y-axis.
---@param angle number|nil# (0) The orientation of the Transform in radians.
---@param sx number|nil# (1) Scale factor on the x-axis.
---@param sy number|nil# (sx) Scale factor on the y-axis.
---@param ox number|nil# (0) Origin offset on the x-axis.
---@param oy number|nil# (0) Origin offset on the y-axis.
---@param kx number|nil# (0) Shearing / skew factor on the x-axis.
---@param ky number|nil# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:setTransformation(x, y, angle, sx, sy, ox, oy, kx, ky) end

---Applies a shear factor (skew) to the Transform's coordinate system. This method does not reset any previously applied transformations.
---@param kx number# The shear factor along the x-axis.
---@param ky number# The shear factor along the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:shear(kx, ky) end

---Applies the Transform object's transformation to the given 2D position.This effectively converts the given position from global coordinates into the local coordinate space of the Transform.
---@param globalX number# The x component of the position in global coordinates.
---@param globalY number# The y component of the position in global coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:transformPoint(globalX, globalY) end

---Applies a translation to the Transform's coordinate system. This method does not reset any previously applied transformations.
---@param dx number# The relative translation along the x-axis.
---@param dy number# The relative translation along the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_math_Transform:translate(dx, dy) end

---Gets the current Cursor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.getCursor() end

---Returns the current position of the mouse.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.getPosition() end

---Gets whether relative mode is enabled for the mouse.If relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.The reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.getRelativeMode() end

---Gets a Cursor object representing a system-native hardware cursor.Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.
---@param ctype loveModule.love.mouse.CursorType# The type of system cursor to get. 
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.getSystemCursor(ctype) end

---Returns the current x-position of the mouse.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.getX() end

---Returns the current y-position of the mouse.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.getY() end

---Gets whether cursor functionality is supported.If it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.isCursorSupported() end

---Checks whether a certain mouse button is down.This function does not detect mouse wheel scrolling; you must use the love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for that. 
---@param button number# The index of a button to check. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependant.
---@param ... number# Additional button numbers to check.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.isDown(button, ...) end

---Checks if the mouse is grabbed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.isGrabbed() end

---Checks if the cursor is visible.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.isVisible() end

---Creates a new hardware Cursor object from an image file or ImageData.Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.
---@param imageData love.image.ImageData# The ImageData to use for the new Cursor.
---@param hotx number|nil# (0) The x-coordinate in the ImageData of the cursor's hot spot.
---@param hoty number|nil# (0) The y-coordinate in the ImageData of the cursor's hot spot.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.newCursor(imageData, hotx, hoty) end

---Creates a new hardware Cursor object from an image file or ImageData.Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.
---@param filename string# Path to the image to use for the new Cursor.
---@param hotx number|nil# (0) The x-coordinate in the image of the cursor's hot spot.
---@param hoty number|nil# (0) The y-coordinate in the image of the cursor's hot spot.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.newCursor(filename, hotx, hoty) end

---Creates a new hardware Cursor object from an image file or ImageData.Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.
---@param fileData love.filesystem.FileData# Data representing the image to use for the new Cursor.
---@param hotx number|nil# (0) The x-coordinate in the image of the cursor's hot spot.
---@param hoty number|nil# (0) The y-coordinate in the image of the cursor's hot spot.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.newCursor(fileData, hotx, hoty) end

---Sets the current mouse cursor.
---@param cursor love.mouse.Cursor# The Cursor object to use as the current mouse cursor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.setCursor(cursor) end

---Sets the current mouse cursor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.setCursor() end

---Grabs the mouse and confines it to the window.
---@param grab boolean# True to confine the mouse, false to let it leave the window.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.setGrabbed(grab) end

---Sets the current position of the mouse. Non-integer values are floored.
---@param x number# The new position of the mouse along the x-axis.
---@param y number# The new position of the mouse along the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.setPosition(x, y) end

---Sets whether relative mode is enabled for the mouse.When relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.The reported position of the mouse may not be updated while relative mode is enabled, even when relative mouse motion events are generated.
---@param enable boolean# True to enable relative mode, false to disable it.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.setRelativeMode(enable) end

---Sets the current visibility of the cursor.
---@param visible boolean# True to set the cursor to visible, false to hide the cursor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.setVisible(visible) end

---Sets the current X position of the mouse.Non-integer values are floored.
---@param x number# The new position of the mouse along the x-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.setX(x) end

---Sets the current Y position of the mouse.Non-integer values are floored.
---@param y number# The new position of the mouse along the y-axis.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_mouse.setY(y) end

---Gets the type of the Cursor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_mouse_Cursor:getType() end

---Returns the two closest points between two fixtures and their distance.
---@param fixture1 love.physics.Fixture# The first fixture.
---@param fixture2 love.physics.Fixture# The second fixture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.getDistance(fixture1, fixture2) end

---Returns the meter scale factor.All coordinates in the physics module are divided by this number, creating a convenient way to draw the objects directly to the screen without the need for graphics transformations.It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.getMeter() end

---Creates a new body.There are three types of bodies. * Static bodies do not move, have a infinite mass, and can be used for level boundaries. * Dynamic bodies are the main actors in the simulation, they collide with everything. * Kinematic bodies do not react to forces and only collide with dynamic bodies.The mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData.
---@param world love.physics.World# The world to create the body in.
---@param x number|nil# (0) The x position of the body.
---@param y number|nil# (0) The y position of the body.
---@param type loveModule.love.physics.BodyType|nil# ('static') The type of the body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newBody(world, x, y, type) end

---Creates a new ChainShape.
---@param loop boolean# If the chain should loop back to the first point.
---@param x1 number# The x position of the first point.
---@param y1 number# The y position of the first point.
---@param x2 number# The x position of the second point.
---@param y2 number# The y position of the second point.
---@param ... number# Additional point positions.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newChainShape(loop, x1, y1, x2, y2, ...) end

---Creates a new ChainShape.
---@param loop boolean# If the chain should loop back to the first point.
---@param points table[]# A list of points to construct the ChainShape, in the form of {x1, y1, x2, y2, ...}.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newChainShape(loop, points) end

---Creates a new CircleShape.
---@param radius number# The radius of the circle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newCircleShape(radius) end

---Creates a new CircleShape.
---@param x number# The x position of the circle.
---@param y number# The y position of the circle.
---@param radius number# The radius of the circle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newCircleShape(x, y, radius) end

---Creates a DistanceJoint between two bodies.This joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint.
---@param body1 love.physics.Body# The first body to attach to the joint.
---@param body2 love.physics.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point (world space).
---@param y1 number# The y position of the first anchor point (world space).
---@param x2 number# The x position of the second anchor point (world space).
---@param y2 number# The y position of the second anchor point (world space).
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newDistanceJoint(body1, body2, x1, y1, x2, y2, collideConnected) end

---Creates a new EdgeShape.
---@param x1 number# The x position of the first point.
---@param y1 number# The y position of the first point.
---@param x2 number# The x position of the second point.
---@param y2 number# The y position of the second point.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newEdgeShape(x1, y1, x2, y2) end

---Creates and attaches a Fixture to a body.Note that the Shape object is copied rather than kept as a reference when the Fixture is created. To get the Shape object that the Fixture owns, use Fixture:getShape.
---@param body love.physics.Body# The body which gets the fixture attached.
---@param shape love.physics.Shape# The shape to be copied to the fixture.
---@param density number|nil# (1) The density of the fixture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newFixture(body, shape, density) end

---Create a friction joint between two bodies. A FrictionJoint applies friction to a body.
---@param body1 love.physics.Body# The first body to attach to the joint.
---@param body2 love.physics.Body# The second body to attach to the joint.
---@param x number# The x position of the anchor point.
---@param y number# The y position of the anchor point.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newFrictionJoint(body1, body2, x, y, collideConnected) end

---Create a friction joint between two bodies. A FrictionJoint applies friction to a body.
---@param body1 love.physics.Body# The first body to attach to the joint.
---@param body2 love.physics.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point.
---@param y1 number# The y position of the first anchor point.
---@param x2 number# The x position of the second anchor point.
---@param y2 number# The y position of the second anchor point.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newFrictionJoint(body1, body2, x1, y1, x2, y2, collideConnected) end

---Create a GearJoint connecting two Joints.The gear joint connects two joints that must be either  prismatic or  revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints.The gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created.
---@param joint1 love.physics.Joint# The first joint to connect with a gear joint.
---@param joint2 love.physics.Joint# The second joint to connect with a gear joint.
---@param ratio number|nil# (1) The gear ratio.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newGearJoint(joint1, joint2, ratio, collideConnected) end

---Creates a joint between two bodies which controls the relative motion between them.Position and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.
---@param body1 love.physics.Body# The first body to attach to the joint.
---@param body2 love.physics.Body# The second body to attach to the joint.
---@param correctionFactor number|nil# (0.3) The joint's initial position correction factor, in the range of 1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newMotorJoint(body1, body2, correctionFactor) end

---Creates a joint between two bodies which controls the relative motion between them.Position and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.
---@param body1 love.physics.Body# The first body to attach to the joint.
---@param body2 love.physics.Body# The second body to attach to the joint.
---@param correctionFactor number|nil# (0.3) The joint's initial position correction factor, in the range of 1.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newMotorJoint(body1, body2, correctionFactor, collideConnected) end

---Create a joint between a body and the mouse.This joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below).The advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine. 
---@param body love.physics.Body# The body to attach to the mouse.
---@param x number# The x position of the connecting point.
---@param y number# The y position of the connecting point.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newMouseJoint(body, x, y) end

---Creates a new PolygonShape.This shape can have 8 vertices at most, and must form a convex shape.
---@param x1 number# The x position of the first point.
---@param y1 number# The y position of the first point.
---@param x2 number# The x position of the second point.
---@param y2 number# The y position of the second point.
---@param x3 number# The x position of the third point.
---@param y3 number# The y position of the third point.
---@param ... number# You can continue passing more point positions to create the PolygonShape.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newPolygonShape(x1, y1, x2, y2, x3, y3, ...) end

---Creates a new PolygonShape.This shape can have 8 vertices at most, and must form a convex shape.
---@param vertices table[]# A list of vertices to construct the polygon, in the form of {x1, y1, x2, y2, x3, y3, ...}.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newPolygonShape(vertices) end

---Creates a PrismaticJoint between two bodies.A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a  revolute joint, but with translation and force substituted for angle and torque.
---@param body1 love.physics.Body# The first body to connect with a prismatic joint.
---@param body2 love.physics.Body# The second body to connect with a prismatic joint.
---@param x number# The x coordinate of the anchor point.
---@param y number# The y coordinate of the anchor point.
---@param ax number# The x coordinate of the axis vector.
---@param ay number# The y coordinate of the axis vector.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newPrismaticJoint(body1, body2, x, y, ax, ay, collideConnected) end

---Creates a PrismaticJoint between two bodies.A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a  revolute joint, but with translation and force substituted for angle and torque.
---@param body1 love.physics.Body# The first body to connect with a prismatic joint.
---@param body2 love.physics.Body# The second body to connect with a prismatic joint.
---@param x1 number# The x coordinate of the first anchor point.
---@param y1 number# The y coordinate of the first anchor point.
---@param x2 number# The x coordinate of the second anchor point.
---@param y2 number# The y coordinate of the second anchor point.
---@param ax number# The x coordinate of the axis unit vector.
---@param ay number# The y coordinate of the axis unit vector.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newPrismaticJoint(body1, body2, x1, y1, x2, y2, ax, ay, collideConnected) end

---Creates a PrismaticJoint between two bodies.A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a  revolute joint, but with translation and force substituted for angle and torque.
---@param body1 love.physics.Body# The first body to connect with a prismatic joint.
---@param body2 love.physics.Body# The second body to connect with a prismatic joint.
---@param x1 number# The x coordinate of the first anchor point.
---@param y1 number# The y coordinate of the first anchor point.
---@param x2 number# The x coordinate of the second anchor point.
---@param y2 number# The y coordinate of the second anchor point.
---@param ax number# The x coordinate of the axis unit vector.
---@param ay number# The y coordinate of the axis unit vector.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@param referenceAngle number|nil# (0) The reference angle between body1 and body2, in radians.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newPrismaticJoint(body1, body2, x1, y1, x2, y2, ax, ay, collideConnected, referenceAngle) end

---Creates a PulleyJoint to join two bodies to each other and the ground.The pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created.Pulley joints can behave unpredictably if one side is fully extended. It is recommended that the method  setMaxLengths  be used to constrain the maximum lengths each side can attain.
---@param body1 love.physics.Body# The first body to connect with a pulley joint.
---@param body2 love.physics.Body# The second body to connect with a pulley joint.
---@param gx1 number# The x coordinate of the first body's ground anchor.
---@param gy1 number# The y coordinate of the first body's ground anchor.
---@param gx2 number# The x coordinate of the second body's ground anchor.
---@param gy2 number# The y coordinate of the second body's ground anchor.
---@param x1 number# The x coordinate of the pulley joint anchor in the first body.
---@param y1 number# The y coordinate of the pulley joint anchor in the first body.
---@param x2 number# The x coordinate of the pulley joint anchor in the second body.
---@param y2 number# The y coordinate of the pulley joint anchor in the second body.
---@param ratio number|nil# (1) The joint ratio.
---@param collideConnected boolean|nil# (true) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newPulleyJoint(body1, body2, gx1, gy1, gx2, gy2, x1, y1, x2, y2, ratio, collideConnected) end

---Shorthand for creating rectangular PolygonShapes. By default, the local origin is located at the '''center''' of the rectangle as opposed to the top left for graphics.
---@param width number# The width of the rectangle.
---@param height number# The height of the rectangle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newRectangleShape(width, height) end

---Shorthand for creating rectangular PolygonShapes. By default, the local origin is located at the '''center''' of the rectangle as opposed to the top left for graphics.
---@param x number# The offset along the x-axis.
---@param y number# The offset along the y-axis.
---@param width number# The width of the rectangle.
---@param height number# The height of the rectangle.
---@param angle number|nil# (0) The initial angle of the rectangle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newRectangleShape(x, y, width, height, angle) end

---Creates a pivot joint between two bodies.This joint connects two bodies to a point around which they can pivot.
---@param body1 love.physics.Body# The first body.
---@param body2 love.physics.Body# The second body.
---@param x number# The x position of the connecting point.
---@param y number# The y position of the connecting point.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newRevoluteJoint(body1, body2, x, y, collideConnected) end

---Creates a pivot joint between two bodies.This joint connects two bodies to a point around which they can pivot.
---@param body1 love.physics.Body# The first body.
---@param body2 love.physics.Body# The second body.
---@param x1 number# The x position of the first connecting point.
---@param y1 number# The y position of the first connecting point.
---@param x2 number# The x position of the second connecting point.
---@param y2 number# The y position of the second connecting point.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@param referenceAngle number|nil# (0) The reference angle between body1 and body2, in radians.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newRevoluteJoint(body1, body2, x1, y1, x2, y2, collideConnected, referenceAngle) end

---Creates a joint between two bodies. Its only function is enforcing a max distance between these bodies.
---@param body1 love.physics.Body# The first body to attach to the joint.
---@param body2 love.physics.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point.
---@param y1 number# The y position of the first anchor point.
---@param x2 number# The x position of the second anchor point.
---@param y2 number# The y position of the second anchor point.
---@param maxLength number# The maximum distance for the bodies.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newRopeJoint(body1, body2, x1, y1, x2, y2, maxLength, collideConnected) end

---Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.
---@param body1 love.physics.Body# The first body to attach to the joint.
---@param body2 love.physics.Body# The second body to attach to the joint.
---@param x number# The x position of the anchor point (world space).
---@param y number# The y position of the anchor point (world space).
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newWeldJoint(body1, body2, x, y, collideConnected) end

---Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.
---@param body1 love.physics.Body# The first body to attach to the joint.
---@param body2 love.physics.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point (world space).
---@param y1 number# The y position of the first anchor point (world space).
---@param x2 number# The x position of the second anchor point (world space).
---@param y2 number# The y position of the second anchor point (world space).
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newWeldJoint(body1, body2, x1, y1, x2, y2, collideConnected) end

---Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.
---@param body1 love.physics.Body# The first body to attach to the joint.
---@param body2 love.physics.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point (world space).
---@param y1 number# The y position of the first anchor point  (world space).
---@param x2 number# The x position of the second anchor point (world space).
---@param y2 number# The y position of the second anchor point (world space).
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@param referenceAngle number|nil# (0) The reference angle between body1 and body2, in radians.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newWeldJoint(body1, body2, x1, y1, x2, y2, collideConnected, referenceAngle) end

---Creates a wheel joint.
---@param body1 love.physics.Body# The first body.
---@param body2 love.physics.Body# The second body.
---@param x number# The x position of the anchor point.
---@param y number# The y position of the anchor point.
---@param ax number# The x position of the axis unit vector.
---@param ay number# The y position of the axis unit vector.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newWheelJoint(body1, body2, x, y, ax, ay, collideConnected) end

---Creates a wheel joint.
---@param body1 love.physics.Body# The first body.
---@param body2 love.physics.Body# The second body.
---@param x1 number# The x position of the first anchor point.
---@param y1 number# The y position of the first anchor point.
---@param x2 number# The x position of the second anchor point.
---@param y2 number# The y position of the second anchor point.
---@param ax number# The x position of the axis unit vector.
---@param ay number# The y position of the axis unit vector.
---@param collideConnected boolean|nil# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newWheelJoint(body1, body2, x1, y1, x2, y2, ax, ay, collideConnected) end

---Creates a new World.
---@param xg number|nil# (0) The x component of gravity.
---@param yg number|nil# (0) The y component of gravity.
---@param sleep boolean|nil# (true) Whether the bodies in this world are allowed to sleep.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.newWorld(xg, yg, sleep) end

---Sets the pixels to meter scale factor.All coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations.It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30.
---@param scale number# The scale factor as an integer.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_physics.setMeter(scale) end

---Applies an angular impulse to a body. This makes a single, instantaneous addition to the body momentum.A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce.
---@param impulse number# The impulse in kilogram-square meter per second.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:applyAngularImpulse(impulse) end

---Apply force to a Body.A force pushes a body in a direction. A body with with a larger mass will react less. The reaction also depends on how long a force is applied: since the force acts continuously over the entire timestep, a short timestep will only push the body for a short time. Thus forces are best used for many timesteps to give a continuous push to a body (like gravity). For a single push that is independent of timestep, it is better to use Body:applyLinearImpulse.If the position to apply the force is not given, it will act on the center of mass of the body. The part of the force not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia).Note that the force components and position must be given in world coordinates.
---@param fx number# The x component of force to apply to the center of mass.
---@param fy number# The y component of force to apply to the center of mass.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:applyForce(fx, fy) end

---Apply force to a Body.A force pushes a body in a direction. A body with with a larger mass will react less. The reaction also depends on how long a force is applied: since the force acts continuously over the entire timestep, a short timestep will only push the body for a short time. Thus forces are best used for many timesteps to give a continuous push to a body (like gravity). For a single push that is independent of timestep, it is better to use Body:applyLinearImpulse.If the position to apply the force is not given, it will act on the center of mass of the body. The part of the force not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia).Note that the force components and position must be given in world coordinates.
---@param fx number# The x component of force to apply.
---@param fy number# The y component of force to apply.
---@param x number# The x position to apply the force.
---@param y number# The y position to apply the force.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:applyForce(fx, fy, x, y) end

---Applies an impulse to a body.This makes a single, instantaneous addition to the body momentum.An impulse pushes a body in a direction. A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce.If the position to apply the impulse is not given, it will act on the center of mass of the body. The part of the impulse not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia). Note that the impulse components and position must be given in world coordinates.
---@param ix number# The x component of the impulse applied to the center of mass.
---@param iy number# The y component of the impulse applied to the center of mass.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:applyLinearImpulse(ix, iy) end

---Applies an impulse to a body.This makes a single, instantaneous addition to the body momentum.An impulse pushes a body in a direction. A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce.If the position to apply the impulse is not given, it will act on the center of mass of the body. The part of the impulse not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia). Note that the impulse components and position must be given in world coordinates.
---@param ix number# The x component of the impulse.
---@param iy number# The y component of the impulse.
---@param x number# The x position to apply the impulse.
---@param y number# The y position to apply the impulse.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:applyLinearImpulse(ix, iy, x, y) end

---Apply torque to a body.Torque is like a force that will change the angular velocity (spin) of a body. The effect will depend on the rotational inertia a body has.
---@param torque number# The torque to apply.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:applyTorque(torque) end

---Explicitly destroys the Body and all fixtures and joints attached to it.An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:destroy() end

---Get the angle of the body.The angle is measured in radians. If you need to transform it to degrees, use math.deg.A value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getAngle() end

---Gets the Angular damping of the BodyThe angular damping is the ''rate of decrease of the angular velocity over time'': A spinning body with no damping and no external forces will continue spinning indefinitely. A spinning body with damping will gradually stop spinning.Damping is not the same as friction - they can be modelled together. However, only damping is provided by Box2D (and LOVE).Damping parameters should be between 0 and infinity, with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 0.1.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getAngularDamping() end

---Get the angular velocity of the Body.The angular velocity is the ''rate of change of angle over time''.It is changed in World:update by applying torques, off centre forces/impulses, and angular damping. It can be set directly with Body:setAngularVelocity.If you need the ''rate of change of position over time'', use Body:getLinearVelocity.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getAngularVelocity() end

---Gets a list of all Contacts attached to the Body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getContacts() end

---Returns a table with all fixtures.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getFixtures() end

---Returns the gravity scale factor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getGravityScale() end

---Gets the rotational inertia of the body.The rotational inertia is how hard is it to make the body spin.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getInertia() end

---Returns a table containing the Joints attached to this Body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getJoints() end

---Gets the linear damping of the Body.The linear damping is the ''rate of decrease of the linear velocity over time''. A moving body with no damping and no external forces will continue moving indefinitely, as is the case in space. A moving body with damping will gradually stop moving.Damping is not the same as friction - they can be modelled together.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getLinearDamping() end

---Gets the linear velocity of the Body from its center of mass.The linear velocity is the ''rate of change of position over time''.If you need the ''rate of change of angle over time'', use Body:getAngularVelocity.If you need to get the linear velocity of a point different from the center of mass:*  Body:getLinearVelocityFromLocalPoint allows you to specify the point in local coordinates.*  Body:getLinearVelocityFromWorldPoint allows you to specify the point in world coordinates.See page 136 of 'Essential Mathematics for Games and Interactive Applications' for definitions of local and world coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getLinearVelocity() end

---Get the linear velocity of a point on the body.The linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning.The point on the body must given in local coordinates. Use Body:getLinearVelocityFromWorldPoint to specify this with world coordinates.
---@param x number# The x position to measure velocity.
---@param y number# The y position to measure velocity.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getLinearVelocityFromLocalPoint(x, y) end

---Get the linear velocity of a point on the body.The linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning.The point on the body must given in world coordinates. Use Body:getLinearVelocityFromLocalPoint to specify this with local coordinates.
---@param x number# The x position to measure velocity.
---@param y number# The y position to measure velocity.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getLinearVelocityFromWorldPoint(x, y) end

---Get the center of mass position in local coordinates.Use Body:getWorldCenter to get the center of mass in world coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getLocalCenter() end

---Transform a point from world coordinates to local coordinates.
---@param worldX number# The x position in world coordinates.
---@param worldY number# The y position in world coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getLocalPoint(worldX, worldY) end

---Transforms multiple points from world coordinates to local coordinates.
---@param x1 number# (Argument) The x position of the first point.
---@param y1 number# (Argument) The y position of the first point.
---@param x2 number# (Argument) The x position of the second point.
---@param y2 number# (Argument) The y position of the second point.
---@param ... number# (Argument) You can continue passing x and y position of the points.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getLocalPoints(x1, y1, x2, y2, ...) end

---Transform a vector from world coordinates to local coordinates.
---@param worldX number# The vector x component in world coordinates.
---@param worldY number# The vector y component in world coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getLocalVector(worldX, worldY) end

---Get the mass of the body.Static bodies always have a mass of 0.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getMass() end

---Returns the mass, its center, and the rotational inertia.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getMassData() end

---Get the position of the body.Note that this may not be the center of mass of the body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getPosition() end

---Get the position and angle of the body.Note that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getTransform() end

---Returns the type of the body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getType() end

---Returns the Lua value associated with this Body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getUserData() end

---Gets the World the body lives in.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getWorld() end

---Get the center of mass position in world coordinates.Use Body:getLocalCenter to get the center of mass in local coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getWorldCenter() end

---Transform a point from local coordinates to world coordinates.
---@param localX number# The x position in local coordinates.
---@param localY number# The y position in local coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getWorldPoint(localX, localY) end

---Transforms multiple points from local coordinates to world coordinates.
---@param x1 number# The x position of the first point.
---@param y1 number# The y position of the first point.
---@param x2 number# The x position of the second point.
---@param y2 number# The y position of the second point.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getWorldPoints(x1, y1, x2, y2) end

---Transform a vector from local coordinates to world coordinates.
---@param localX number# The vector x component in local coordinates.
---@param localY number# The vector y component in local coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getWorldVector(localX, localY) end

---Get the x position of the body in world coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getX() end

---Get the y position of the body in world coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:getY() end

---Returns whether the body is actively used in the simulation.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:isActive() end

---Returns the sleep status of the body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:isAwake() end

---Get the bullet status of a body.There are two methods to check for body collisions:*  at their location when the world is updated (default)*  using continuous collision detection (CCD)The default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly.Note that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:isBullet() end

---Gets whether the Body is destroyed. Destroyed bodies cannot be used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:isDestroyed() end

---Returns whether the body rotation is locked.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:isFixedRotation() end

---Returns the sleeping behaviour of the body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:isSleepingAllowed() end

---Gets whether the Body is touching the given other Body.
---@param otherbody love.physics.Body# The other body to check.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:isTouching(otherbody) end

---Resets the mass of the body by recalculating it from the mass properties of the fixtures.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:resetMassData() end

---Sets whether the body is active in the world.An inactive body does not take part in the simulation. It will not move or cause any collisions.
---@param active boolean# If the body is active or not.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setActive(active) end

---Set the angle of the body.The angle is measured in radians. If you need to transform it from degrees, use math.rad.A value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view.It is possible to cause a collision with another body by changing its angle. 
---@param angle number# The angle in radians.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setAngle(angle) end

---Sets the angular damping of a BodySee Body:getAngularDamping for a definition of angular damping.Angular damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will look unrealistic.
---@param damping number# The new angular damping.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setAngularDamping(damping) end

---Sets the angular velocity of a Body.The angular velocity is the ''rate of change of angle over time''.This function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost. 
---@param w number# The new angular velocity, in radians per second
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setAngularVelocity(w) end

---Wakes the body up or puts it to sleep.
---@param awake boolean# The body sleep status.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setAwake(awake) end

---Set the bullet status of a body.There are two methods to check for body collisions:*  at their location when the world is updated (default)*  using continuous collision detection (CCD)The default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly.Note that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet.
---@param status boolean# The bullet status of the body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setBullet(status) end

---Set whether a body has fixed rotation.Bodies with fixed rotation don't vary the speed at which they rotate. Calling this function causes the mass to be reset. 
---@param isFixed boolean# Whether the body should have fixed rotation.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setFixedRotation(isFixed) end

---Sets a new gravity scale factor for the body.
---@param scale number# The new gravity scale factor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setGravityScale(scale) end

---Set the inertia of a body.
---@param inertia number# The new moment of inertia, in kilograms * pixel squared.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setInertia(inertia) end

---Sets the linear damping of a BodySee Body:getLinearDamping for a definition of linear damping.Linear damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will make the objects look 'floaty'(if gravity is enabled).
---@param ld number# The new linear damping
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setLinearDamping(ld) end

---Sets a new linear velocity for the Body.This function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost.
---@param x number# The x-component of the velocity vector.
---@param y number# The y-component of the velocity vector.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setLinearVelocity(x, y) end

---Sets a new body mass.
---@param mass number# The mass, in kilograms.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setMass(mass) end

---Overrides the calculated mass data.
---@param x number# The x position of the center of mass.
---@param y number# The y position of the center of mass.
---@param mass number# The mass of the body.
---@param inertia number# The rotational inertia.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setMassData(x, y, mass, inertia) end

---Set the position of the body.Note that this may not be the center of mass of the body.This function cannot wake up the body.
---@param x number# The x position.
---@param y number# The y position.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setPosition(x, y) end

---Sets the sleeping behaviour of the body. Should sleeping be allowed, a body at rest will automatically sleep. A sleeping body is not simulated unless it collided with an awake body. Be wary that one can end up with a situation like a floating sleeping body if the floor was removed.
---@param allowed boolean# True if the body is allowed to sleep or false if not.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setSleepingAllowed(allowed) end

---Set the position and angle of the body.Note that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view.This function cannot wake up the body.
---@param x number# The x component of the position.
---@param y number# The y component of the position.
---@param angle number# The angle in radians.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setTransform(x, y, angle) end

---Sets a new body type.
---@param type loveModule.love.physics.BodyType# The new type.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setType(type) end

---Associates a Lua value with the Body.To delete the reference, explicitly pass nil.
---@param value any# The Lua value to associate with the Body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setUserData(value) end

---Set the x position of the body.This function cannot wake up the body. 
---@param x number# The x position.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setX(x) end

---Set the y position of the body.This function cannot wake up the body. 
---@param y number# The y position.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Body:setY(y) end

---Returns a child of the shape as an EdgeShape.
---@param index number# The index of the child.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_ChainShape:getChildEdge(index) end

---Gets the vertex that establishes a connection to the next shape.Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_ChainShape:getNextVertex() end

---Returns a point of the shape.
---@param index number# The index of the point to return.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_ChainShape:getPoint(index) end

---Returns all points of the shape.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_ChainShape:getPoints() end

---Gets the vertex that establishes a connection to the previous shape.Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_ChainShape:getPreviousVertex() end

---Returns the number of vertices the shape has.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_ChainShape:getVertexCount() end

---Sets a vertex that establishes a connection to the next shape.This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---@param x number# The x-component of the vertex.
---@param y number# The y-component of the vertex.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_ChainShape:setNextVertex(x, y) end

---Sets a vertex that establishes a connection to the previous shape.This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---@param x number# The x-component of the vertex.
---@param y number# The y-component of the vertex.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_ChainShape:setPreviousVertex(x, y) end

---Gets the center point of the circle shape.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_CircleShape:getPoint() end

---Gets the radius of the circle shape.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_CircleShape:getRadius() end

---Sets the location of the center of the circle shape.
---@param x number# The x-component of the new center point of the circle.
---@param y number# The y-component of the new center point of the circle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_CircleShape:setPoint(x, y) end

---Sets the radius of the circle.
---@param radius number# The radius of the circle
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_CircleShape:setRadius(radius) end

---Gets the child indices of the shapes of the two colliding fixtures. For ChainShapes, an index of 1 is the first edge in the chain.Used together with Fixture:rayCast or ChainShape:getChildEdge.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:getChildren() end

---Gets the two Fixtures that hold the shapes that are in contact.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:getFixtures() end

---Get the friction between two shapes that are in contact.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:getFriction() end

---Get the normal vector between two shapes that are in contact.This function returns the coordinates of a unit vector that points from the first shape to the second.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:getNormal() end

---Returns the contact points of the two colliding fixtures. There can be one or two points.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:getPositions() end

---Get the restitution between two shapes that are in contact.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:getRestitution() end

---Returns whether the contact is enabled. The collision will be ignored if a contact gets disabled in the preSolve callback.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:isEnabled() end

---Returns whether the two colliding fixtures are touching each other.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:isTouching() end

---Resets the contact friction to the mixture value of both fixtures.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:resetFriction() end

---Resets the contact restitution to the mixture value of both fixtures.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:resetRestitution() end

---Enables or disables the contact.
---@param enabled boolean# True to enable or false to disable.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:setEnabled(enabled) end

---Sets the contact friction.
---@param friction number# The contact friction.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:setFriction(friction) end

---Sets the contact restitution.
---@param restitution number# The contact restitution.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Contact:setRestitution(restitution) end

---Gets the damping ratio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_DistanceJoint:getDampingRatio() end

---Gets the response speed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_DistanceJoint:getFrequency() end

---Gets the equilibrium distance between the two Bodies.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_DistanceJoint:getLength() end

---Sets the damping ratio.
---@param ratio number# The damping ratio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_DistanceJoint:setDampingRatio(ratio) end

---Sets the response speed.
---@param Hz number# The response speed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_DistanceJoint:setFrequency(Hz) end

---Sets the equilibrium distance between the two Bodies.
---@param l number# The length between the two Bodies.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_DistanceJoint:setLength(l) end

---Gets the vertex that establishes a connection to the next shape.Setting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_EdgeShape:getNextVertex() end

---Returns the local coordinates of the edge points.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_EdgeShape:getPoints() end

---Gets the vertex that establishes a connection to the previous shape.Setting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_EdgeShape:getPreviousVertex() end

---Sets a vertex that establishes a connection to the next shape.This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---@param x number# The x-component of the vertex.
---@param y number# The y-component of the vertex.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_EdgeShape:setNextVertex(x, y) end

---Sets a vertex that establishes a connection to the previous shape.This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---@param x number# The x-component of the vertex.
---@param y number# The y-component of the vertex.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_EdgeShape:setPreviousVertex(x, y) end

---Destroys the fixture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:destroy() end

---Returns the body to which the fixture is attached.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getBody() end

---Returns the points of the fixture bounding box. In case the fixture has multiple children a 1-based index can be specified. For example, a fixture will have multiple children with a chain shape.
---@param index number|nil# (1) A bounding box of the fixture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getBoundingBox(index) end

---Returns the categories the fixture belongs to.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getCategory() end

---Returns the density of the fixture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getDensity() end

---Returns the filter data of the fixture.Categories and masks are encoded as the bits of a 16-bit integer.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getFilterData() end

---Returns the friction of the fixture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getFriction() end

---Returns the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group.The groups range from -32768 to 32767.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getGroupIndex() end

---Returns which categories this fixture should '''NOT''' collide with.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getMask() end

---Returns the mass, its center and the rotational inertia.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getMassData() end

---Returns the restitution of the fixture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getRestitution() end

---Returns the shape of the fixture. This shape is a reference to the actual data used in the simulation. It's possible to change its values between timesteps.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getShape() end

---Returns the Lua value associated with this fixture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:getUserData() end

---Gets whether the Fixture is destroyed. Destroyed fixtures cannot be used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:isDestroyed() end

---Returns whether the fixture is a sensor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:isSensor() end

---Casts a ray against the shape of the fixture and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned.The ray starts on the first point of the input line and goes towards the second point of the line. The fifth argument is the maximum distance the ray is going to travel as a scale factor of the input line length.The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children.The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point.hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction
---@param x1 number# The x position of the input line starting point.
---@param y1 number# The y position of the input line starting point.
---@param x2 number# The x position of the input line end point.
---@param y2 number# The y position of the input line end point.
---@param maxFraction number# Ray length parameter.
---@param childIndex number|nil# (1) The index of the child the ray gets cast against.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:rayCast(x1, y1, x2, y2, maxFraction, childIndex) end

---Sets the categories the fixture belongs to. There can be up to 16 categories represented as a number from 1 to 16.All fixture's default category is 1.
---@param ... number# The categories.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:setCategory(...) end

---Sets the density of the fixture. Call Body:resetMassData if this needs to take effect immediately.
---@param density number# The fixture density in kilograms per square meter.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:setDensity(density) end

---Sets the filter data of the fixture.Groups, categories, and mask can be used to define the collision behaviour of the fixture.If two fixtures are in the same group they either always collide if the group is positive, or never collide if it's negative. If the group is zero or they do not match, then the contact filter checks if the fixtures select a category of the other fixture with their masks. The fixtures do not collide if that's not the case. If they do have each other's categories selected, the return value of the custom contact filter will be used. They always collide if none was set.There can be up to 16 categories. Categories and masks are encoded as the bits of a 16-bit integer.When created, prior to calling this function, all fixtures have category set to 1, mask set to 65535 (all categories) and group set to 0.This function allows setting all filter data for a fixture at once. To set only the categories, the mask or the group, you can use Fixture:setCategory, Fixture:setMask or Fixture:setGroupIndex respectively.
---@param categories number# The categories as an integer from 0 to 65535.
---@param mask number# The mask as an integer from 0 to 65535.
---@param group number# The group as an integer from -32768 to 32767.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:setFilterData(categories, mask, group) end

---Sets the friction of the fixture.Friction determines how shapes react when they 'slide' along other shapes. Low friction indicates a slippery surface, like ice, while high friction indicates a rough surface, like concrete. Range: 0.0 - 1.0.
---@param friction number# The fixture friction.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:setFriction(friction) end

---Sets the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group.The groups range from -32768 to 32767.
---@param group number# The group as an integer from -32768 to 32767.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:setGroupIndex(group) end

---Sets the category mask of the fixture. There can be up to 16 categories represented as a number from 1 to 16.This fixture will '''NOT''' collide with the fixtures that are in the selected categories if the other fixture also has a category of this fixture selected.
---@param ... number# The masks.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:setMask(...) end

---Sets the restitution of the fixture.
---@param restitution number# The fixture restitution.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:setRestitution(restitution) end

---Sets whether the fixture should act as a sensor.Sensors do not cause collision responses, but the begin-contact and end-contact World callbacks will still be called for this fixture.
---@param sensor boolean# The sensor status.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:setSensor(sensor) end

---Associates a Lua value with the fixture.To delete the reference, explicitly pass nil.
---@param value any# The Lua value to associate with the fixture.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:setUserData(value) end

---Checks if a point is inside the shape of the fixture.
---@param x number# The x position of the point.
---@param y number# The y position of the point.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Fixture:testPoint(x, y) end

---Gets the maximum friction force in Newtons.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_FrictionJoint:getMaxForce() end

---Gets the maximum friction torque in Newton-meters.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_FrictionJoint:getMaxTorque() end

---Sets the maximum friction force in Newtons.
---@param maxForce number# Max force in Newtons.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_FrictionJoint:setMaxForce(maxForce) end

---Sets the maximum friction torque in Newton-meters.
---@param torque number# Maximum torque in Newton-meters.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_FrictionJoint:setMaxTorque(torque) end

---Get the Joints connected by this GearJoint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_GearJoint:getJoints() end

---Get the ratio of a gear joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_GearJoint:getRatio() end

---Set the ratio of a gear joint.
---@param ratio number# The new ratio of the joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_GearJoint:setRatio(ratio) end

---Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function.In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:destroy() end

---Get the anchor points of the joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:getAnchors() end

---Gets the bodies that the Joint is attached to.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:getBodies() end

---Gets whether the connected Bodies collide.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:getCollideConnected() end

---Returns the reaction force in newtons on the second body
---@param x number# How long the force applies. Usually the inverse time step or 1/dt.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:getReactionForce(x) end

---Returns the reaction torque on the second body.
---@param invdt number# How long the force applies. Usually the inverse time step or 1/dt.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:getReactionTorque(invdt) end

---Gets a string representing the type.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:getType() end

---Returns the Lua value associated with this Joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:getUserData() end

---Gets whether the Joint is destroyed. Destroyed joints cannot be used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:isDestroyed() end

---Associates a Lua value with the Joint.To delete the reference, explicitly pass nil.
---@param value any# The Lua value to associate with the Joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Joint:setUserData(value) end

---Gets the target angular offset between the two Bodies the Joint is attached to.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MotorJoint:getAngularOffset() end

---Gets the target linear offset between the two Bodies the Joint is attached to.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MotorJoint:getLinearOffset() end

---Sets the target angluar offset between the two Bodies the Joint is attached to.
---@param angleoffset number# The target angular offset in radians: the second body's angle minus the first body's angle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MotorJoint:setAngularOffset(angleoffset) end

---Sets the target linear offset between the two Bodies the Joint is attached to.
---@param x number# The x component of the target linear offset, relative to the first Body.
---@param y number# The y component of the target linear offset, relative to the first Body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MotorJoint:setLinearOffset(x, y) end

---Returns the damping ratio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MouseJoint:getDampingRatio() end

---Returns the frequency.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MouseJoint:getFrequency() end

---Gets the highest allowed force.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MouseJoint:getMaxForce() end

---Gets the target point.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MouseJoint:getTarget() end

---Sets a new damping ratio.
---@param ratio number# The new damping ratio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MouseJoint:setDampingRatio(ratio) end

---Sets a new frequency.
---@param freq number# The new frequency in hertz.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MouseJoint:setFrequency(freq) end

---Sets the highest allowed force.
---@param f number# The max allowed force.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MouseJoint:setMaxForce(f) end

---Sets the target point.
---@param x number# The x-component of the target.
---@param y number# The y-component of the target.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_MouseJoint:setTarget(x, y) end

---Get the local coordinates of the polygon's vertices.This function has a variable number of return values. It can be used in a nested fashion with love.graphics.polygon.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PolygonShape:getPoints() end

---Checks whether the limits are enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:areLimitsEnabled() end

---Gets the world-space axis vector of the Prismatic Joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getAxis() end

---Get the current joint angle speed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getJointSpeed() end

---Get the current joint translation.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getJointTranslation() end

---Gets the joint limits.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getLimits() end

---Gets the lower limit.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getLowerLimit() end

---Gets the maximum motor force.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getMaxMotorForce() end

---Returns the current motor force.
---@param invdt number# How long the force applies. Usually the inverse time step or 1/dt.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getMotorForce(invdt) end

---Gets the motor speed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getMotorSpeed() end

---Gets the reference angle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getReferenceAngle() end

---Gets the upper limit.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:getUpperLimit() end

---Checks whether the motor is enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:isMotorEnabled() end

---Sets the limits.
---@param lower number# The lower limit, usually in meters.
---@param upper number# The upper limit, usually in meters.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:setLimits(lower, upper) end

---Enables/disables the joint limit.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:setLimitsEnabled() end

---Sets the lower limit.
---@param lower number# The lower limit, usually in meters.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:setLowerLimit(lower) end

---Set the maximum motor force.
---@param f number# The maximum motor force, usually in N.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:setMaxMotorForce(f) end

---Enables/disables the joint motor.
---@param enable boolean# True to enable, false to disable.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:setMotorEnabled(enable) end

---Sets the motor speed.
---@param s number# The motor speed, usually in meters per second.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:setMotorSpeed(s) end

---Sets the upper limit.
---@param upper number# The upper limit, usually in meters.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PrismaticJoint:setUpperLimit(upper) end

---Get the total length of the rope.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PulleyJoint:getConstant() end

---Get the ground anchor positions in world coordinates.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PulleyJoint:getGroundAnchors() end

---Get the current length of the rope segment attached to the first body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PulleyJoint:getLengthA() end

---Get the current length of the rope segment attached to the second body.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PulleyJoint:getLengthB() end

---Get the maximum lengths of the rope segments.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PulleyJoint:getMaxLengths() end

---Get the pulley ratio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PulleyJoint:getRatio() end

---Set the total length of the rope.Setting a new length for the rope updates the maximum length values of the joint.
---@param length number# The new length of the rope in the joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PulleyJoint:setConstant(length) end

---Set the maximum lengths of the rope segments.The physics module also imposes maximum values for the rope segments. If the parameters exceed these values, the maximum values are set instead of the requested values.
---@param max1 number# The new maximum length of the first segment.
---@param max2 number# The new maximum length of the second segment.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PulleyJoint:setMaxLengths(max1, max2) end

---Set the pulley ratio.
---@param ratio number# The new pulley ratio of the joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_PulleyJoint:setRatio(ratio) end

---Checks whether limits are enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:areLimitsEnabled() end

---Get the current joint angle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:getJointAngle() end

---Get the current joint angle speed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:getJointSpeed() end

---Gets the joint limits.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:getLimits() end

---Gets the lower limit.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:getLowerLimit() end

---Gets the maximum motor force.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:getMaxMotorTorque() end

---Gets the motor speed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:getMotorSpeed() end

---Get the current motor force.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:getMotorTorque() end

---Gets the reference angle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:getReferenceAngle() end

---Gets the upper limit.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:getUpperLimit() end

---Checks whether limits are enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:hasLimitsEnabled() end

---Checks whether the motor is enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:isMotorEnabled() end

---Sets the limits.
---@param lower number# The lower limit, in radians.
---@param upper number# The upper limit, in radians.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:setLimits(lower, upper) end

---Enables/disables the joint limit.
---@param enable boolean# True to enable, false to disable.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:setLimitsEnabled(enable) end

---Sets the lower limit.
---@param lower number# The lower limit, in radians.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:setLowerLimit(lower) end

---Set the maximum motor force.
---@param f number# The maximum motor force, in Nm.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:setMaxMotorTorque(f) end

---Enables/disables the joint motor.
---@param enable boolean# True to enable, false to disable.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:setMotorEnabled(enable) end

---Sets the motor speed.
---@param s number# The motor speed, radians per second.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:setMotorSpeed(s) end

---Sets the upper limit.
---@param upper number# The upper limit, in radians.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RevoluteJoint:setUpperLimit(upper) end

---Gets the maximum length of a RopeJoint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RopeJoint:getMaxLength() end

---Sets the maximum length of a RopeJoint.
---@param maxLength number# The new maximum length of the RopeJoint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_RopeJoint:setMaxLength(maxLength) end

---Returns the points of the bounding box for the transformed shape.
---@param tx number# The translation of the shape on the x-axis.
---@param ty number# The translation of the shape on the y-axis.
---@param tr number# The shape rotation.
---@param childIndex number|nil# (1) The index of the child to compute the bounding box of.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Shape:computeAABB(tx, ty, tr, childIndex) end

---Computes the mass properties for the shape with the specified density.
---@param density number# The shape density.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Shape:computeMass(density) end

---Returns the number of children the shape has.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Shape:getChildCount() end

---Gets the radius of the shape.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Shape:getRadius() end

---Gets a string representing the Shape.This function can be useful for conditional debug drawing.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Shape:getType() end

---Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position.The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length.The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children.The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point.hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction
---@param x1 number# The x position of the input line starting point.
---@param y1 number# The y position of the input line starting point.
---@param x2 number# The x position of the input line end point.
---@param y2 number# The y position of the input line end point.
---@param maxFraction number# Ray length parameter.
---@param tx number# The translation of the shape on the x-axis.
---@param ty number# The translation of the shape on the y-axis.
---@param tr number# The shape rotation.
---@param childIndex number|nil# (1) The index of the child the ray gets cast against.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Shape:rayCast(x1, y1, x2, y2, maxFraction, tx, ty, tr, childIndex) end

---This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches.
---@param tx number# Translates the shape along the x-axis.
---@param ty number# Translates the shape along the y-axis.
---@param tr number# Rotates the shape.
---@param x number# The x-component of the point.
---@param y number# The y-component of the point.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_Shape:testPoint(tx, ty, tr, x, y) end

---Returns the damping ratio of the joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WeldJoint:getDampingRatio() end

---Returns the frequency.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WeldJoint:getFrequency() end

---Gets the reference angle.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WeldJoint:getReferenceAngle() end

---Sets a new damping ratio.
---@param ratio number# The new damping ratio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WeldJoint:setDampingRatio(ratio) end

---Sets a new frequency.
---@param freq number# The new frequency in hertz.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WeldJoint:setFrequency(freq) end

---Gets the world-space axis vector of the Wheel Joint.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:getAxis() end

---Returns the current joint translation speed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:getJointSpeed() end

---Returns the current joint translation.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:getJointTranslation() end

---Returns the maximum motor torque.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:getMaxMotorTorque() end

---Returns the speed of the motor.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:getMotorSpeed() end

---Returns the current torque on the motor.
---@param invdt number# How long the force applies. Usually the inverse time step or 1/dt.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:getMotorTorque(invdt) end

---Returns the damping ratio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:getSpringDampingRatio() end

---Returns the spring frequency.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:getSpringFrequency() end

---Checks if the joint motor is running.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:isMotorEnabled() end

---Sets a new maximum motor torque.
---@param maxTorque number# The new maximum torque for the joint motor in newton meters.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:setMaxMotorTorque(maxTorque) end

---Starts and stops the joint motor.
---@param enable boolean# True turns the motor on and false turns it off.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:setMotorEnabled(enable) end

---Sets a new speed for the motor.
---@param speed number# The new speed for the joint motor in radians per second.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:setMotorSpeed(speed) end

---Sets a new damping ratio.
---@param ratio number# The new damping ratio.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:setSpringDampingRatio(ratio) end

---Sets a new spring frequency.
---@param freq number# The new frequency in hertz.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_WheelJoint:setSpringFrequency(freq) end

---Destroys the world, taking all bodies, joints, fixtures and their shapes with it. An error will occur if you attempt to use any of the destroyed objects after calling this function.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:destroy() end

---Returns a table with all bodies.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:getBodies() end

---Returns the number of bodies in the world.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:getBodyCount() end

---Returns functions for the callbacks during the world update.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:getCallbacks() end

---Returns the number of contacts in the world.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:getContactCount() end

---Returns the function for collision filtering.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:getContactFilter() end

---Returns a table with all Contacts.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:getContacts() end

---Get the gravity of the world.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:getGravity() end

---Returns the number of joints in the world.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:getJointCount() end

---Returns a table with all joints.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:getJoints() end

---Gets whether the World is destroyed. Destroyed worlds cannot be used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:isDestroyed() end

---Returns if the world is updating its state.This will return true inside the callbacks from World:setCallbacks.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:isLocked() end

---Gets the sleep behaviour of the world.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:isSleepingAllowed() end

---Calls a function for each fixture inside the specified area by searching for any overlapping bounding box (Fixture:getBoundingBox).
---@param topLeftX number# The x position of the top-left point.
---@param topLeftY number# The y position of the top-left point.
---@param bottomRightX number# The x position of the bottom-right point.
---@param bottomRightY number# The y position of the bottom-right point.
---@param callback function# This function gets passed one argument, the fixture, and should return a boolean. The search will continue if it is true or stop if it is false.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:queryBoundingBox(topLeftX, topLeftY, bottomRightX, bottomRightY, callback) end

---Casts a ray and calls a function for each fixtures it intersects. 
---@param x1 number# The x position of the starting point of the ray.
---@param y1 number# The x position of the starting point of the ray.
---@param x2 number# The x position of the end point of the ray.
---@param y2 number# The x value of the surface normal vector of the shape edge.
---@param callback function# A function called for each fixture intersected by the ray. The function gets six arguments and should return a number as a control value. The intersection points fed into the function will be in an arbitrary order. If you wish to find the closest point of intersection, you'll need to do that yourself within the function. The easiest way to do that is by using the fraction value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:rayCast(x1, y1, x2, y2, callback) end

---Sets functions for the collision callbacks during the world update.Four Lua functions can be given as arguments. The value nil removes a function.When called, each function will be passed three arguments. The first two arguments are the colliding fixtures and the third argument is the Contact between them. The postSolve callback additionally gets the normal and tangent impulse for each contact point. See notes.If you are interested to know when exactly each callback is called, consult a Box2d manual
---@param beginContact function# Gets called when two fixtures begin to overlap.
---@param endContact function# Gets called when two fixtures cease to overlap. This will also be called outside of a world update, when colliding objects are destroyed.
---@param preSolve function|nil# (nil) Gets called before a collision gets resolved.
---@param postSolve function|nil# (nil) Gets called after the collision has been resolved.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:setCallbacks(beginContact, endContact, preSolve, postSolve) end

---Sets a function for collision filtering.If the group and category filtering doesn't generate a collision decision, this function gets called with the two fixtures as arguments. The function should return a boolean value where true means the fixtures will collide and false means they will pass through each other.
---@param filter function# The function handling the contact filtering.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:setContactFilter(filter) end

---Set the gravity of the world.
---@param x number# The x component of gravity.
---@param y number# The y component of gravity.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:setGravity(x, y) end

---Sets the sleep behaviour of the world.
---@param allow boolean# True if bodies in the world are allowed to sleep, or false if not.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:setSleepingAllowed(allow) end

---Translates the World's origin. Useful in large worlds where floating point precision issues become noticeable at far distances from the origin.
---@param x number# The x component of the new origin with respect to the old origin.
---@param y number# The y component of the new origin with respect to the old origin.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:translateOrigin(x, y) end

---Update the state of the world.
---@param dt number# The time (in seconds) to advance the physics simulation.
---@param velocityiterations number|nil# (8) The maximum number of steps used to determine the new velocities when resolving a collision.
---@param positioniterations number|nil# (3) The maximum number of steps used to determine the new positions when resolving a collision.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_physics_World:update(dt, velocityiterations, positioniterations) end

---Attempts to find a decoder for the encoded sound data in the specified file.
---@param file love.filesystem.File# The file with encoded sound data.
---@param buffer number|nil# (2048) The size of each decoded chunk, in bytes.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_sound.newDecoder(file, buffer) end

---Attempts to find a decoder for the encoded sound data in the specified file.
---@param filename string# The filename of the file with encoded sound data.
---@param buffer number|nil# (2048) The size of each decoded chunk, in bytes.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_sound.newDecoder(filename, buffer) end

---Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.
---@param filename string# The file name of the file to load.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_sound.newSoundData(filename) end

---Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.
---@param file love.filesystem.File# A File pointing to an audio file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_sound.newSoundData(file) end

---Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.
---@param decoder love.sound.Decoder# Decode data from this Decoder until EOF.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_sound.newSoundData(decoder) end

---Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.
---@param samples number# Total number of samples.
---@param rate number|nil# (44100) Number of samples per second
---@param bits number|nil# (16) Bits per sample (8 or 16).
---@param channels number|nil# (2) Either 1 for mono or 2 for stereo.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_sound.newSoundData(samples, rate, bits, channels) end

---Creates a new copy of current decoder.The new decoder will start decoding from the beginning of the audio stream.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_Decoder:clone() end

---Decodes the audio and returns a SoundData object containing the decoded audio data.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_Decoder:decode() end

---Returns the number of bits per sample.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_Decoder:getBitDepth() end

---Returns the number of channels in the stream.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_Decoder:getChannelCount() end

---Gets the duration of the sound file. It may not always be sample-accurate, and it may return -1 if the duration cannot be determined at all.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_Decoder:getDuration() end

---Returns the sample rate of the Decoder.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_Decoder:getSampleRate() end

---Sets the currently playing position of the Decoder.
---@param offset number# The position to seek to, in seconds.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_Decoder:seek(offset) end

---Returns the number of bits per sample.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_SoundData:getBitDepth() end

---Returns the number of channels in the SoundData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_SoundData:getChannelCount() end

---Gets the duration of the sound data.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_SoundData:getDuration() end

---Gets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
---@param i number# An integer value specifying the position of the sample (starting at 0).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_SoundData:getSample(i) end

---Gets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
---@param i number# An integer value specifying the position of the sample (starting at 0).
---@param channel number# The index of the channel to get within the given sample.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_SoundData:getSample(i, channel) end

---Returns the number of samples per channel of the SoundData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_SoundData:getSampleCount() end

---Returns the sample rate of the SoundData.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_SoundData:getSampleRate() end

---Sets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
---@param i number# An integer value specifying the position of the sample (starting at 0).
---@param sample number# The normalized samplepoint (range -1.0 to 1.0).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_SoundData:setSample(i, sample) end

---Sets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
---@param i number# An integer value specifying the position of the sample (starting at 0).
---@param channel number# The index of the channel to set within the given sample.
---@param sample number# The normalized samplepoint (range -1.0 to 1.0).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_sound_SoundData:setSample(i, channel, sample) end

---Gets text from the clipboard.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_system.getClipboardText() end

---Gets the current operating system. In general, LÖVE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.)
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_system.getOS() end

---Gets information about the system's power supply.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_system.getPowerInfo() end

---Gets the amount of logical processor in the system.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_system.getProcessorCount() end

---Gets whether another application on the system is playing music in the background.Currently this is implemented on iOS and Android, and will always return false on other operating systems. The t.audio.mixwithsystem flag in love.conf can be used to configure whether background audio / music from other apps should play while LÖVE is open.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_system.hasBackgroundMusic() end

---Opens a URL with the user's web or file browser.
---@param url string# The URL to open. Must be formatted as a proper URL.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_system.openURL(url) end

---Puts text in the clipboard.
---@param text string# The new text to hold in the system's clipboard.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_system.setClipboardText(text) end

---Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor.
---@param seconds number|nil# (0.5) The duration to vibrate for. If called on an iOS device, it will always vibrate for 0.5 seconds due to limitations in the iOS system APIs.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_system.vibrate(seconds) end

---Creates or retrieves a named thread channel.
---@param name string# The name of the channel you want to create or retrieve.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_thread.getChannel(name) end

---Create a new unnamed thread channel.One use for them is to pass new unnamed channels to other threads via Channel:push on a named channel.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_thread.newChannel() end

---Creates a new Thread from a filename, string or FileData object containing Lua code.
---@param filename string# The name of the Lua file to use as the source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_thread.newThread(filename) end

---Creates a new Thread from a filename, string or FileData object containing Lua code.
---@param fileData love.filesystem.FileData# The FileData containing the Lua code to use as the source.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_thread.newThread(fileData) end

---Creates a new Thread from a filename, string or FileData object containing Lua code.
---@param codestring string# A string containing the Lua code to use as the source. It needs to either be at least 1024 characters long, or contain at least one newline.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_thread.newThread(codestring) end

---Clears all the messages in the Channel queue.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:clear() end

---Retrieves the value of a Channel message and removes it from the message queue.It waits until a message is in the queue then returns the message value.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:demand() end

---Retrieves the value of a Channel message and removes it from the message queue.It waits until a message is in the queue then returns the message value.
---@param timeout number# The maximum amount of time to wait.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:demand(timeout) end

---Retrieves the number of messages in the thread Channel queue.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:getCount() end

---Gets whether a pushed value has been popped or otherwise removed from the Channel.
---@param id number# An id value previously returned by Channel:push.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:hasRead(id) end

---Retrieves the value of a Channel message, but leaves it in the queue.It returns nil if there's no message in the queue.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:peek() end

---Executes the specified function atomically with respect to this Channel.Calling multiple methods in a row on the same Channel is often useful. However if multiple Threads are calling this Channel's methods at the same time, the different calls on each Thread might end up interleaved (e.g. one or more of the second thread's calls may happen in between the first thread's calls.)This method avoids that issue by making sure the Thread calling the method has exclusive access to the Channel until the specified function has returned.
---@param func fun(channel:love.thread.Channel, ...:any): ...:any# The function to call, the form of function(channel, arg1, arg2, ...) end. The Channel is passed as the first argument to the function when it is called.
---@param ... any# Additional arguments that the given function will receive when it is called.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:performAtomic(func, ...) end

---Retrieves the value of a Channel message and removes it from the message queue.It returns nil if there are no messages in the queue.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:pop() end

---Send a message to the thread Channel.See Variant for the list of supported types.
---@param value love.Variant# The contents of the message.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:push(value) end

---Send a message to the thread Channel and wait for a thread to accept it.See Variant for the list of supported types.
---@param value love.Variant# The contents of the message.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:supply(value) end

---Send a message to the thread Channel and wait for a thread to accept it.See Variant for the list of supported types.
---@param value love.Variant# The contents of the message.
---@param timeout number# The maximum amount of time to wait.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Channel:supply(value, timeout) end

---Retrieves the error string from the thread if it produced an error.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Thread:getError() end

---Returns whether the thread is currently running.Threads which are not running can be (re)started with Thread:start.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Thread:isRunning() end

---Starts the thread.Beginning with version 0.9.0, threads can be restarted after they have completed their execution.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Thread:start() end

---Starts the thread.Beginning with version 0.9.0, threads can be restarted after they have completed their execution.
---@param ... love.Variant# A string, number, boolean, LÖVE object, or simple table.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Thread:start(...) end

---Wait for a thread to finish.This call will block until the thread finishes.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_thread_Thread:wait() end

---Returns the average delta time (seconds per frame) over the last second.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_timer.getAverageDelta() end

---Returns the time between the last two frames.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_timer.getDelta() end

---Returns the current frames per second.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_timer.getFPS() end

---Returns the value of a timer with an unspecified starting time.This function should only be used to calculate differences between points in time, as the starting time of the timer is unknown.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_timer.getTime() end

---Pauses the current thread for the specified amount of time.
---@param s number# Seconds to sleep for.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_timer.sleep(s) end

---Measures the time between two frames.Calling this changes the return value of love.timer.getDelta.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_timer.step() end

---Gets the current position of the specified touch-press, in pixels.
---@param id lightuserdata# The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_touch.getPosition(id) end

---Gets the current pressure of the specified touch-press.
---@param id lightuserdata# The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_touch.getPressure(id) end

---Gets a list of all active touch-presses.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_touch.getTouches() end

---Creates a new VideoStream. Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see love.graphics.newVideo for that.
---@param filename string# The file path to the Ogg Theora video file.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_video.newVideoStream(filename) end

---Creates a new VideoStream. Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see love.graphics.newVideo for that.
---@param file love.filesystem.File# The File object containing the Ogg Theora video.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_video.newVideoStream(file) end

---Gets the filename of the VideoStream.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_video_VideoStream:getFilename() end

---Gets whether the VideoStream is playing.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_video_VideoStream:isPlaying() end

---Pauses the VideoStream.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_video_VideoStream:pause() end

---Plays the VideoStream.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_video_VideoStream:play() end

---Rewinds the VideoStream. Synonym to VideoStream:seek(0).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_video_VideoStream:rewind() end

---Sets the current playback position of the VideoStream.
---@param offset number# The time in seconds since the beginning of the VideoStream.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_video_VideoStream:seek(offset) end

---Gets the current playback position of the VideoStream.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_video_VideoStream:tell() end

---Closes the window. It can be reopened with love.window.setMode.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.close() end

---Converts a number from pixels to density-independent units.The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case.This function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.
---@param pixelvalue number# A number in pixels to convert to density-independent units.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.fromPixels(pixelvalue) end

---Converts a number from pixels to density-independent units.The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case.This function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.
---@param px number# The x-axis value of a coordinate in pixels.
---@param py number# The y-axis value of a coordinate in pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.fromPixels(px, py) end

---Gets the DPI scale factor associated with the window.The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getDPIScale() would return 2.0 in that case.The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getDPIScale() end

---Gets the width and height of the desktop.
---@param displayindex number|nil# (1) The index of the display, if multiple monitors are available.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getDesktopDimensions(displayindex) end

---Gets the number of connected monitors.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getDisplayCount() end

---Gets the name of a display.
---@param displayindex number|nil# (1) The index of the display to get the name of.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getDisplayName(displayindex) end

---Gets current device display orientation.
---@param displayindex number|nil# (nil) Display index to get its display orientation, or nil for default display index.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getDisplayOrientation(displayindex) end

---Gets whether the window is fullscreen.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getFullscreen() end

---Gets a list of supported fullscreen modes.
---@param displayindex number|nil# (1) The index of the display, if multiple monitors are available.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getFullscreenModes(displayindex) end

---Gets the window icon.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getIcon() end

---Gets the display mode and properties of the window.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getMode() end

---Gets the position of the window on the screen.The window position is in the coordinate space of the display it is currently in.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getPosition() end

---Gets area inside the window which is known to be unobstructed by a system title bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by the user.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getSafeArea() end

---Gets the window title.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getTitle() end

---Gets current vertical synchronization (vsync).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.getVSync() end

---Checks if the game window has keyboard focus.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.hasFocus() end

---Checks if the game window has mouse focus.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.hasMouseFocus() end

---Gets whether the display is allowed to sleep while the program is running.Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.isDisplaySleepEnabled() end

---Gets whether the Window is currently maximized.The window can be maximized if it is not fullscreen and is resizable, and either the user has pressed the window's Maximize button or love.window.maximize has been called.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.isMaximized() end

---Gets whether the Window is currently minimized.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.isMinimized() end

---Checks if the window is open.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.isOpen() end

---Checks if the game window is visible.The window is considered visible if it's not minimized and the program isn't hidden.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.isVisible() end

---Makes the window as large as possible.This function has no effect if the window isn't resizable, since it essentially programmatically presses the window's 'maximize' button.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.maximize() end

---Minimizes the window to the system's task bar / dock.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.minimize() end

---Causes the window to request the attention of the user if it is not in the foreground.In Windows the taskbar icon will flash, and in OS X the dock icon will bounce.
---@param continuous boolean|nil# (false) Whether to continuously request attention until the window becomes active, or to do it only once.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.requestAttention(continuous) end

---Restores the size and position of the window if it was minimized or maximized.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.restore() end

---Sets whether the display is allowed to sleep while the program is running.Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.
---@param enable boolean# True to enable system display sleep, false to disable it.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.setDisplaySleepEnabled(enable) end

---Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.
---@param fullscreen boolean# Whether to enter or exit fullscreen mode.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.setFullscreen(fullscreen) end

---Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.
---@param fullscreen boolean# Whether to enter or exit fullscreen mode.
---@param fstype loveModule.love.window.FullscreenType# The type of fullscreen mode to use.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.setFullscreen(fullscreen, fstype) end

---Sets the window icon until the game is quit. Not all operating systems support very large icon images.
---@param imagedata love.image.ImageData# The window icon image.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.setIcon(imagedata) end

---Sets the display mode and properties of the window.If width or height is 0, setMode will use the width and height of the desktop. Changing the display mode may have side effects: for example, canvases will be cleared and values sent to shaders with canvases beforehand or re-draw to them afterward if you need to.
---@param width number# Display width.
---@param height number# Display height.
---@param flags {
---fullscreen : boolean|nil,
---fullscreentype : loveModule.love.window.FullscreenType|nil,
---vsync : boolean|nil,
---msaa : number|nil,
---stencil : boolean|nil,
---depth : number|nil,
---resizable : boolean|nil,
---borderless : boolean|nil,
---centered : boolean|nil,
---display : number|nil,
---minwidth : number|nil,
---minheight : number|nil,
---highdpi : boolean|nil,
---x : number|nil,
---y : number|nil,
---usedpiscale : boolean|nil,
---srgb : boolean|nil}# The flags table with the options:
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.setMode(width, height, flags) end

---Sets the position of the window on the screen.The window position is in the coordinate space of the specified display.
---@param x number# The x-coordinate of the window's position.
---@param y number# The y-coordinate of the window's position.
---@param displayindex number|nil# (1) The index of the display that the new window position is relative to.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.setPosition(x, y, displayindex) end

---Sets the window title.
---@param title string# The new window title.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.setTitle(title) end

---Sets vertical synchronization mode.
---@param vsync number# VSync number: 1 to enable, 0 to disable, and -1 for adaptive vsync.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.setVSync(vsync) end

---Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.
---@param title string# The title of the message box.
---@param message string# The text inside the message box.
---@param type loveModule.love.window.MessageBoxType|nil# ('info') The type of the message box.
---@param attachtowindow boolean|nil# (true) Whether the message box should be attached to the love window or free-floating.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.showMessageBox(title, message, type, attachtowindow) end

---Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.
---@param title string# The title of the message box.
---@param message string# The text inside the message box.
---@param buttonlist table# A table containing a list of button names to show. The table can also contain the fields enterbutton and escapebutton, which should be the index of the default button to use when the user presses 'enter' or 'escape', respectively.
---@param type loveModule.love.window.MessageBoxType|nil# ('info') The type of the message box.
---@param attachtowindow boolean|nil# (true) Whether the message box should be attached to the love window or free-floating.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.showMessageBox(title, message, buttonlist, type, attachtowindow) end

---Converts a number from density-independent units to pixels.The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case.This is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.
---@param value number# A number in density-independent units to convert to pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.toPixels(value) end

---Converts a number from density-independent units to pixels.The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case.This is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.
---@param x number# The x-axis value of a coordinate in density-independent units to convert to pixels.
---@param y number# The y-axis value of a coordinate in density-independent units to convert to pixels.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.toPixels(x, y) end

---Sets the display mode and properties of the window, without modifying unspecified properties.If width or height is 0, updateMode will use the width and height of the desktop. Changing the display mode may have side effects: for example, canvases will be cleared. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to.
---@param width number# Window width.
---@param height number# Window height.
---@param settings {
---fullscreen : boolean,
---fullscreentype : loveModule.love.window.FullscreenType,
---vsync : boolean,
---msaa : number,
---resizable : boolean,
---borderless : boolean,
---centered : boolean,
---display : number,
---minwidth : number,
---minheight : number,
---highdpi : boolean,
---x : number,
---y : number}# The settings table with the following optional fields. Any field not filled in will use the current value that would be returned by love.window.getMode.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love_window.updateMode(width, height, settings) end

---Creates a new copy of the Data object.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_Data:clone() end

---Gets an FFI pointer to the Data.This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_Data:getFFIPointer() end

---Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_Data:getPointer() end

---Gets the Data's size in bytes.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_Data:getSize() end

---Gets the full Data as a string.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_Data:getString() end

---Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other LÖVE object or thread.This method can be used to immediately clean up resources without waiting for Lua's garbage collector.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_Object:release() end

---Gets the type of the object as a string.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_Object:type() end

---Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true.
---@param name string# The name of the type to check for.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__love_Object:typeOf(name) end

---Gets the current running version of LÖVE.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.getVersion() end

---Gets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.When deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.hasDeprecationOutput() end

---Gets whether the given version is compatible with the current running version of LÖVE.
---@param version string# The version to check (for example '11.3' or '0.10.2').
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.isVersionCompatible(version) end

---Gets whether the given version is compatible with the current running version of LÖVE.
---@param major number# The major version to check (for example 11 for 11.3 or 0 for 0.10.2).
---@param minor number# The minor version to check (for example 3 for 11.3 or 10 for 0.10.2).
---@param revision number# The revision of version to check (for example 0 for 11.3 or 2 for 0.10.2).
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.isVersionCompatible(major, minor, revision) end

---Sets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.When deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.
---@param enable boolean# Whether to enable or disable deprecation output.
---@diagnostic disable-next-line: args-after-dots, duplicate-set-field
function temp__loveModule_love.setDeprecationOutput(enable) end

---@type loveModule.love
love = love

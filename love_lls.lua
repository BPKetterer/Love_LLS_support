---@meta
--Autogenerated

assert(false, "This file is only for LuaLS and should not be included")

---@alias love.Variant table|boolean|string|number|love.Object

---Version: 11.5
---
---
---[Wiki](https://love2d.org/wiki/love)
---
---@class love
---@field audio love.audio
---@field data love.data
---@field event love.event
---@field filesystem love.filesystem
---@field font love.font
---@field graphics love.graphics
---@field image love.image
---@field joystick love.joystick
---@field keyboard love.keyboard
---@field math love.math
---@field mouse love.mouse
---@field physics love.physics
---@field sound love.sound
---@field system love.system
---@field thread love.thread
---@field timer love.timer
---@field touch love.touch
---@field video love.video
---@field window love.window
love = {}

---Provides an interface to create noise with the user's speakers.
---
---[Wiki](https://love2d.org/wiki/love.audio)
---
---@class love.audio
love.audio = {}

---Represents an audio input device capable of recording sounds.
---
---[Wiki](https://love2d.org/wiki/RecordingDevice)
---
---@class love.RecordingDevice : love.Object
local RecordingDevice = {}

---A Source represents audio you can play back.
---
---You can do interesting things with Sources, like set the volume, pitch, and its position relative to the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.
---
---The Source controls (play/pause/stop) act according to the following state table.
---
---[Wiki](https://love2d.org/wiki/Source)
---
---@class love.Source : love.Object
local Source = {}

---Provides functionality for creating and transforming data.
---
---[Wiki](https://love2d.org/wiki/love.data)
---
---@class love.data
love.data = {}

---Data object containing arbitrary bytes in an contiguous memory.
---
---There are currently no LÖVE functions provided for manipulating the contents of a ByteData, but Data:getPointer can be used with LuaJIT's FFI to access and write to the contents directly.
---
---[Wiki](https://love2d.org/wiki/ByteData)
---
---@class love.ByteData : love.Object, love.Data
local ByteData = {}

---Represents byte data compressed using a specific algorithm.
---
---love.data.decompress can be used to de-compress the data (or love.math.decompress in 0.10.2 or earlier).
---
---[Wiki](https://love2d.org/wiki/CompressedData)
---
---@class love.CompressedData : love.Data, love.Object
local CompressedData = {}

---Manages events, like keypresses.
---
---[Wiki](https://love2d.org/wiki/love.event)
---
---@class love.event
love.event = {}

---Provides an interface to the user's filesystem.
---
---[Wiki](https://love2d.org/wiki/love.filesystem)
---
---@class love.filesystem
love.filesystem = {}

---Represents a file dropped onto the window.
---
---Note that the DroppedFile type can only be obtained from love.filedropped callback, and can't be constructed manually by the user.
---
---[Wiki](https://love2d.org/wiki/DroppedFile)
---
---@class love.DroppedFile : love.File, love.Object
local DroppedFile = {}

---Represents a file on the filesystem. A function that takes a file path can also take a File.
---
---[Wiki](https://love2d.org/wiki/File)
---
---@class love.File : love.Object
local File = {}

---Data representing the contents of a file.
---
---[Wiki](https://love2d.org/wiki/FileData)
---
---@class love.FileData : love.Data, love.Object
local FileData = {}

---Allows you to work with fonts.
---
---[Wiki](https://love2d.org/wiki/love.font)
---
---@class love.font
love.font = {}

---A GlyphData represents a drawable symbol of a font Rasterizer.
---
---[Wiki](https://love2d.org/wiki/GlyphData)
---
---@class love.GlyphData : love.Data, love.Object
local GlyphData = {}

---A Rasterizer handles font rendering, containing the font data (image or TrueType font) and drawable glyphs.
---
---[Wiki](https://love2d.org/wiki/Rasterizer)
---
---@class love.Rasterizer : love.Object
local Rasterizer = {}

---The primary responsibility for the love.graphics module is the drawing of lines, shapes, text, Images and other Drawable objects onto the screen. Its secondary responsibilities include loading external files (including Images and Fonts) into memory, creating specialized objects (such as ParticleSystems or Canvases) and managing screen geometry.
---
---LÖVE's coordinate system is rooted in the upper-left corner of the screen, which is at location (0, 0). The x axis is horizontal: larger values are further to the right. The y axis is vertical: larger values are further towards the bottom.
---
---In many cases, you draw images or shapes in terms of their upper-left corner.
---
---Many of the functions are used to manipulate the graphics coordinate system, which is essentially the way coordinates are mapped to the display. You can change the position, scale, and even rotation in this way.
---
---[Wiki](https://love2d.org/wiki/love.graphics)
---
---@class love.graphics
love.graphics = {}

---A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as "render to texture".
---
---By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item,  you can reduce the number of draw operations performed each frame.
---
---In versions prior to love.graphics.isSupported("canvas") could be used to check for support at runtime.
---
---[Wiki](https://love2d.org/wiki/Canvas)
---
---@class love.Canvas : love.Texture, love.Drawable, love.Object
local Canvas = {}

---Superclass for all things that can be drawn on screen. This is an abstract type that can't be created directly.
---
---[Wiki](https://love2d.org/wiki/Drawable)
---
---@class love.Drawable : love.Object
local Drawable = {}

---Defines the shape of characters that can be drawn onto the screen.
---
---[Wiki](https://love2d.org/wiki/Font)
---
---@class love.Font : love.Object
local Font = {}

---Drawable image type.
---
---[Wiki](https://love2d.org/wiki/Image)
---
---@class love.Image : love.Texture, love.Drawable, love.Object
local Image = {}

---A 2D polygon mesh used for drawing arbitrary textured shapes.
---
---[Wiki](https://love2d.org/wiki/Mesh)
---
---@class love.Mesh : love.Drawable, love.Object
local Mesh = {}

---A ParticleSystem can be used to create particle effects like fire or smoke.
---
---The particle system has to be created using update it in the update callback to see any changes in the particles emitted.
---
---The particle system won't create any particles unless you call setParticleLifetime and setEmissionRate.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem)
---
---@class love.ParticleSystem : love.Drawable, love.Object
local ParticleSystem = {}

---A quadrilateral (a polygon with four sides and four corners) with texture coordinate information.
---
---Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images.
---
---[Wiki](https://love2d.org/wiki/Quad)
---
---@class love.Quad : love.Object
local Quad = {}

---A Shader is used for advanced hardware-accelerated pixel or vertex manipulation. These effects are written in a language based on GLSL (OpenGL Shading Language) with a few things simplified for easier coding.
---
---Potential uses for shaders include HDR/bloom, motion blur, grayscale/invert/sepia/any kind of color effect, reflection/refraction, distortions, bump mapping, and much more! Here is a collection of basic shaders and good starting point to learn: https://github.com/vrld/moonshine
---
---[Wiki](https://love2d.org/wiki/Shader)
---
---@class love.Shader : love.Object
local Shader = {}

---Using a single image, draw any number of identical copies of the image using a single call to love.graphics.draw(). This can be used, for example, to draw repeating copies of a single background image with high performance.
---
---A SpriteBatch can be even more useful when the underlying image is a texture atlas (a single image file containing many independent images); by adding Quads to the batch, different sub-images from within the atlas can be drawn.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch)
---
---@class love.SpriteBatch : love.Drawable, love.Object
local SpriteBatch = {}

---Drawable text.
---
---[Wiki](https://love2d.org/wiki/Text)
---
---@class love.Text : love.Drawable, love.Object
local Text = {}

---Superclass for drawable objects which represent a texture. All Textures can be drawn with Quads. This is an abstract type that can't be created directly.
---
---[Wiki](https://love2d.org/wiki/Texture)
---
---@class love.Texture : love.Drawable, love.Object
local Texture = {}

---A drawable video.
---
---[Wiki](https://love2d.org/wiki/Video)
---
---@class love.Video : love.Drawable, love.Object
local Video = {}

---Provides an interface to decode encoded image data.
---
---[Wiki](https://love2d.org/wiki/love.image)
---
---@class love.image
love.image = {}

---Represents compressed image data designed to stay compressed in RAM.
---
---CompressedImageData encompasses standard compressed texture formats such as  DXT1, DXT5, and BC5 / 3Dc.
---
---You can't draw CompressedImageData directly to the screen. See Image for that.
---
---[Wiki](https://love2d.org/wiki/CompressedImageData)
---
---@class love.CompressedImageData : love.Data, love.Object
local CompressedImageData = {}

---Raw (decoded) image data.
---
---You can't draw ImageData directly to screen. See Image for that.
---
---[Wiki](https://love2d.org/wiki/ImageData)
---
---@class love.ImageData : love.Data, love.Object
local ImageData = {}

---Provides an interface to the user's joystick.
---
---[Wiki](https://love2d.org/wiki/love.joystick)
---
---@class love.joystick
love.joystick = {}

---Represents a physical joystick.
---
---[Wiki](https://love2d.org/wiki/Joystick)
---
---@class love.Joystick : love.Object
local Joystick = {}

---Provides an interface to the user's keyboard.
---
---[Wiki](https://love2d.org/wiki/love.keyboard)
---
---@class love.keyboard
love.keyboard = {}

---Provides system-independent mathematical functions.
---
---[Wiki](https://love2d.org/wiki/love.math)
---
---@class love.math
love.math = {}

---A Bézier curve object that can evaluate and render Bézier curves of arbitrary degree.
---
---For more information on Bézier curves check this great article on Wikipedia.
---
---[Wiki](https://love2d.org/wiki/BezierCurve)
---
---@class love.BezierCurve : love.Object
local BezierCurve = {}

---A random number generation object which has its own random state.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator)
---
---@class love.RandomGenerator : love.Object
local RandomGenerator = {}

---Object containing a coordinate system transformation.
---
---The love.graphics module has several functions and function variants which accept Transform objects.
---
---[Wiki](https://love2d.org/wiki/Transform)
---
---@class love.Transform : love.Object
local Transform = {}

---Provides an interface to the user's mouse.
---
---[Wiki](https://love2d.org/wiki/love.mouse)
---
---@class love.mouse
love.mouse = {}

---Represents a hardware cursor.
---
---[Wiki](https://love2d.org/wiki/Cursor)
---
---@class love.Cursor : love.Object
local Cursor = {}

---Can simulate 2D rigid body physics in a realistic manner. This module is based on Box2D, and this API corresponds to the Box2D API as closely as possible.
---
---[Wiki](https://love2d.org/wiki/love.physics)
---
---@class love.physics
love.physics = {}

---Bodies are objects with velocity and position.
---
---[Wiki](https://love2d.org/wiki/Body)
---
---@class love.Body : love.Object
local Body = {}

---A ChainShape consists of multiple line segments. It can be used to create the boundaries of your terrain. The shape does not have volume and can only collide with PolygonShape and CircleShape.
---
---Unlike the PolygonShape, the ChainShape does not have a vertices limit or has to form a convex shape, but self intersections are not supported.
---
---[Wiki](https://love2d.org/wiki/ChainShape)
---
---@class love.ChainShape : love.Shape, love.Object
local ChainShape = {}

---Circle extends Shape and adds a radius and a local position.
---
---[Wiki](https://love2d.org/wiki/CircleShape)
---
---@class love.CircleShape : love.Shape, love.Object
local CircleShape = {}

---Contacts are objects created to manage collisions in worlds.
---
---[Wiki](https://love2d.org/wiki/Contact)
---
---@class love.Contact : love.Object
local Contact = {}

---Keeps two bodies at the same distance.
---
---[Wiki](https://love2d.org/wiki/DistanceJoint)
---
---@class love.DistanceJoint : love.Joint, love.Object
local DistanceJoint = {}

---A EdgeShape is a line segment. They can be used to create the boundaries of your terrain. The shape does not have volume and can only collide with PolygonShape and CircleShape.
---
---[Wiki](https://love2d.org/wiki/EdgeShape)
---
---@class love.EdgeShape : love.Shape, love.Object
local EdgeShape = {}

---Fixtures attach shapes to bodies.
---
---[Wiki](https://love2d.org/wiki/Fixture)
---
---@class love.Fixture : love.Object
local Fixture = {}

---A FrictionJoint applies friction to a body.
---
---[Wiki](https://love2d.org/wiki/FrictionJoint)
---
---@class love.FrictionJoint : love.Joint, love.Object
local FrictionJoint = {}

---Keeps bodies together in such a way that they act like gears.
---
---[Wiki](https://love2d.org/wiki/GearJoint)
---
---@class love.GearJoint : love.Joint, love.Object
local GearJoint = {}

---Attach multiple bodies together to interact in unique ways.
---
---[Wiki](https://love2d.org/wiki/Joint)
---
---@class love.Joint : love.Object
local Joint = {}

---Controls the relative motion between two Bodies. Position and rotation offsets can be specified, as well as the maximum motor force and torque that will be applied to reach the target offsets.
---
---[Wiki](https://love2d.org/wiki/MotorJoint)
---
---@class love.MotorJoint : love.Joint, love.Object
local MotorJoint = {}

---For controlling objects with the mouse.
---
---[Wiki](https://love2d.org/wiki/MouseJoint)
---
---@class love.MouseJoint : love.Joint, love.Object
local MouseJoint = {}

---A PolygonShape is a convex polygon with up to 8 vertices.
---
---[Wiki](https://love2d.org/wiki/PolygonShape)
---
---@class love.PolygonShape : love.Shape, love.Object
local PolygonShape = {}

---Restricts relative motion between Bodies to one shared axis.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint)
---
---@class love.PrismaticJoint : love.Joint, love.Object
local PrismaticJoint = {}

---Allows you to simulate bodies connected through pulleys.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint)
---
---@class love.PulleyJoint : love.Joint, love.Object
local PulleyJoint = {}

---Allow two Bodies to revolve around a shared point.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint)
---
---@class love.RevoluteJoint : love.Joint, love.Object
local RevoluteJoint = {}

---The RopeJoint enforces a maximum distance between two points on two bodies. It has no other effect.
---
---[Wiki](https://love2d.org/wiki/RopeJoint)
---
---@class love.RopeJoint : love.Joint, love.Object
local RopeJoint = {}

---Shapes are solid 2d geometrical objects which handle the mass and collision of a Body in love.physics.
---
---Shapes are attached to a Body via a Fixture. The Shape object is copied when this happens. 
---
---The Shape's position is relative to the position of the Body it has been attached to.
---
---[Wiki](https://love2d.org/wiki/Shape)
---
---@class love.Shape : love.Object
local Shape = {}

---A WeldJoint essentially glues two bodies together.
---
---[Wiki](https://love2d.org/wiki/WeldJoint)
---
---@class love.WeldJoint : love.Joint, love.Object
local WeldJoint = {}

---Restricts a point on the second body to a line on the first body.
---
---[Wiki](https://love2d.org/wiki/WheelJoint)
---
---@class love.WheelJoint : love.Joint, love.Object
local WheelJoint = {}

---A world is an object that contains all bodies and joints.
---
---[Wiki](https://love2d.org/wiki/World)
---
---@class love.World : love.Object
local World = {}

---This module is responsible for decoding sound files. It can't play the sounds, see love.audio for that.
---
---[Wiki](https://love2d.org/wiki/love.sound)
---
---@class love.sound
love.sound = {}

---An object which can gradually decode a sound file.
---
---[Wiki](https://love2d.org/wiki/Decoder)
---
---@class love.Decoder : love.Object
local Decoder = {}

---Contains raw audio samples.
---
---You can not play SoundData back directly. You must wrap a Source object around it.
---
---[Wiki](https://love2d.org/wiki/SoundData)
---
---@class love.SoundData : love.Data, love.Object
local SoundData = {}

---Provides access to information about the user's system.
---
---[Wiki](https://love2d.org/wiki/love.system)
---
---@class love.system
love.system = {}

---Allows you to work with threads.
---
---Threads are separate Lua environments, running in parallel to the main code. As their code runs separately, they can be used to compute complex operations without adversely affecting the frame rate of the main thread. However, as they are separate environments, they cannot access the variables and functions of the main thread, and communication between threads is limited.
---
---All LOVE objects (userdata) are shared among threads so you'll only have to send their references across threads. You may run into concurrency issues if you manipulate an object on multiple threads at the same time.
---
---When a Thread is started, it only loads the love.thread module. Every other module has to be loaded with require.
---
---[Wiki](https://love2d.org/wiki/love.thread)
---
---@class love.thread
love.thread = {}

---An object which can be used to send and receive data between different threads.
---
---[Wiki](https://love2d.org/wiki/Channel)
---
---@class love.Channel : love.Object
local Channel = {}

---A Thread is a chunk of code that can run in parallel with other threads. Data can be sent between different threads with Channel objects.
---
---[Wiki](https://love2d.org/wiki/Thread)
---
---@class love.Thread : love.Object
local Thread = {}

---Provides an interface to the user's clock.
---
---[Wiki](https://love2d.org/wiki/love.timer)
---
---@class love.timer
love.timer = {}

---Provides an interface to touch-screen presses.
---
---[Wiki](https://love2d.org/wiki/love.touch)
---
---@class love.touch
love.touch = {}

---This module is responsible for decoding, controlling, and streaming video files.
---
---It can't draw the videos, see love.graphics.newVideo and Video objects for that.
---
---[Wiki](https://love2d.org/wiki/love.video)
---
---@class love.video
love.video = {}

---An object which decodes, streams, and controls Videos.
---
---[Wiki](https://love2d.org/wiki/VideoStream)
---
---@class love.VideoStream : love.Object
local VideoStream = {}

---Provides an interface for modifying and retrieving information about the program's window.
---
---[Wiki](https://love2d.org/wiki/love.window)
---
---@class love.window
love.window = {}

---The superclass of all data.
---
---[Wiki](https://love2d.org/wiki/Data)
---
---@class love.Data : love.Object
local Data = {}

---The superclass of all LÖVE types.
---
---[Wiki](https://love2d.org/wiki/Object)
---
---@class love.Object
local Object = {}

---If a file called conf.lua is present in your game folder (or .love file), it is run before the LÖVE modules are loaded. You can use this file to overwrite the love.conf function, which is later called by the LÖVE 'boot' script. Using the love.conf function, you can set some configuration options, and change things like the default size of the window, which modules are loaded, and other stuff.
---
---[Wiki](https://love2d.org/wiki/love.conf)
---
---@alias love.conf fun(t: {
---identity : string,
---appendidentity : boolean,
---version : string,
---console : boolean,
---accelerometerjoystick : boolean,
---externalstorage : boolean,
---gammacorrect : boolean,
---audio : {
---mic : boolean,
---mixwithsystem : boolean},
---window : {
---title : string,
---icon : string,
---width : number,
---height : number,
---borderless : boolean,
---resizable : boolean,
---minwidth : number,
---minheight : number,
---fullscreen : boolean,
---fullscreentype : string,
---usedpiscale : boolean,
---vsync : number,
---depth : number,
---stencil : number,
---msaa : number,
---display : number,
---highdpi : boolean,
---x : number,
---y : number},
---modules : {
---audio : boolean,
---event : boolean,
---graphics : boolean,
---image : boolean,
---joystick : boolean,
---keyboard : boolean,
---math : boolean,
---mouse : boolean,
---physics : boolean,
---sound : boolean,
---system : boolean,
---timer : boolean,
---touch : boolean,
---video : boolean,
---window : boolean,
---thread : boolean}})

---Callback function triggered when a directory is dragged and dropped onto the window.
---
---[Wiki](https://love2d.org/wiki/love.directorydropped)
---
---@alias love.directorydropped fun(path: string)

---Called when the device display orientation changed, for example, user rotated their phone 180 degrees.
---
---[Wiki](https://love2d.org/wiki/love.displayrotated)
---
---@alias love.displayrotated fun(index: number, orientation: love.DisplayOrientation)

---Callback function used to draw on the screen every frame.
---
---[Wiki](https://love2d.org/wiki/love.draw)
---
---@alias love.draw fun()

---The error handler, used to display error messages.
---
---[Wiki](https://love2d.org/wiki/love.errorhandler)
---
---@alias love.errorhandler fun(msg: string):fun()

---Callback function triggered when a file is dragged and dropped onto the window.
---
---[Wiki](https://love2d.org/wiki/love.filedropped)
---
---@alias love.filedropped fun(file: love.DroppedFile)

---Callback function triggered when window receives or loses focus.
---
---[Wiki](https://love2d.org/wiki/love.focus)
---
---@alias love.focus fun(focus: boolean)

---Called when a Joystick's virtual gamepad axis is moved.
---
---[Wiki](https://love2d.org/wiki/love.gamepadaxis)
---
---@alias love.gamepadaxis fun(joystick: love.Joystick, axis: love.GamepadAxis, value: number)

---Called when a Joystick's virtual gamepad button is pressed.
---
---[Wiki](https://love2d.org/wiki/love.gamepadpressed)
---
---@alias love.gamepadpressed fun(joystick: love.Joystick, button: love.GamepadButton)

---Called when a Joystick's virtual gamepad button is released.
---
---[Wiki](https://love2d.org/wiki/love.gamepadreleased)
---
---@alias love.gamepadreleased fun(joystick: love.Joystick, button: love.GamepadButton)

---Called when a Joystick is connected.
---
---[Wiki](https://love2d.org/wiki/love.joystickadded)
---
---@alias love.joystickadded fun(joystick: love.Joystick)

---Called when a joystick axis moves.
---
---[Wiki](https://love2d.org/wiki/love.joystickaxis)
---
---@alias love.joystickaxis fun(joystick: love.Joystick, axis: number, value: number)

---Called when a joystick hat direction changes.
---
---[Wiki](https://love2d.org/wiki/love.joystickhat)
---
---@alias love.joystickhat fun(joystick: love.Joystick, hat: number, direction: love.JoystickHat)

---Called when a joystick button is pressed.
---
---[Wiki](https://love2d.org/wiki/love.joystickpressed)
---
---@alias love.joystickpressed fun(joystick: love.Joystick, button: number)

---Called when a joystick button is released.
---
---[Wiki](https://love2d.org/wiki/love.joystickreleased)
---
---@alias love.joystickreleased fun(joystick: love.Joystick, button: number)

---Called when a Joystick is disconnected.
---
---[Wiki](https://love2d.org/wiki/love.joystickremoved)
---
---@alias love.joystickremoved fun(joystick: love.Joystick)

---Callback function triggered when a key is pressed.
---
---[Wiki](https://love2d.org/wiki/love.keypressed)
---
---@alias love.keypressed fun(key: love.KeyConstant, scancode: love.Scancode, isrepeat: boolean)|fun(key: love.KeyConstant, isrepeat: boolean)

---Callback function triggered when a keyboard key is released.
---
---[Wiki](https://love2d.org/wiki/love.keyreleased)
---
---@alias love.keyreleased fun(key: love.KeyConstant, scancode: love.Scancode)

---This function is called exactly once at the beginning of the game.
---
---[Wiki](https://love2d.org/wiki/love.load)
---
---@alias love.load fun(arg: table, unfilteredArg: table)

---Callback function triggered when the system is running out of memory on mobile devices.
---
---Mobile operating systems may forcefully kill the game if it uses too much memory, so any non-critical resource should be removed if possible (by setting all variables referencing the resources to '''nil'''), when this event is triggered. Sounds and images in particular tend to use the most memory.
---
---[Wiki](https://love2d.org/wiki/love.lowmemory)
---
---@alias love.lowmemory fun()

---Callback function triggered when window receives or loses mouse focus.
---
---[Wiki](https://love2d.org/wiki/love.mousefocus)
---
---@alias love.mousefocus fun(focus: boolean)

---Callback function triggered when the mouse is moved.
---
---[Wiki](https://love2d.org/wiki/love.mousemoved)
---
---@alias love.mousemoved fun(x: number, y: number, dx: number, dy: number, istouch: boolean)

---Callback function triggered when a mouse button is pressed.
---
---[Wiki](https://love2d.org/wiki/love.mousepressed)
---
---@alias love.mousepressed fun(x: number, y: number, button: number, istouch: boolean, presses: number)

---Callback function triggered when a mouse button is released.
---
---[Wiki](https://love2d.org/wiki/love.mousereleased)
---
---@alias love.mousereleased fun(x: number, y: number, button: number, istouch: boolean, presses: number)

---Callback function triggered when the game is closed.
---
---[Wiki](https://love2d.org/wiki/love.quit)
---
---@alias love.quit fun():boolean

---Called when the window is resized, for example if the user resizes the window, or if love.window.setMode is called with an unsupported width or height in fullscreen and the window chooses the closest appropriate size.
---
---[Wiki](https://love2d.org/wiki/love.resize)
---
---@alias love.resize fun(w: number, h: number)

---The main function, containing the main loop. A sensible default is used when left out.
---
---[Wiki](https://love2d.org/wiki/love.run)
---
---@alias love.run fun():fun()

---Called when the candidate text for an IME (Input Method Editor) has changed.
---
---The candidate text is not the final text that the user will eventually choose. Use love.textinput for that.
---
---[Wiki](https://love2d.org/wiki/love.textedited)
---
---@alias love.textedited fun(text: string, start: number, length: number)

---Called when text has been entered by the user. For example if shift-2 is pressed on an American keyboard layout, the text '@' will be generated.
---
---[Wiki](https://love2d.org/wiki/love.textinput)
---
---@alias love.textinput fun(text: string)

---Callback function triggered when a Thread encounters an error.
---
---[Wiki](https://love2d.org/wiki/love.threaderror)
---
---@alias love.threaderror fun(thread: love.Thread, errorstr: string)

---Callback function triggered when a touch press moves inside the touch screen.
---
---[Wiki](https://love2d.org/wiki/love.touchmoved)
---
---@alias love.touchmoved fun(id: lightuserdata, x: number, y: number, dx: number, dy: number, pressure: number)

---Callback function triggered when the touch screen is touched.
---
---[Wiki](https://love2d.org/wiki/love.touchpressed)
---
---@alias love.touchpressed fun(id: lightuserdata, x: number, y: number, dx: number, dy: number, pressure: number)

---Callback function triggered when the touch screen stops being touched.
---
---[Wiki](https://love2d.org/wiki/love.touchreleased)
---
---@alias love.touchreleased fun(id: lightuserdata, x: number, y: number, dx: number, dy: number, pressure: number)

---Callback function used to update the state of the game every frame.
---
---[Wiki](https://love2d.org/wiki/love.update)
---
---@alias love.update fun(dt: number)

---Callback function triggered when window is minimized/hidden or unminimized by the user.
---
---[Wiki](https://love2d.org/wiki/love.visible)
---
---@alias love.visible fun(visible: boolean)

---Callback function triggered when the mouse wheel is moved.
---
---[Wiki](https://love2d.org/wiki/love.wheelmoved)
---
---@alias love.wheelmoved fun(x: number, y: number)

---The different distance models.
---
---Extended information can be found in the chapter "3.4. Attenuation By Distance" of the OpenAL 1.1 specification.
---
---[Wiki](https://love2d.org/wiki/DistanceModel)
---
---@alias love.DistanceModel
---Sources do not get attenuated.
---|"none"
---Inverse distance attenuation.
---|"inverse"
---Inverse distance attenuation. Gain is clamped. In version 0.9.2 and older this is named '''inverse clamped'''.
---|"inverseclamped"
---Linear attenuation.
---|"linear"
---Linear attenuation. Gain is clamped. In version 0.9.2 and older this is named '''linear clamped'''.
---|"linearclamped"
---Exponential attenuation.
---|"exponent"
---Exponential attenuation. Gain is clamped. In version 0.9.2 and older this is named '''exponent clamped'''.
---|"exponentclamped"

---The different types of effects supported by love.audio.setEffect.
---
---[Wiki](https://love2d.org/wiki/EffectType)
---
---@alias love.EffectType
---Plays multiple copies of the sound with slight pitch and time variation. Used to make sounds sound "fuller" or "thicker".
---|"chorus"
---Decreases the dynamic range of the sound, making the loud and quiet parts closer in volume, producing a more uniform amplitude throughout time.
---|"compressor"
---Alters the sound by amplifying it until it clips, shearing off parts of the signal, leading to a compressed and distorted sound.
---|"distortion"
---Decaying feedback based effect, on the order of seconds. Also known as delay; causes the sound to repeat at regular intervals at a decreasing volume.
---|"echo"
---Adjust the frequency components of the sound using a 4-band (low-shelf, two band-pass and a high-shelf) equalizer.
---|"equalizer"
---Plays two copies of the sound; while varying the phase, or equivalently delaying one of them, by amounts on the order of milliseconds, resulting in phasing sounds.
---|"flanger"
---Decaying feedback based effect, on the order of milliseconds. Used to simulate the reflection off of the surroundings.
---|"reverb"
---An implementation of amplitude modulation; multiplies the source signal with a simple waveform, to produce either volume changes, or inharmonic overtones.
---|"ringmodulator"

---The different types of waveforms that can be used with the '''ringmodulator''' EffectType.
---
---[Wiki](https://love2d.org/wiki/EffectWaveform)
---
---@alias love.EffectWaveform
---A sawtooth wave, also known as a ramp wave. Named for its linear rise, and (near-)instantaneous fall along time.
---|"sawtooth"
---A sine wave. Follows a trigonometric sine function.
---|"sine"
---A square wave. Switches between high and low states (near-)instantaneously.
---|"square"
---A triangle wave. Follows a linear rise and fall that repeats periodically.
---|"triangle"

---Types of filters for Sources.
---
---[Wiki](https://love2d.org/wiki/FilterType)
---
---@alias love.FilterType
---Low-pass filter. High frequency sounds are attenuated.
---|"lowpass"
---High-pass filter. Low frequency sounds are attenuated.
---|"highpass"
---Band-pass filter. Both high and low frequency sounds are attenuated based on the given parameters.
---|"bandpass"

---Types of audio sources.
---
---A good rule of thumb is to use stream for music files and static for all short sound effects. Basically, you want to avoid loading large files into memory at once.
---
---[Wiki](https://love2d.org/wiki/SourceType)
---
---@alias love.SourceType
---The whole audio is decoded.
---|"static"
---The audio is decoded in chunks when needed.
---|"stream"
---The audio must be manually queued by the user.
---|"queue"

---Units that represent time.
---
---[Wiki](https://love2d.org/wiki/TimeUnit)
---
---@alias love.TimeUnit
---Regular seconds.
---|"seconds"
---Audio samples.
---|"samples"

---Compressed data formats.
---
---[Wiki](https://love2d.org/wiki/CompressedDataFormat)
---
---@alias love.CompressedDataFormat
---The LZ4 compression format. Compresses and decompresses very quickly, but the compression ratio is not the best. LZ4-HC is used when compression level 9 is specified. Some benchmarks are available here.
---|"lz4"
---The zlib format is DEFLATE-compressed data with a small bit of header data. Compresses relatively slowly and decompresses moderately quickly, and has a decent compression ratio.
---|"zlib"
---The gzip format is DEFLATE-compressed data with a slightly larger header than zlib. Since it uses DEFLATE it has the same compression characteristics as the zlib format.
---|"gzip"
---Raw DEFLATE-compressed data (no header).
---|"deflate"

---Return type of various data-returning functions.
---
---[Wiki](https://love2d.org/wiki/ContainerType)
---
---@alias love.ContainerType
---Return type is ByteData.
---|"data"
---Return type is string.
---|"string"

---Encoding format used to encode or decode data.
---
---[Wiki](https://love2d.org/wiki/EncodeFormat)
---
---@alias love.EncodeFormat
---Encode/decode data as base64 binary-to-text encoding.
---|"base64"
---Encode/decode data as hexadecimal string.
---|"hex"

---Hash algorithm of love.data.hash.
---
---[Wiki](https://love2d.org/wiki/HashFunction)
---
---@alias love.HashFunction
---MD5 hash algorithm (16 bytes).
---|"md5"
---SHA1 hash algorithm (20 bytes).
---|"sha1"
---SHA2 hash algorithm with message digest size of 224 bits (28 bytes).
---|"sha224"
---SHA2 hash algorithm with message digest size of 256 bits (32 bytes).
---|"sha256"
---SHA2 hash algorithm with message digest size of 384 bits (48 bytes).
---|"sha384"
---SHA2 hash algorithm with message digest size of 512 bits (64 bytes).
---|"sha512"

---Arguments to love.event.push() and the like.
---
---Since 0.8.0, event names are no longer abbreviated.
---
---[Wiki](https://love2d.org/wiki/Event)
---
---@alias love.Event
---Window focus gained or lost
---|"focus"
---Joystick pressed
---|"joystickpressed"
---Joystick released
---|"joystickreleased"
---Key pressed
---|"keypressed"
---Key released
---|"keyreleased"
---Mouse pressed
---|"mousepressed"
---Mouse released
---|"mousereleased"
---Quit
---|"quit"
---Window size changed by the user
---|"resize"
---Window is minimized or un-minimized by the user
---|"visible"
---Window mouse focus gained or lost
---|"mousefocus"
---A Lua error has occurred in a thread
---|"threaderror"
---Joystick connected
---|"joystickadded"
---Joystick disconnected
---|"joystickremoved"
---Joystick axis motion
---|"joystickaxis"
---Joystick hat pressed
---|"joystickhat"
---Joystick's virtual gamepad button pressed
---|"gamepadpressed"
---Joystick's virtual gamepad button released
---|"gamepadreleased"
---Joystick's virtual gamepad axis moved
---|"gamepadaxis"
---User entered text
---|"textinput"
---Mouse position changed
---|"mousemoved"
---Running out of memory on mobile devices system
---|"lowmemory"
---Candidate text for an IME changed
---|"textedited"
---Mouse wheel moved
---|"wheelmoved"
---Touch screen touched
---|"touchpressed"
---Touch screen stop touching
---|"touchreleased"
---Touch press moved inside touch screen
---|"touchmoved"
---Directory is dragged and dropped onto the window
---|"directorydropped"
---File is dragged and dropped onto the window.
---|"filedropped"
---Joystick pressed
---|"jp"
---Joystick released
---|"jr"
---Key pressed
---|"kp"
---Key released
---|"kr"
---Mouse pressed
---|"mp"
---Mouse released
---|"mr"
---Quit
---|"q"
---Window focus gained or lost
---|"f"

---Buffer modes for File objects.
---
---[Wiki](https://love2d.org/wiki/BufferMode)
---
---@alias love.BufferMode
---No buffering. The result of write and append operations appears immediately.
---|"none"
---Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached.
---|"line"
---Full buffering. Write and append operations are always buffered until the buffer size limit is reached.
---|"full"

---How to decode a given FileData.
---
---[Wiki](https://love2d.org/wiki/FileDecoder)
---
---@alias love.FileDecoder
---The data is unencoded.
---|"file"
---The data is base64-encoded.
---|"base64"

---The different modes you can open a File in.
---
---[Wiki](https://love2d.org/wiki/FileMode)
---
---@alias love.FileMode
---Open a file for read.
---|"r"
---Open a file for write.
---|"w"
---Open a file for append.
---|"a"
---Do not open a file (represents a closed file.)
---|"c"

---The type of a file.
---
---[Wiki](https://love2d.org/wiki/FileType)
---
---@alias love.FileType
---Regular file.
---|"file"
---Directory.
---|"directory"
---Symbolic link.
---|"symlink"
---Something completely different like a device.
---|"other"

---True Type hinting mode.
---
---[Wiki](https://love2d.org/wiki/HintingMode)
---
---@alias love.HintingMode
---Default hinting. Should be preferred for typical antialiased fonts.
---|"normal"
---Results in fuzzier text but can sometimes preserve the original glyph shapes of the text better than normal hinting.
---|"light"
---Results in aliased / unsmoothed text with either full opacity or completely transparent pixels. Should be used when antialiasing is not desired for the font.
---|"mono"
---Disables hinting for the font. Results in fuzzier text.
---|"none"

---Text alignment.
---
---[Wiki](https://love2d.org/wiki/AlignMode)
---
---@alias love.AlignMode
---Align text center.
---|"center"
---Align text left.
---|"left"
---Align text right.
---|"right"
---Align text both left and right.
---|"justify"

---Different types of arcs that can be drawn.
---
---[Wiki](https://love2d.org/wiki/ArcType)
---
---@alias love.ArcType
---The arc is drawn like a slice of pie, with the arc circle connected to the center at its end-points.
---|"pie"
---The arc circle's two end-points are unconnected when the arc is drawn as a line. Behaves like the "closed" arc type when the arc is drawn in filled mode.
---|"open"
---The arc circle's two end-points are connected to each other.
---|"closed"

---Types of particle area spread distribution.
---
---[Wiki](https://love2d.org/wiki/AreaSpreadDistribution)
---
---@alias love.AreaSpreadDistribution
---Uniform distribution.
---|"uniform"
---Normal (gaussian) distribution.
---|"normal"
---Uniform distribution in an ellipse.
---|"ellipse"
---Distribution in an ellipse with particles spawning at the edges of the ellipse.
---|"borderellipse"
---Distribution in a rectangle with particles spawning at the edges of the rectangle.
---|"borderrectangle"
---No distribution - area spread is disabled.
---|"none"

---Different ways alpha affects color blending. See BlendMode and the BlendMode Formulas for additional notes.
---
---[Wiki](https://love2d.org/wiki/BlendAlphaMode)
---
---@alias love.BlendAlphaMode
---The RGB values of what's drawn are multiplied by the alpha values of those colors during blending. This is the default alpha mode.
---|"alphamultiply"
---The RGB values of what's drawn are '''not''' multiplied by the alpha values of those colors during blending. For most blend modes to work correctly with this alpha mode, the colors of a drawn object need to have had their RGB values multiplied by their alpha values at some point previously ("premultiplied alpha").
---|"premultiplied"

---Different ways to do color blending. See BlendAlphaMode and the BlendMode Formulas for additional notes.
---
---[Wiki](https://love2d.org/wiki/BlendMode)
---
---@alias love.BlendMode
---Alpha blending (normal). The alpha of what's drawn determines its opacity.
---|"alpha"
---The colors of what's drawn completely replace what was on the screen, with no additional blending. The BlendAlphaMode specified in love.graphics.setBlendMode still affects what happens.
---|"replace"
---'Screen' blending.
---|"screen"
---The pixel colors of what's drawn are added to the pixel colors already on the screen. The alpha of the screen is not modified.
---|"add"
---The pixel colors of what's drawn are subtracted from the pixel colors already on the screen. The alpha of the screen is not modified.
---|"subtract"
---The pixel colors of what's drawn are multiplied with the pixel colors already on the screen (darkening them). The alpha of drawn objects is multiplied with the alpha of the screen rather than determining how much the colors on the screen are affected, even when the "alphamultiply" BlendAlphaMode is used.
---|"multiply"
---The pixel colors of what's drawn are compared to the existing pixel colors, and the larger of the two values for each color component is used. Only works when the "premultiplied" BlendAlphaMode is used in love.graphics.setBlendMode.
---|"lighten"
---The pixel colors of what's drawn are compared to the existing pixel colors, and the smaller of the two values for each color component is used. Only works when the "premultiplied" BlendAlphaMode is used in love.graphics.setBlendMode.
---|"darken"
---Additive blend mode.
---|"additive"
---Subtractive blend mode.
---|"subtractive"
---Multiply blend mode.
---|"multiplicative"
---Premultiplied alpha blend mode.
---|"premultiplied"

---Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches.
---
---[Wiki](https://love2d.org/wiki/CompareMode)
---
---@alias love.CompareMode
---* stencil tests: the stencil value of the pixel must be equal to the supplied value.
---* depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel.
---|"equal"
---* stencil tests: the stencil value of the pixel must not be equal to the supplied value.
---* depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel.
---|"notequal"
---* stencil tests: the stencil value of the pixel must be less than the supplied value.
---* depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel.
---|"less"
---* stencil tests: the stencil value of the pixel must be less than or equal to the supplied value.
---* depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel.
---|"lequal"
---* stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value.
---* depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel.
---|"gequal"
---* stencil tests: the stencil value of the pixel must be greater than the supplied value.
---* depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel.
---|"greater"
---Objects will never be drawn.
---|"never"
---Objects will always be drawn. Effectively disables the depth or stencil test.
---|"always"

---How Mesh geometry is culled when rendering.
---
---[Wiki](https://love2d.org/wiki/CullMode)
---
---@alias love.CullMode
---Back-facing triangles in Meshes are culled (not rendered). The vertex order of a triangle determines whether it is back- or front-facing.
---|"back"
---Front-facing triangles in Meshes are culled.
---|"front"
---Both back- and front-facing triangles in Meshes are rendered.
---|"none"

---Controls whether shapes are drawn as an outline, or filled.
---
---[Wiki](https://love2d.org/wiki/DrawMode)
---
---@alias love.DrawMode
---Draw filled shape.
---|"fill"
---Draw outlined shape.
---|"line"

---How the image is filtered when scaling.
---
---[Wiki](https://love2d.org/wiki/FilterMode)
---
---@alias love.FilterMode
---Scale image with linear interpolation.
---|"linear"
---Scale image with nearest neighbor interpolation.
---|"nearest"

---Graphics features that can be checked for with love.graphics.getSupported.
---
---[Wiki](https://love2d.org/wiki/GraphicsFeature)
---
---@alias love.GraphicsFeature
---Whether the "clampzero" WrapMode is supported.
---|"clampzero"
---Whether the "lighten" and "darken" BlendModes are supported.
---|"lighten"
---Whether multiple formats can be used in the same love.graphics.setCanvas call.
---|"multicanvasformats"
---Whether GLSL 3 Shaders can be used.
---|"glsl3"
---Whether mesh instancing is supported.
---|"instancing"
---Whether textures with non-power-of-two dimensions can use mipmapping and the 'repeat' WrapMode.
---|"fullnpot"
---Whether pixel shaders can use "highp" 32 bit floating point numbers (as opposed to just 16 bit or lower precision).
---|"pixelshaderhighp"
---Whether shaders can use the dFdx, dFdy, and fwidth functions for computing derivatives.
---|"shaderderivatives"

---Types of system-dependent graphics limits checked for using love.graphics.getSystemLimits.
---
---[Wiki](https://love2d.org/wiki/GraphicsLimit)
---
---@alias love.GraphicsLimit
---The maximum size of points.
---|"pointsize"
---The maximum width or height of Images and Canvases.
---|"texturesize"
---The maximum number of simultaneously active canvases (via love.graphics.setCanvas.)
---|"multicanvas"
---The maximum number of antialiasing samples for a Canvas.
---|"canvasmsaa"
---The maximum number of layers in an Array texture.
---|"texturelayers"
---The maximum width, height, or depth of a Volume texture.
---|"volumetexturesize"
---The maximum width or height of a Cubemap texture.
---|"cubetexturesize"
---The maximum amount of anisotropic filtering. Texture:setMipmapFilter internally clamps the given anisotropy value to the system's limit.
---|"anisotropy"

---Vertex map datatype for Data variant of Mesh:setVertexMap.
---
---[Wiki](https://love2d.org/wiki/IndexDataType)
---
---@alias love.IndexDataType
---The vertex map is array of unsigned word (16-bit).
---|"uint16"
---The vertex map is array of unsigned dword (32-bit).
---|"uint32"

---Line join style.
---
---[Wiki](https://love2d.org/wiki/LineJoin)
---
---@alias love.LineJoin
---The ends of the line segments beveled in an angle so that they join seamlessly.
---|"miter"
---No cap applied to the ends of the line segments.
---|"none"
---Flattens the point where line segments join together.
---|"bevel"

---The styles in which lines are drawn.
---
---[Wiki](https://love2d.org/wiki/LineStyle)
---
---@alias love.LineStyle
---Draw rough lines.
---|"rough"
---Draw smooth lines.
---|"smooth"

---How a Mesh's vertices are used when drawing.
---
---[Wiki](https://love2d.org/wiki/MeshDrawMode)
---
---@alias love.MeshDrawMode
---The vertices create a "fan" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons.
---|"fan"
---The vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on.
---|"strip"
---The vertices create unconnected triangles.
---|"triangles"
---The vertices are drawn as unconnected points (see love.graphics.setPointSize.)
---|"points"

---Controls whether a Canvas has mipmaps, and its behaviour when it does.
---
---[Wiki](https://love2d.org/wiki/MipmapMode)
---
---@alias love.MipmapMode
---The Canvas has no mipmaps.
---|"none"
---The Canvas has mipmaps. love.graphics.setCanvas can be used to render to a specific mipmap level, or Canvas:generateMipmaps can (re-)compute all mipmap levels based on the base level.
---|"auto"
---The Canvas has mipmaps, and all mipmap levels will automatically be recomputed when switching away from the Canvas with love.graphics.setCanvas.
---|"manual"

---How newly created particles are added to the ParticleSystem.
---
---[Wiki](https://love2d.org/wiki/ParticleInsertMode)
---
---@alias love.ParticleInsertMode
---Particles are inserted at the top of the ParticleSystem's list of particles.
---|"top"
---Particles are inserted at the bottom of the ParticleSystem's list of particles.
---|"bottom"
---Particles are inserted at random positions in the ParticleSystem's list of particles.
---|"random"

---Usage hints for SpriteBatches and Meshes to optimize data storage and access.
---
---[Wiki](https://love2d.org/wiki/SpriteBatchUsage)
---
---@alias love.SpriteBatchUsage
---The object's data will change occasionally during its lifetime. 
---|"dynamic"
---The object will not be modified after initial sprites or vertices are added.
---|"static"
---The object data will always change between draws.
---|"stream"

---Graphics state stack types used with love.graphics.push.
---
---[Wiki](https://love2d.org/wiki/StackType)
---
---@alias love.StackType
---The transformation stack (love.graphics.translate, love.graphics.rotate, etc.)
---|"transform"
---All love.graphics state, including transform state.
---|"all"

---How a stencil function modifies the stencil values of pixels it touches.
---
---[Wiki](https://love2d.org/wiki/StencilAction)
---
---@alias love.StencilAction
---The stencil value of a pixel will be replaced by the value specified in love.graphics.stencil, if any object touches the pixel.
---|"replace"
---The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If the stencil value reaches 255 it will stay at 255.
---|"increment"
---The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value reaches 0 it will stay at 0.
---|"decrement"
---The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If a stencil value of 255 is incremented it will be set to 0.
---|"incrementwrap"
---The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value of 0 is decremented it will be set to 255.
---|"decrementwrap"
---The stencil value of a pixel will be bitwise-inverted for each object that touches the pixel. If a stencil value of 0 is inverted it will become 255.
---|"invert"

---Types of textures (2D, cubemap, etc.)
---
---[Wiki](https://love2d.org/wiki/TextureType)
---
---@alias love.TextureType
---Regular 2D texture with width and height.
---|"2d"
---Several same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues.
---|"array"
---Cubemap texture with 6 faces. Requires a custom shader (and Shader:send) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate.
---|"cube"
---3D texture with width, height, and depth. Requires a custom shader to use. Volume textures can have texture filtering applied along the 3rd axis.
---|"volume"

---The frequency at which a vertex shader fetches the vertex attribute's data from the Mesh when it's drawn.
---
---Per-instance attributes can be used to render a Mesh many times with different positions, colors, or other attributes via a single love.graphics.drawInstanced call, without using the love_InstanceID vertex shader variable.
---
---[Wiki](https://love2d.org/wiki/VertexAttributeStep)
---
---@alias love.VertexAttributeStep
---The vertex attribute will have a unique value for each vertex in the Mesh.
---|"pervertex"
---The vertex attribute will have a unique value for each instance of the Mesh.
---|"perinstance"

---How Mesh geometry vertices are ordered.
---
---[Wiki](https://love2d.org/wiki/VertexWinding)
---
---@alias love.VertexWinding
---Clockwise.
---|"cw"
---Counter-clockwise.
---|"ccw"

---How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1.
---
---[Wiki](https://love2d.org/wiki/WrapMode)
---
---@alias love.WrapMode
---Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture.
---|"clamp"
---Repeat the texture. Fills the whole available extent.
---|"repeat"
---Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile.
---|"mirroredrepeat"
---Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)
---|"clampzero"

---Compressed image data formats. Here and here are a couple overviews of many of the formats.
---
---Unlike traditional PNG or jpeg, these formats stay compressed in RAM and in the graphics card's VRAM. This is good for saving memory space as well as improving performance, since the graphics card will be able to keep more of the image's pixels in its fast-access cache when drawing it.
---
---[Wiki](https://love2d.org/wiki/CompressedImageFormat)
---
---@alias love.CompressedImageFormat
---The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems.
---|"DXT1"
---The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format.
---|"DXT3"
---The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems.
---|"DXT5"
---The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel.
---|"BC4"
---The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
---|"BC4s"
---The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel.
---|"BC5"
---The signed variant of the BC5 format.
---|"BC5s"
---The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems.
---|"BC6h"
---The signed variant of the BC6H format. Stores RGB data in the range of +65504.
---|"BC6hs"
---The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel.
---|"BC7"
---The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices.
---|"ETC1"
---The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices.
---|"ETC2rgb"
---The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices.
---|"ETC2rgba"
---The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel.
---|"ETC2rgba1"
---The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel.
---|"EACr"
---The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
---|"EACrs"
---The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel.
---|"EACrg"
---The signed two-channel variant of the EAC format.
---|"EACrgs"
---The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized.
---|"PVR1rgb2"
---The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel.
---|"PVR1rgb4"
---The 2 bit per pixel RGBA variant of the PVRTC1 format.
---|"PVR1rgba2"
---The 4 bit per pixel RGBA variant of the PVRTC1 format.
---|"PVR1rgba4"
---The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel.
---|"ASTC4x4"
---The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel.
---|"ASTC5x4"
---The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel.
---|"ASTC5x5"
---The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel.
---|"ASTC6x5"
---The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel.
---|"ASTC6x6"
---The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel.
---|"ASTC8x5"
---The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel.
---|"ASTC8x6"
---The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel.
---|"ASTC8x8"
---The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel.
---|"ASTC10x5"
---The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel.
---|"ASTC10x6"
---The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel.
---|"ASTC10x8"
---The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel.
---|"ASTC10x10"
---The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel.
---|"ASTC12x10"
---The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.
---|"ASTC12x12"

---Encoded image formats.
---
---[Wiki](https://love2d.org/wiki/ImageFormat)
---
---@alias love.ImageFormat
---Targa image format.
---|"tga"
---PNG image format.
---|"png"
---JPG image format.
---|"jpg"
---BMP image format.
---|"bmp"

---Pixel formats for Textures, ImageData, and CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/PixelFormat)
---
---@alias love.PixelFormat
---Indicates unknown pixel format, used internally.
---|"unknown"
---Alias for rgba8, or srgba8 if gamma-correct rendering is enabled.
---|"normal"
---A format suitable for high dynamic range content - an alias for the rgba16f format, normally.
---|"hdr"
---Single-channel (red component) format (8 bpp).
---|"r8"
---Two channels (red and green components) with 8 bits per channel (16 bpp).
---|"rg8"
---8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders).
---|"rgba8"
---gamma-correct version of rgba8.
---|"srgba8"
---Single-channel (red component) format (16 bpp).
---|"r16"
---Two channels (red and green components) with 16 bits per channel (32 bpp).
---|"rg16"
---16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders).
---|"rgba16"
---Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504].
---|"r16f"
---Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504].
---|"rg16f"
---Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504].
---|"rgba16f"
---Floating point single-channel format (32 bpp).
---|"r32f"
---Floating point two-channel format with 32 bits per channel (64 bpp).
---|"rg32f"
---Floating point RGBA with 32 bits per channel (128 bpp).
---|"rgba32f"
---Same as rg8, but accessed as (L, L, L, A)
---|"la8"
---4 bits per channel (16 bpp) RGBA.
---|"rgba4"
---RGB with 5 bits each, and a 1-bit alpha channel (16 bpp).
---|"rgb5a1"
---RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format.
---|"rgb565"
---RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp).
---|"rgb10a2"
---Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024].
---|"rg11b10f"
---No depth buffer and 8-bit stencil buffer.
---|"stencil8"
---16-bit depth buffer and no stencil buffer.
---|"depth16"
---24-bit depth buffer and no stencil buffer.
---|"depth24"
---32-bit float depth buffer and no stencil buffer.
---|"depth32f"
---24-bit depth buffer and 8-bit stencil buffer.
---|"depth24stencil8"
---32-bit float depth buffer and 8-bit stencil buffer.
---|"depth32fstencil8"
---The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems.
---|"DXT1"
---The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format.
---|"DXT3"
---The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems.
---|"DXT5"
---The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel.
---|"BC4"
---The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
---|"BC4s"
---The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel.
---|"BC5"
---The signed variant of the BC5 format.
---|"BC5s"
---The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems.
---|"BC6h"
---The signed variant of the BC6H format. Stores RGB data in the range of +65504.
---|"BC6hs"
---The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel.
---|"BC7"
---The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices.
---|"ETC1"
---The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices.
---|"ETC2rgb"
---The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices.
---|"ETC2rgba"
---The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel.
---|"ETC2rgba1"
---The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel.
---|"EACr"
---The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.
---|"EACrs"
---The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel.
---|"EACrg"
---The signed two-channel variant of the EAC format.
---|"EACrgs"
---The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized.
---|"PVR1rgb2"
---The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel.
---|"PVR1rgb4"
---The 2 bit per pixel RGBA variant of the PVRTC1 format.
---|"PVR1rgba2"
---The 4 bit per pixel RGBA variant of the PVRTC1 format.
---|"PVR1rgba4"
---The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel.
---|"ASTC4x4"
---The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel.
---|"ASTC5x4"
---The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel.
---|"ASTC5x5"
---The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel.
---|"ASTC6x5"
---The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel.
---|"ASTC6x6"
---The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel.
---|"ASTC8x5"
---The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel.
---|"ASTC8x6"
---The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel.
---|"ASTC8x8"
---The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel.
---|"ASTC10x5"
---The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel.
---|"ASTC10x6"
---The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel.
---|"ASTC10x8"
---The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel.
---|"ASTC10x10"
---The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel.
---|"ASTC12x10"
---The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.
---|"ASTC12x12"

---Virtual gamepad axes.
---
---[Wiki](https://love2d.org/wiki/GamepadAxis)
---
---@alias love.GamepadAxis
---The x-axis of the left thumbstick.
---|"leftx"
---The y-axis of the left thumbstick.
---|"lefty"
---The x-axis of the right thumbstick.
---|"rightx"
---The y-axis of the right thumbstick.
---|"righty"
---Left analog trigger.
---|"triggerleft"
---Right analog trigger.
---|"triggerright"

---Virtual gamepad buttons.
---
---[Wiki](https://love2d.org/wiki/GamepadButton)
---
---@alias love.GamepadButton
---Bottom face button (A).
---|"a"
---Right face button (B).
---|"b"
---Left face button (X).
---|"x"
---Top face button (Y).
---|"y"
---Back button.
---|"back"
---Guide button.
---|"guide"
---Start button.
---|"start"
---Left stick click button.
---|"leftstick"
---Right stick click button.
---|"rightstick"
---Left bumper.
---|"leftshoulder"
---Right bumper.
---|"rightshoulder"
---D-pad up.
---|"dpup"
---D-pad down.
---|"dpdown"
---D-pad left.
---|"dpleft"
---D-pad right.
---|"dpright"

---Joystick hat positions.
---
---[Wiki](https://love2d.org/wiki/JoystickHat)
---
---@alias love.JoystickHat
---Centered
---|"c"
---Down
---|"d"
---Left
---|"l"
---Left+Down
---|"ld"
---Left+Up
---|"lu"
---Right
---|"r"
---Right+Down
---|"rd"
---Right+Up
---|"ru"
---Up
---|"u"

---Types of Joystick inputs.
---
---[Wiki](https://love2d.org/wiki/JoystickInputType)
---
---@alias love.JoystickInputType
---Analog axis.
---|"axis"
---Button.
---|"button"
---8-direction hat value.
---|"hat"

---All the keys you can press. Note that some keys may not be available on your keyboard or system.
---
---[Wiki](https://love2d.org/wiki/KeyConstant)
---
---@alias love.KeyConstant
---The A key
---|"a"
---The B key
---|"b"
---The C key
---|"c"
---The D key
---|"d"
---The E key
---|"e"
---The F key
---|"f"
---The G key
---|"g"
---The H key
---|"h"
---The I key
---|"i"
---The J key
---|"j"
---The K key
---|"k"
---The L key
---|"l"
---The M key
---|"m"
---The N key
---|"n"
---The O key
---|"o"
---The P key
---|"p"
---The Q key
---|"q"
---The R key
---|"r"
---The S key
---|"s"
---The T key
---|"t"
---The U key
---|"u"
---The V key
---|"v"
---The W key
---|"w"
---The X key
---|"x"
---The Y key
---|"y"
---The Z key
---|"z"
---The zero key
---|"0"
---The one key
---|"1"
---The two key
---|"2"
---The three key
---|"3"
---The four key
---|"4"
---The five key
---|"5"
---The six key
---|"6"
---The seven key
---|"7"
---The eight key
---|"8"
---The nine key
---|"9"
---Space key
---|"space"
---Exclamation mark key
---|"!"
---Double quote key
---|"""
---Hash key
---|"#"
---Dollar key
---|"$"
---Ampersand key
---|"&"
---Single quote key
---|"'"
---Left parenthesis key
---|"("
---Right parenthesis key
---|")"
---Asterisk key
---|"*"
---Plus key
---|"+"
---Comma key
---|","
---Hyphen-minus key
---|"-"
---Full stop key
---|"."
---Slash key
---|"/"
---Colon key
---|":"
---Semicolon key
---|";"
---Less-than key
---|"<"
---Equal key
---|"="
---Greater-than key
---|">"
---Question mark key
---|"?"
---At sign key
---|"@"
---Left square bracket key
---|"["
---Backslash key
---|"\"
---Right square bracket key
---|"]"
---Caret key
---|"^"
---Underscore key
---|"_"
---Grave accent key
---|"`"
---The numpad zero key
---|"kp0"
---The numpad one key
---|"kp1"
---The numpad two key
---|"kp2"
---The numpad three key
---|"kp3"
---The numpad four key
---|"kp4"
---The numpad five key
---|"kp5"
---The numpad six key
---|"kp6"
---The numpad seven key
---|"kp7"
---The numpad eight key
---|"kp8"
---The numpad nine key
---|"kp9"
---The numpad decimal point key
---|"kp."
---The numpad division key
---|"kp/"
---The numpad multiplication key
---|"kp*"
---The numpad substraction key
---|"kp-"
---The numpad addition key
---|"kp+"
---The numpad enter key
---|"kpenter"
---The numpad equals key
---|"kp="
---Up cursor key
---|"up"
---Down cursor key
---|"down"
---Right cursor key
---|"right"
---Left cursor key
---|"left"
---Home key
---|"home"
---End key
---|"end"
---Page up key
---|"pageup"
---Page down key
---|"pagedown"
---Insert key
---|"insert"
---Backspace key
---|"backspace"
---Tab key
---|"tab"
---Clear key
---|"clear"
---Return key
---|"return"
---Delete key
---|"delete"
---The 1st function key
---|"f1"
---The 2nd function key
---|"f2"
---The 3rd function key
---|"f3"
---The 4th function key
---|"f4"
---The 5th function key
---|"f5"
---The 6th function key
---|"f6"
---The 7th function key
---|"f7"
---The 8th function key
---|"f8"
---The 9th function key
---|"f9"
---The 10th function key
---|"f10"
---The 11th function key
---|"f11"
---The 12th function key
---|"f12"
---The 13th function key
---|"f13"
---The 14th function key
---|"f14"
---The 15th function key
---|"f15"
---Num-lock key
---|"numlock"
---Caps-lock key
---|"capslock"
---Scroll-lock key
---|"scrollock"
---Right shift key
---|"rshift"
---Left shift key
---|"lshift"
---Right control key
---|"rctrl"
---Left control key
---|"lctrl"
---Right alt key
---|"ralt"
---Left alt key
---|"lalt"
---Right meta key
---|"rmeta"
---Left meta key
---|"lmeta"
---Left super key
---|"lsuper"
---Right super key
---|"rsuper"
---Mode key
---|"mode"
---Compose key
---|"compose"
---Pause key
---|"pause"
---Escape key
---|"escape"
---Help key
---|"help"
---Print key
---|"print"
---System request key
---|"sysreq"
---Break key
---|"break"
---Menu key
---|"menu"
---Power key
---|"power"
---Euro (&euro;) key
---|"euro"
---Undo key
---|"undo"
---WWW key
---|"www"
---Mail key
---|"mail"
---Calculator key
---|"calculator"
---Application search key
---|"appsearch"
---Application home key
---|"apphome"
---Application back key
---|"appback"
---Application forward key
---|"appforward"
---Application refresh key
---|"apprefresh"
---Application bookmarks key
---|"appbookmarks"

---Keyboard scancodes.
---
---Scancodes are keyboard layout-independent, so the scancode "w" will be generated if the key in the same place as the "w" key on an American QWERTY keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.
---
---Using scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support.
---
---One could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated.
---
---[Wiki](https://love2d.org/wiki/Scancode)
---
---@alias love.Scancode
---The 'A' key on an American layout.
---|"a"
---The 'B' key on an American layout.
---|"b"
---The 'C' key on an American layout.
---|"c"
---The 'D' key on an American layout.
---|"d"
---The 'E' key on an American layout.
---|"e"
---The 'F' key on an American layout.
---|"f"
---The 'G' key on an American layout.
---|"g"
---The 'H' key on an American layout.
---|"h"
---The 'I' key on an American layout.
---|"i"
---The 'J' key on an American layout.
---|"j"
---The 'K' key on an American layout.
---|"k"
---The 'L' key on an American layout.
---|"l"
---The 'M' key on an American layout.
---|"m"
---The 'N' key on an American layout.
---|"n"
---The 'O' key on an American layout.
---|"o"
---The 'P' key on an American layout.
---|"p"
---The 'Q' key on an American layout.
---|"q"
---The 'R' key on an American layout.
---|"r"
---The 'S' key on an American layout.
---|"s"
---The 'T' key on an American layout.
---|"t"
---The 'U' key on an American layout.
---|"u"
---The 'V' key on an American layout.
---|"v"
---The 'W' key on an American layout.
---|"w"
---The 'X' key on an American layout.
---|"x"
---The 'Y' key on an American layout.
---|"y"
---The 'Z' key on an American layout.
---|"z"
---The '1' key on an American layout.
---|"1"
---The '2' key on an American layout.
---|"2"
---The '3' key on an American layout.
---|"3"
---The '4' key on an American layout.
---|"4"
---The '5' key on an American layout.
---|"5"
---The '6' key on an American layout.
---|"6"
---The '7' key on an American layout.
---|"7"
---The '8' key on an American layout.
---|"8"
---The '9' key on an American layout.
---|"9"
---The '0' key on an American layout.
---|"0"
---The 'return' / 'enter' key on an American layout.
---|"return"
---The 'escape' key on an American layout.
---|"escape"
---The 'backspace' key on an American layout.
---|"backspace"
---The 'tab' key on an American layout.
---|"tab"
---The spacebar on an American layout.
---|"space"
---The minus key on an American layout.
---|"-"
---The equals key on an American layout.
---|"="
---The left-bracket key on an American layout.
---|"["
---The right-bracket key on an American layout.
---|"]"
---The backslash key on an American layout.
---|"\"
---The non-U.S. hash scancode.
---|"nonus#"
---The semicolon key on an American layout.
---|";"
---The apostrophe key on an American layout.
---|"'"
---The back-tick / grave key on an American layout.
---|"`"
---The comma key on an American layout.
---|","
---The period key on an American layout.
---|"."
---The forward-slash key on an American layout.
---|"/"
---The capslock key on an American layout.
---|"capslock"
---The F1 key on an American layout.
---|"f1"
---The F2 key on an American layout.
---|"f2"
---The F3 key on an American layout.
---|"f3"
---The F4 key on an American layout.
---|"f4"
---The F5 key on an American layout.
---|"f5"
---The F6 key on an American layout.
---|"f6"
---The F7 key on an American layout.
---|"f7"
---The F8 key on an American layout.
---|"f8"
---The F9 key on an American layout.
---|"f9"
---The F10 key on an American layout.
---|"f10"
---The F11 key on an American layout.
---|"f11"
---The F12 key on an American layout.
---|"f12"
---The F13 key on an American layout.
---|"f13"
---The F14 key on an American layout.
---|"f14"
---The F15 key on an American layout.
---|"f15"
---The F16 key on an American layout.
---|"f16"
---The F17 key on an American layout.
---|"f17"
---The F18 key on an American layout.
---|"f18"
---The F19 key on an American layout.
---|"f19"
---The F20 key on an American layout.
---|"f20"
---The F21 key on an American layout.
---|"f21"
---The F22 key on an American layout.
---|"f22"
---The F23 key on an American layout.
---|"f23"
---The F24 key on an American layout.
---|"f24"
---The left control key on an American layout.
---|"lctrl"
---The left shift key on an American layout.
---|"lshift"
---The left alt / option key on an American layout.
---|"lalt"
---The left GUI (command / windows / super) key on an American layout.
---|"lgui"
---The right control key on an American layout.
---|"rctrl"
---The right shift key on an American layout.
---|"rshift"
---The right alt / option key on an American layout.
---|"ralt"
---The right GUI (command / windows / super) key on an American layout.
---|"rgui"
---The printscreen key on an American layout.
---|"printscreen"
---The scroll-lock key on an American layout.
---|"scrolllock"
---The pause key on an American layout.
---|"pause"
---The insert key on an American layout.
---|"insert"
---The home key on an American layout.
---|"home"
---The numlock / clear key on an American layout.
---|"numlock"
---The page-up key on an American layout.
---|"pageup"
---The forward-delete key on an American layout.
---|"delete"
---The end key on an American layout.
---|"end"
---The page-down key on an American layout.
---|"pagedown"
---The right-arrow key on an American layout.
---|"right"
---The left-arrow key on an American layout.
---|"left"
---The down-arrow key on an American layout.
---|"down"
---The up-arrow key on an American layout.
---|"up"
---The non-U.S. backslash scancode.
---|"nonusbackslash"
---The application key on an American layout. Windows contextual menu, compose key.
---|"application"
---The 'execute' key on an American layout.
---|"execute"
---The 'help' key on an American layout.
---|"help"
---The 'menu' key on an American layout.
---|"menu"
---The 'select' key on an American layout.
---|"select"
---The 'stop' key on an American layout.
---|"stop"
---The 'again' key on an American layout.
---|"again"
---The 'undo' key on an American layout.
---|"undo"
---The 'cut' key on an American layout.
---|"cut"
---The 'copy' key on an American layout.
---|"copy"
---The 'paste' key on an American layout.
---|"paste"
---The 'find' key on an American layout.
---|"find"
---The keypad forward-slash key on an American layout.
---|"kp/"
---The keypad '*' key on an American layout.
---|"kp*"
---The keypad minus key on an American layout.
---|"kp-"
---The keypad plus key on an American layout.
---|"kp+"
---The keypad equals key on an American layout.
---|"kp="
---The keypad enter key on an American layout.
---|"kpenter"
---The keypad '1' key on an American layout.
---|"kp1"
---The keypad '2' key on an American layout.
---|"kp2"
---The keypad '3' key on an American layout.
---|"kp3"
---The keypad '4' key on an American layout.
---|"kp4"
---The keypad '5' key on an American layout.
---|"kp5"
---The keypad '6' key on an American layout.
---|"kp6"
---The keypad '7' key on an American layout.
---|"kp7"
---The keypad '8' key on an American layout.
---|"kp8"
---The keypad '9' key on an American layout.
---|"kp9"
---The keypad '0' key on an American layout.
---|"kp0"
---The keypad period key on an American layout.
---|"kp."
---The 1st international key on an American layout. Used on Asian keyboards.
---|"international1"
---The 2nd international key on an American layout.
---|"international2"
---The 3rd international  key on an American layout. Yen.
---|"international3"
---The 4th international key on an American layout.
---|"international4"
---The 5th international key on an American layout.
---|"international5"
---The 6th international key on an American layout.
---|"international6"
---The 7th international key on an American layout.
---|"international7"
---The 8th international key on an American layout.
---|"international8"
---The 9th international key on an American layout.
---|"international9"
---Hangul/English toggle scancode.
---|"lang1"
---Hanja conversion scancode.
---|"lang2"
---Katakana scancode.
---|"lang3"
---Hiragana scancode.
---|"lang4"
---Zenkaku/Hankaku scancode.
---|"lang5"
---The mute key on an American layout.
---|"mute"
---The volume up key on an American layout.
---|"volumeup"
---The volume down key on an American layout.
---|"volumedown"
---The audio next track key on an American layout.
---|"audionext"
---The audio previous track key on an American layout.
---|"audioprev"
---The audio stop key on an American layout.
---|"audiostop"
---The audio play key on an American layout.
---|"audioplay"
---The audio mute key on an American layout.
---|"audiomute"
---The media select key on an American layout.
---|"mediaselect"
---The 'WWW' key on an American layout.
---|"www"
---The Mail key on an American layout.
---|"mail"
---The calculator key on an American layout.
---|"calculator"
---The 'computer' key on an American layout.
---|"computer"
---The AC Search key on an American layout.
---|"acsearch"
---The AC Home key on an American layout.
---|"achome"
---The AC Back key on an American layout.
---|"acback"
---The AC Forward key on an American layout.
---|"acforward"
---Th AC Stop key on an American layout.
---|"acstop"
---The AC Refresh key on an American layout.
---|"acrefresh"
---The AC Bookmarks key on an American layout.
---|"acbookmarks"
---The system power scancode.
---|"power"
---The brightness-down scancode.
---|"brightnessdown"
---The brightness-up scancode.
---|"brightnessup"
---The display switch scancode.
---|"displayswitch"
---The keyboard illumination toggle scancode.
---|"kbdillumtoggle"
---The keyboard illumination down scancode.
---|"kbdillumdown"
---The keyboard illumination up scancode.
---|"kbdillumup"
---The eject scancode.
---|"eject"
---The system sleep scancode.
---|"sleep"
---The alt-erase key on an American layout.
---|"alterase"
---The sysreq key on an American layout.
---|"sysreq"
---The 'cancel' key on an American layout.
---|"cancel"
---The 'clear' key on an American layout.
---|"clear"
---The 'prior' key on an American layout.
---|"prior"
---The 'return2' key on an American layout.
---|"return2"
---The 'separator' key on an American layout.
---|"separator"
---The 'out' key on an American layout.
---|"out"
---The 'oper' key on an American layout.
---|"oper"
---The 'clearagain' key on an American layout.
---|"clearagain"
---The 'crsel' key on an American layout.
---|"crsel"
---The 'exsel' key on an American layout.
---|"exsel"
---The keypad 00 key on an American layout.
---|"kp00"
---The keypad 000 key on an American layout.
---|"kp000"
---The thousands-separator key on an American layout.
---|"thsousandsseparator"
---The decimal separator key on an American layout.
---|"decimalseparator"
---The currency unit key on an American layout.
---|"currencyunit"
---The currency sub-unit key on an American layout.
---|"currencysubunit"
---The 'app1' scancode.
---|"app1"
---The 'app2' scancode.
---|"app2"
---An unknown key.
---|"unknown"

---The layout of matrix elements (row-major or column-major).
---
---[Wiki](https://love2d.org/wiki/MatrixLayout)
---
---@alias love.MatrixLayout
---The matrix is row-major:
---|"row"
---The matrix is column-major:
---|"column"

---Types of hardware cursors.
---
---[Wiki](https://love2d.org/wiki/CursorType)
---
---@alias love.CursorType
---The cursor is using a custom image.
---|"image"
---An arrow pointer.
---|"arrow"
---An I-beam, normally used when mousing over editable or selectable text.
---|"ibeam"
---Wait graphic.
---|"wait"
---Small wait cursor with an arrow pointer.
---|"waitarrow"
---Crosshair symbol.
---|"crosshair"
---Double arrow pointing to the top-left and bottom-right.
---|"sizenwse"
---Double arrow pointing to the top-right and bottom-left.
---|"sizenesw"
---Double arrow pointing left and right.
---|"sizewe"
---Double arrow pointing up and down.
---|"sizens"
---Four-pointed arrow pointing up, down, left, and right.
---|"sizeall"
---Slashed circle or crossbones.
---|"no"
---Hand symbol.
---|"hand"

---The types of a Body. 
---
---[Wiki](https://love2d.org/wiki/BodyType)
---
---@alias love.BodyType
---Static bodies do not move.
---|"static"
---Dynamic bodies collide with all bodies.
---|"dynamic"
---Kinematic bodies only collide with dynamic bodies.
---|"kinematic"

---Different types of joints.
---
---[Wiki](https://love2d.org/wiki/JointType)
---
---@alias love.JointType
---A DistanceJoint.
---|"distance"
---A FrictionJoint.
---|"friction"
---A GearJoint.
---|"gear"
---A MouseJoint.
---|"mouse"
---A PrismaticJoint.
---|"prismatic"
---A PulleyJoint.
---|"pulley"
---A RevoluteJoint.
---|"revolute"
---A RopeJoint.
---|"rope"
---A WeldJoint.
---|"weld"

---The different types of Shapes, as returned by Shape:getType.
---
---[Wiki](https://love2d.org/wiki/ShapeType)
---
---@alias love.ShapeType
---The Shape is a CircleShape.
---|"circle"
---The Shape is a PolygonShape.
---|"polygon"
---The Shape is a EdgeShape.
---|"edge"
---The Shape is a ChainShape.
---|"chain"

---The basic state of the system's power supply.
---
---[Wiki](https://love2d.org/wiki/PowerState)
---
---@alias love.PowerState
---Cannot determine power status.
---|"unknown"
---Not plugged in, running on a battery.
---|"battery"
---Plugged in, no battery available.
---|"nobattery"
---Plugged in, charging battery.
---|"charging"
---Plugged in, battery is fully charged.
---|"charged"

---Types of device display orientation.
---
---[Wiki](https://love2d.org/wiki/DisplayOrientation)
---
---@alias love.DisplayOrientation
---Orientation cannot be determined.
---|"unknown"
---Landscape orientation.
---|"landscape"
---Landscape orientation (flipped).
---|"landscapeflipped"
---Portrait orientation.
---|"portrait"
---Portrait orientation (flipped).
---|"portraitflipped"

---Types of fullscreen modes.
---
---[Wiki](https://love2d.org/wiki/FullscreenType)
---
---@alias love.FullscreenType
---Sometimes known as borderless fullscreen windowed mode. A borderless screen-sized window is created which sits on top of all desktop UI elements. The window is automatically resized to match the dimensions of the desktop, and its size cannot be changed.
---|"desktop"
---Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor.
---|"exclusive"
---Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor.
---|"normal"

---Types of message box dialogs. Different types may have slightly different looks.
---
---[Wiki](https://love2d.org/wiki/MessageBoxType)
---
---@alias love.MessageBoxType
---Informational dialog.
---|"info"
---Warning dialog.
---|"warning"
---Error dialog.
---|"error"

---Gets the number of bits per sample in the data currently being recorded.
---
---[Wiki](https://love2d.org/wiki/RecordingDevice:getBitDepth)
---
---@diagnostic disable-next-line: args-after-dots
function RecordingDevice:getBitDepth() end

---Gets the number of channels currently being recorded (mono or stereo).
---
---[Wiki](https://love2d.org/wiki/RecordingDevice:getChannelCount)
---
---@diagnostic disable-next-line: args-after-dots
function RecordingDevice:getChannelCount() end

---Gets all recorded audio SoundData stored in the device's internal ring buffer.
---
---The internal ring buffer is cleared when this function is called, so calling it again will only get audio recorded after the previous call. If the device's internal ring buffer completely fills up before getData is called, the oldest data that doesn't fit into the buffer will be lost.
---
---[Wiki](https://love2d.org/wiki/RecordingDevice:getData)
---
---@diagnostic disable-next-line: args-after-dots
function RecordingDevice:getData() end

---Gets the name of the recording device.
---
---[Wiki](https://love2d.org/wiki/RecordingDevice:getName)
---
---@diagnostic disable-next-line: args-after-dots
function RecordingDevice:getName() end

---Gets the number of currently recorded samples.
---
---[Wiki](https://love2d.org/wiki/RecordingDevice:getSampleCount)
---
---@diagnostic disable-next-line: args-after-dots
function RecordingDevice:getSampleCount() end

---Gets the number of samples per second currently being recorded.
---
---[Wiki](https://love2d.org/wiki/RecordingDevice:getSampleRate)
---
---@diagnostic disable-next-line: args-after-dots
function RecordingDevice:getSampleRate() end

---Gets whether the device is currently recording.
---
---[Wiki](https://love2d.org/wiki/RecordingDevice:isRecording)
---
---@diagnostic disable-next-line: args-after-dots
function RecordingDevice:isRecording() end

---Begins recording audio using this device.
---
---[Wiki](https://love2d.org/wiki/RecordingDevice:start)
---
---@param samplecount number# The maximum number of samples to store in an internal ring buffer when recording. RecordingDevice:getData clears the internal buffer when called.
---@param samplerate? number# (8000) The number of samples per second to store when recording.
---@param bitdepth? number# (16) The number of bits per sample.
---@param channels? number# (1) Whether to record in mono or stereo. Most microphones don't support more than 1 channel.
---@diagnostic disable-next-line: args-after-dots
function RecordingDevice:start(samplecount, samplerate, bitdepth, channels) end

---Stops recording audio from this device. Any sound data currently in the device's buffer will be returned.
---
---[Wiki](https://love2d.org/wiki/RecordingDevice:stop)
---
---@diagnostic disable-next-line: args-after-dots
function RecordingDevice:stop() end

---Creates an identical copy of the Source in the stopped state.
---
---Static Sources will use significantly less memory and take much less time to be created if Source:clone is used to create them instead of love.audio.newSource, so this method should be preferred when making multiple Sources which play the same sound.
---
---[Wiki](https://love2d.org/wiki/Source:clone)
---
---@diagnostic disable-next-line: args-after-dots
function Source:clone() end

---Gets a list of the Source's active effect names.
---
---[Wiki](https://love2d.org/wiki/Source:getActiveEffects)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getActiveEffects() end

---Gets the amount of air absorption applied to the Source.
---
---By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.
---
---[Wiki](https://love2d.org/wiki/Source:getAirAbsorption)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getAirAbsorption() end

---Gets the reference and maximum attenuation distances of the Source. The values, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance from the listener.
---
---[Wiki](https://love2d.org/wiki/Source:getAttenuationDistances)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getAttenuationDistances() end

---Gets the number of channels in the Source. Only 1-channel (mono) Sources can use directional and positional effects.
---
---[Wiki](https://love2d.org/wiki/Source:getChannelCount)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getChannelCount() end

---Gets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction.
---
---[Wiki](https://love2d.org/wiki/Source:getCone)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getCone() end

---Gets the direction of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:getDirection)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getDirection() end

---Gets the duration of the Source. For streaming Sources it may not always be sample-accurate, and may return -1 if the duration cannot be determined at all.
---
---[Wiki](https://love2d.org/wiki/Source:getDuration)
---
---@param unit? love.TimeUnit# ('seconds') The time unit for the return value.
---@diagnostic disable-next-line: args-after-dots
function Source:getDuration(unit) end

---Gets the filter settings associated to a specific effect.
---
---This function returns nil if the effect was applied with no filter settings associated to it.
---
---[Wiki](https://love2d.org/wiki/Source:getEffect)
---
---@param name string# The name of the effect.
---@param filtersettings? table# ({}) An optional empty table that will be filled with the filter settings.
---@diagnostic disable-next-line: args-after-dots
function Source:getEffect(name, filtersettings) end

---Gets the filter settings currently applied to the Source.
---
---[Wiki](https://love2d.org/wiki/Source:getFilter)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getFilter() end

---Gets the number of free buffer slots in a queueable Source. If the queueable Source is playing, this value will increase up to the amount the Source was created with. If the queueable Source is stopped, it will process all of its internal buffers first, in which case this function will always return the amount it was created with.
---
---[Wiki](https://love2d.org/wiki/Source:getFreeBufferCount)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getFreeBufferCount() end

---Gets the current pitch of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:getPitch)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getPitch() end

---Gets the position of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:getPosition)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getPosition() end

---Returns the rolloff factor of the source.
---
---[Wiki](https://love2d.org/wiki/Source:getRolloff)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getRolloff() end

---Gets the type of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:getType)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getType() end

---Gets the velocity of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:getVelocity)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getVelocity() end

---Gets the current volume of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:getVolume)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getVolume() end

---Returns the volume limits of the source.
---
---[Wiki](https://love2d.org/wiki/Source:getVolumeLimits)
---
---@diagnostic disable-next-line: args-after-dots
function Source:getVolumeLimits() end

---Returns whether the Source will loop.
---
---[Wiki](https://love2d.org/wiki/Source:isLooping)
---
---@diagnostic disable-next-line: args-after-dots
function Source:isLooping() end

---Returns whether the Source is playing.
---
---[Wiki](https://love2d.org/wiki/Source:isPlaying)
---
---@diagnostic disable-next-line: args-after-dots
function Source:isPlaying() end

---Gets whether the Source's position, velocity, direction, and cone angles are relative to the listener.
---
---[Wiki](https://love2d.org/wiki/Source:isRelative)
---
---@diagnostic disable-next-line: args-after-dots
function Source:isRelative() end

---Pauses the Source.
---
---[Wiki](https://love2d.org/wiki/Source:pause)
---
---@diagnostic disable-next-line: args-after-dots
function Source:pause() end

---Starts playing the Source.
---
---[Wiki](https://love2d.org/wiki/Source:play)
---
---@diagnostic disable-next-line: args-after-dots
function Source:play() end

---Queues SoundData for playback in a queueable Source.
---
---This method requires the Source to be created via love.audio.newQueueableSource.
---
---[Wiki](https://love2d.org/wiki/Source:queue)
---
---@param sounddata love.SoundData# The data to queue. The SoundData's sample rate, bit depth, and channel count must match the Source's.
---@diagnostic disable-next-line: args-after-dots
function Source:queue(sounddata) end

---Sets the currently playing position of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:seek)
---
---@param offset number# The position to seek to.
---@param unit? love.TimeUnit# ('seconds') The unit of the position value.
---@diagnostic disable-next-line: args-after-dots
function Source:seek(offset, unit) end

---Sets the amount of air absorption applied to the Source.
---
---By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.
---
---Air absorption can simulate sound transmission through foggy air, dry air, smoky atmosphere, etc. It can be used to simulate different atmospheric conditions within different locations in an area.
---
---[Wiki](https://love2d.org/wiki/Source:setAirAbsorption)
---
---@param amount number# The amount of air absorption applied to the Source. Must be between 0 and 10.
---@diagnostic disable-next-line: args-after-dots
function Source:setAirAbsorption(amount) end

---Sets the reference and maximum attenuation distances of the Source. The parameters, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance.
---
---Distance attenuation is only applicable to Sources based on mono (rather than stereo) audio.
---
---[Wiki](https://love2d.org/wiki/Source:setAttenuationDistances)
---
---@param ref number# The new reference attenuation distance. If the current DistanceModel is clamped, this is the minimum attenuation distance.
---@param max number# The new maximum attenuation distance.
---@diagnostic disable-next-line: args-after-dots
function Source:setAttenuationDistances(ref, max) end

---Sets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction.
---
---[Wiki](https://love2d.org/wiki/Source:setCone)
---
---@param innerAngle number# The inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle.
---@param outerAngle number# The outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles.
---@param outerVolume? number# (0) The Source's volume when the listener is outside both the inner and outer cone angles.
---@diagnostic disable-next-line: args-after-dots
function Source:setCone(innerAngle, outerAngle, outerVolume) end

---Sets the direction vector of the Source. A zero vector makes the source non-directional.
---
---[Wiki](https://love2d.org/wiki/Source:setDirection)
---
---@param x number# The X part of the direction vector.
---@param y number# The Y part of the direction vector.
---@param z number# The Z part of the direction vector.
---@diagnostic disable-next-line: args-after-dots
function Source:setDirection(x, y, z) end

---Applies an audio effect to the Source.
---
---The effect must have been previously defined using love.audio.setEffect.
---
---[Wiki](https://love2d.org/wiki/Source:setEffect)
---
---@param name string# The name of the effect previously set up with love.audio.setEffect.
---@param enable? boolean# (true) If false and the given effect name was previously enabled on this Source, disables the effect.
---@diagnostic disable-next-line: args-after-dots
function Source:setEffect(name, enable) end

---Applies an audio effect to the Source.
---
---The effect must have been previously defined using love.audio.setEffect.
---
---[Wiki](https://love2d.org/wiki/Source:setEffect)
---
---@param name string# The name of the effect previously set up with love.audio.setEffect.
---@param filtersettings {
---type : love.FilterType,
---volume : number,
---highgain : number,
---lowgain : number}# The filter settings to apply prior to the effect, with the following fields:
---@diagnostic disable-next-line: args-after-dots
function Source:setEffect(name, filtersettings) end

---Sets a low-pass, high-pass, or band-pass filter to apply when playing the Source.
---
---[Wiki](https://love2d.org/wiki/Source:setFilter)
---
---@param settings {
---type : love.FilterType,
---volume : number,
---highgain : number,
---lowgain : number}# The filter settings to use for this Source, with the following fields:
---@diagnostic disable-next-line: args-after-dots
function Source:setFilter(settings) end

---Sets a low-pass, high-pass, or band-pass filter to apply when playing the Source.
---
---[Wiki](https://love2d.org/wiki/Source:setFilter)
---
---@diagnostic disable-next-line: args-after-dots
function Source:setFilter() end

---Sets whether the Source should loop.
---
---[Wiki](https://love2d.org/wiki/Source:setLooping)
---
---@param loop boolean# True if the source should loop, false otherwise.
---@diagnostic disable-next-line: args-after-dots
function Source:setLooping(loop) end

---Sets the pitch of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:setPitch)
---
---@param pitch number# Calculated with regard to 1 being the base pitch. Each reduction by 50 percent equals a pitch shift of -12 semitones (one octave reduction). Each doubling equals a pitch shift of 12 semitones (one octave increase). Zero is not a legal value.
---@diagnostic disable-next-line: args-after-dots
function Source:setPitch(pitch) end

---Sets the position of the Source. Please note that this only works for mono (i.e. non-stereo) sound files!
---
---[Wiki](https://love2d.org/wiki/Source:setPosition)
---
---@param x number# The X position of the Source.
---@param y number# The Y position of the Source.
---@param z number# The Z position of the Source.
---@diagnostic disable-next-line: args-after-dots
function Source:setPosition(x, y, z) end

---Sets whether the Source's position, velocity, direction, and cone angles are relative to the listener, or absolute.
---
---By default, all sources are absolute and therefore relative to the origin of love's coordinate system 0, 0. Only absolute sources are affected by the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources. 
---
---[Wiki](https://love2d.org/wiki/Source:setRelative)
---
---@param enable? boolean# (false) True to make the position, velocity, direction and cone angles relative to the listener, false to make them absolute.
---@diagnostic disable-next-line: args-after-dots
function Source:setRelative(enable) end

---Sets the rolloff factor which affects the strength of the used distance attenuation.
---
---Extended information and detailed formulas can be found in the chapter '3.4. Attenuation By Distance' of OpenAL 1.1 specification.
---
---[Wiki](https://love2d.org/wiki/Source:setRolloff)
---
---@param rolloff number# The new rolloff factor.
---@diagnostic disable-next-line: args-after-dots
function Source:setRolloff(rolloff) end

---Sets the velocity of the Source.
---
---This does '''not''' change the position of the Source, but lets the application know how it has to calculate the doppler effect.
---
---[Wiki](https://love2d.org/wiki/Source:setVelocity)
---
---@param x number# The X part of the velocity vector.
---@param y number# The Y part of the velocity vector.
---@param z number# The Z part of the velocity vector.
---@diagnostic disable-next-line: args-after-dots
function Source:setVelocity(x, y, z) end

---Sets the current volume of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:setVolume)
---
---@param volume number# The volume for a Source, where 1.0 is normal volume. Volume cannot be raised above 1.0.
---@diagnostic disable-next-line: args-after-dots
function Source:setVolume(volume) end

---Sets the volume limits of the source. The limits have to be numbers from 0 to 1.
---
---[Wiki](https://love2d.org/wiki/Source:setVolumeLimits)
---
---@param min number# The minimum volume.
---@param max number# The maximum volume.
---@diagnostic disable-next-line: args-after-dots
function Source:setVolumeLimits(min, max) end

---Stops a Source.
---
---[Wiki](https://love2d.org/wiki/Source:stop)
---
---@diagnostic disable-next-line: args-after-dots
function Source:stop() end

---Gets the currently playing position of the Source.
---
---[Wiki](https://love2d.org/wiki/Source:tell)
---
---@param unit? love.TimeUnit# ('seconds') The type of unit for the return value.
---@diagnostic disable-next-line: args-after-dots
function Source:tell(unit) end

---Gets a list of the names of the currently enabled effects.
---
---[Wiki](https://love2d.org/wiki/love.audio.getActiveEffects)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getActiveEffects() end

---Gets the current number of simultaneously playing sources.
---
---[Wiki](https://love2d.org/wiki/love.audio.getActiveSourceCount)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getActiveSourceCount() end

---Returns the distance attenuation model.
---
---[Wiki](https://love2d.org/wiki/love.audio.getDistanceModel)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getDistanceModel() end

---Gets the current global scale factor for velocity-based doppler effects.
---
---[Wiki](https://love2d.org/wiki/love.audio.getDopplerScale)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getDopplerScale() end

---Gets the settings associated with an effect.
---
---[Wiki](https://love2d.org/wiki/love.audio.getEffect)
---
---@param name string# The name of the effect.
---@diagnostic disable-next-line: args-after-dots
function love.audio.getEffect(name) end

---Gets the maximum number of active effects supported by the system.
---
---[Wiki](https://love2d.org/wiki/love.audio.getMaxSceneEffects)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getMaxSceneEffects() end

---Gets the maximum number of active Effects in a single Source object, that the system can support.
---
---[Wiki](https://love2d.org/wiki/love.audio.getMaxSourceEffects)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getMaxSourceEffects() end

---Returns the orientation of the listener.
---
---[Wiki](https://love2d.org/wiki/love.audio.getOrientation)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getOrientation() end

---Returns the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.
---
---[Wiki](https://love2d.org/wiki/love.audio.getPosition)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getPosition() end

---Gets a list of RecordingDevices on the system.
---
---The first device in the list is the user's default recording device. The list may be empty if there are no microphones connected to the system.
---
---Audio recording is currently not supported on iOS.
---
---[Wiki](https://love2d.org/wiki/love.audio.getRecordingDevices)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getRecordingDevices() end

---Returns the velocity of the listener.
---
---[Wiki](https://love2d.org/wiki/love.audio.getVelocity)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getVelocity() end

---Returns the master volume.
---
---[Wiki](https://love2d.org/wiki/love.audio.getVolume)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.getVolume() end

---Gets whether audio effects are supported in the system.
---
---[Wiki](https://love2d.org/wiki/love.audio.isEffectsSupported)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.isEffectsSupported() end

---Creates a new Source usable for real-time generated sound playback with Source:queue.
---
---[Wiki](https://love2d.org/wiki/love.audio.newQueueableSource)
---
---@param samplerate number# Number of samples per second when playing.
---@param bitdepth number# Bits per sample (8 or 16).
---@param channels number# 1 for mono or 2 for stereo.
---@param buffercount? number# (0) The number of buffers that can be queued up at any given time with Source:queue. Cannot be greater than 64. A sensible default (~8) is chosen if no value is specified.
---@diagnostic disable-next-line: args-after-dots
function love.audio.newQueueableSource(samplerate, bitdepth, channels, buffercount) end

---Creates a new Source from a filepath, File, Decoder or SoundData.
---
---Sources created from SoundData are always static.
---
---[Wiki](https://love2d.org/wiki/love.audio.newSource)
---
---@param filename string# The filepath to the audio file.
---@param type love.SourceType# Streaming or static source.
---@diagnostic disable-next-line: args-after-dots
function love.audio.newSource(filename, type) end

---Creates a new Source from a filepath, File, Decoder or SoundData.
---
---Sources created from SoundData are always static.
---
---[Wiki](https://love2d.org/wiki/love.audio.newSource)
---
---@param file love.File# A File pointing to an audio file.
---@param type love.SourceType# Streaming or static source.
---@diagnostic disable-next-line: args-after-dots
function love.audio.newSource(file, type) end

---Creates a new Source from a filepath, File, Decoder or SoundData.
---
---Sources created from SoundData are always static.
---
---[Wiki](https://love2d.org/wiki/love.audio.newSource)
---
---@param decoder love.Decoder# The Decoder to create a Source from.
---@param type love.SourceType# Streaming or static source.
---@diagnostic disable-next-line: args-after-dots
function love.audio.newSource(decoder, type) end

---Creates a new Source from a filepath, File, Decoder or SoundData.
---
---Sources created from SoundData are always static.
---
---[Wiki](https://love2d.org/wiki/love.audio.newSource)
---
---@param data love.FileData# The FileData to create a Source from.
---@param type love.SourceType# Streaming or static source.
---@diagnostic disable-next-line: args-after-dots
function love.audio.newSource(data, type) end

---Creates a new Source from a filepath, File, Decoder or SoundData.
---
---Sources created from SoundData are always static.
---
---[Wiki](https://love2d.org/wiki/love.audio.newSource)
---
---@param data love.SoundData# The SoundData to create a Source from.
---@diagnostic disable-next-line: args-after-dots
function love.audio.newSource(data) end

---Pauses specific or all currently played Sources.
---
---[Wiki](https://love2d.org/wiki/love.audio.pause)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.pause() end

---Pauses specific or all currently played Sources.
---
---[Wiki](https://love2d.org/wiki/love.audio.pause)
---
---@param source love.Source# The first Source to pause.
---@param ... love.Source# Additional Sources to pause.
---@diagnostic disable-next-line: args-after-dots
function love.audio.pause(source, ...) end

---Pauses specific or all currently played Sources.
---
---[Wiki](https://love2d.org/wiki/love.audio.pause)
---
---@param sources table[]# A table containing a list of Sources to pause.
---@diagnostic disable-next-line: args-after-dots
function love.audio.pause(sources) end

---Plays the specified Source.
---
---[Wiki](https://love2d.org/wiki/love.audio.play)
---
---@param source love.Source# The Source to play.
---@diagnostic disable-next-line: args-after-dots
function love.audio.play(source) end

---Plays the specified Source.
---
---[Wiki](https://love2d.org/wiki/love.audio.play)
---
---@param sources table[]# Table containing a list of Sources to play.
---@diagnostic disable-next-line: args-after-dots
function love.audio.play(sources) end

---Plays the specified Source.
---
---[Wiki](https://love2d.org/wiki/love.audio.play)
---
---@param source1 love.Source# The first Source to play.
---@param source2 love.Source# The second Source to play.
---@param ... love.Source# Additional Sources to play.
---@diagnostic disable-next-line: args-after-dots
function love.audio.play(source1, source2, ...) end

---Sets the distance attenuation model.
---
---[Wiki](https://love2d.org/wiki/love.audio.setDistanceModel)
---
---@param model love.DistanceModel# The new distance model.
---@diagnostic disable-next-line: args-after-dots
function love.audio.setDistanceModel(model) end

---Sets a global scale factor for velocity-based doppler effects. The default scale value is 1.
---
---[Wiki](https://love2d.org/wiki/love.audio.setDopplerScale)
---
---@param scale number# The new doppler scale factor. The scale must be greater than 0.
---@diagnostic disable-next-line: args-after-dots
function love.audio.setDopplerScale(scale) end

---Defines an effect that can be applied to a Source.
---
---Not all system supports audio effects. Use love.audio.isEffectsSupported to check.
---
---[Wiki](https://love2d.org/wiki/love.audio.setEffect)
---
---@param name string# The name of the effect.
---@param settings {
---type : love.EffectType,
---volume : number,
---[...] : number}# The settings to use for this effect, with the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.audio.setEffect(name, settings) end

---Defines an effect that can be applied to a Source.
---
---Not all system supports audio effects. Use love.audio.isEffectsSupported to check.
---
---[Wiki](https://love2d.org/wiki/love.audio.setEffect)
---
---@param name string# The name of the effect.
---@param enabled? boolean# (true) If false and the given effect name was previously set, disables the effect.
---@diagnostic disable-next-line: args-after-dots
function love.audio.setEffect(name, enabled) end

---Sets whether the system should mix the audio with the system's audio.
---
---[Wiki](https://love2d.org/wiki/love.audio.setMixWithSystem)
---
---@param mix boolean# True to enable mixing, false to disable it.
---@diagnostic disable-next-line: args-after-dots
function love.audio.setMixWithSystem(mix) end

---Sets the orientation of the listener.
---
---[Wiki](https://love2d.org/wiki/love.audio.setOrientation)
---
---@param fx number# Forward vector of the listener orientation.
---@param fy number# Forward vector of the listener orientation.
---@param fz number# Forward vector of the listener orientation.
---@param ux number# Up vector of the listener orientation.
---@param uy number# Up vector of the listener orientation.
---@param uz number# Up vector of the listener orientation.
---@diagnostic disable-next-line: args-after-dots
function love.audio.setOrientation(fx, fy, fz, ux, uy, uz) end

---Sets the position of the listener, which determines how sounds play.
---
---[Wiki](https://love2d.org/wiki/love.audio.setPosition)
---
---@param x number# The x position of the listener.
---@param y number# The y position of the listener.
---@param z number# The z position of the listener.
---@diagnostic disable-next-line: args-after-dots
function love.audio.setPosition(x, y, z) end

---Sets the velocity of the listener.
---
---[Wiki](https://love2d.org/wiki/love.audio.setVelocity)
---
---@param x number# The X velocity of the listener.
---@param y number# The Y velocity of the listener.
---@param z number# The Z velocity of the listener.
---@diagnostic disable-next-line: args-after-dots
function love.audio.setVelocity(x, y, z) end

---Sets the master volume.
---
---[Wiki](https://love2d.org/wiki/love.audio.setVolume)
---
---@param volume number# 1.0 is max and 0.0 is off.
---@diagnostic disable-next-line: args-after-dots
function love.audio.setVolume(volume) end

---Stops currently played sources.
---
---[Wiki](https://love2d.org/wiki/love.audio.stop)
---
---@diagnostic disable-next-line: args-after-dots
function love.audio.stop() end

---Stops currently played sources.
---
---[Wiki](https://love2d.org/wiki/love.audio.stop)
---
---@param source love.Source# The source on which to stop the playback.
---@diagnostic disable-next-line: args-after-dots
function love.audio.stop(source) end

---Stops currently played sources.
---
---[Wiki](https://love2d.org/wiki/love.audio.stop)
---
---@param source1 love.Source# The first Source to stop.
---@param source2 love.Source# The second Source to stop.
---@param ... love.Source# Additional Sources to stop.
---@diagnostic disable-next-line: args-after-dots
function love.audio.stop(source1, source2, ...) end

---Stops currently played sources.
---
---[Wiki](https://love2d.org/wiki/love.audio.stop)
---
---@param sources table[]# A table containing a list of Sources to stop.
---@diagnostic disable-next-line: args-after-dots
function love.audio.stop(sources) end

---Gets the compression format of the CompressedData.
---
---[Wiki](https://love2d.org/wiki/CompressedData:getFormat)
---
---@diagnostic disable-next-line: args-after-dots
function CompressedData:getFormat() end

---Compresses a string or data using a specific compression algorithm.
---
---[Wiki](https://love2d.org/wiki/love.data.compress)
---
---@param container love.ContainerType# What type to return the compressed data as.
---@param format love.CompressedDataFormat# The format to use when compressing the string.
---@param rawstring string# The raw (un-compressed) string to compress.
---@param level? number# (-1) The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.
---@diagnostic disable-next-line: args-after-dots
function love.data.compress(container, format, rawstring, level) end

---Compresses a string or data using a specific compression algorithm.
---
---[Wiki](https://love2d.org/wiki/love.data.compress)
---
---@param container love.ContainerType# What type to return the compressed data as.
---@param format love.CompressedDataFormat# The format to use when compressing the data.
---@param data love.Data# A Data object containing the raw (un-compressed) data to compress.
---@param level? number# (-1) The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.
---@diagnostic disable-next-line: args-after-dots
function love.data.compress(container, format, data, level) end

---Decode Data or a string from any of the EncodeFormats to Data or string.
---
---[Wiki](https://love2d.org/wiki/love.data.decode)
---
---@param container love.ContainerType# What type to return the decoded data as.
---@param format love.EncodeFormat# The format of the input data.
---@param sourceString string# The raw (encoded) data to decode.
---@diagnostic disable-next-line: args-after-dots
function love.data.decode(container, format, sourceString) end

---Decode Data or a string from any of the EncodeFormats to Data or string.
---
---[Wiki](https://love2d.org/wiki/love.data.decode)
---
---@param container love.ContainerType# What type to return the decoded data as.
---@param format love.EncodeFormat# The format of the input data.
---@param sourceData love.Data# The raw (encoded) data to decode.
---@diagnostic disable-next-line: args-after-dots
function love.data.decode(container, format, sourceData) end

---Decompresses a CompressedData or previously compressed string or Data object.
---
---[Wiki](https://love2d.org/wiki/love.data.decompress)
---
---@param container love.ContainerType# What type to return the decompressed data as.
---@param compressedData love.CompressedData# The compressed data to decompress.
---@diagnostic disable-next-line: args-after-dots
function love.data.decompress(container, compressedData) end

---Decompresses a CompressedData or previously compressed string or Data object.
---
---[Wiki](https://love2d.org/wiki/love.data.decompress)
---
---@param container love.ContainerType# What type to return the decompressed data as.
---@param format love.CompressedDataFormat# The format that was used to compress the given string.
---@param compressedString string# A string containing data previously compressed with love.data.compress.
---@diagnostic disable-next-line: args-after-dots
function love.data.decompress(container, format, compressedString) end

---Decompresses a CompressedData or previously compressed string or Data object.
---
---[Wiki](https://love2d.org/wiki/love.data.decompress)
---
---@param container love.ContainerType# What type to return the decompressed data as.
---@param format love.CompressedDataFormat# The format that was used to compress the given data.
---@param data love.Data# A Data object containing data previously compressed with love.data.compress.
---@diagnostic disable-next-line: args-after-dots
function love.data.decompress(container, format, data) end

---Encode Data or a string to a Data or string in one of the EncodeFormats.
---
---[Wiki](https://love2d.org/wiki/love.data.encode)
---
---@param container love.ContainerType# What type to return the encoded data as.
---@param format love.EncodeFormat# The format of the output data.
---@param sourceString string# The raw data to encode.
---@param linelength? number# (0) The maximum line length of the output. Only supported for base64, ignored if 0.
---@diagnostic disable-next-line: args-after-dots
function love.data.encode(container, format, sourceString, linelength) end

---Encode Data or a string to a Data or string in one of the EncodeFormats.
---
---[Wiki](https://love2d.org/wiki/love.data.encode)
---
---@param container love.ContainerType# What type to return the encoded data as.
---@param format love.EncodeFormat# The format of the output data.
---@param sourceData love.Data# The raw data to encode.
---@param linelength? number# (0) The maximum line length of the output. Only supported for base64, ignored if 0.
---@diagnostic disable-next-line: args-after-dots
function love.data.encode(container, format, sourceData, linelength) end

---Gets the size in bytes that a given format used with love.data.pack will use.
---
---This function behaves the same as Lua 5.3's string.packsize.
---
---[Wiki](https://love2d.org/wiki/love.data.getPackedSize)
---
---@param format string# A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings.
---@diagnostic disable-next-line: args-after-dots
function love.data.getPackedSize(format) end

---Compute the message digest of a string using a specified hash algorithm.
---
---[Wiki](https://love2d.org/wiki/love.data.hash)
---
---@param hashFunction love.HashFunction# Hash algorithm to use.
---@param string string# String to hash.
---@diagnostic disable-next-line: args-after-dots
function love.data.hash(hashFunction, string) end

---Compute the message digest of a string using a specified hash algorithm.
---
---[Wiki](https://love2d.org/wiki/love.data.hash)
---
---@param hashFunction love.HashFunction# Hash algorithm to use.
---@param data love.Data# Data to hash.
---@diagnostic disable-next-line: args-after-dots
function love.data.hash(hashFunction, data) end

---Creates a new Data object containing arbitrary bytes.
---
---Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.
---
---[Wiki](https://love2d.org/wiki/love.data.newByteData)
---
---@param datastring string# The byte string to copy.
---@diagnostic disable-next-line: args-after-dots
function love.data.newByteData(datastring) end

---Creates a new Data object containing arbitrary bytes.
---
---Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.
---
---[Wiki](https://love2d.org/wiki/love.data.newByteData)
---
---@param Data love.Data# The existing Data object to copy.
---@param offset? number# (0) The offset of the subsection to copy, in bytes.
---@param size? number# (data:getSize()) The size in bytes of the new Data object.
---@diagnostic disable-next-line: args-after-dots
function love.data.newByteData(Data, offset, size) end

---Creates a new Data object containing arbitrary bytes.
---
---Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.
---
---[Wiki](https://love2d.org/wiki/love.data.newByteData)
---
---@param size number# The size in bytes of the new Data object.
---@diagnostic disable-next-line: args-after-dots
function love.data.newByteData(size) end

---Creates a new Data referencing a subsection of an existing Data object.
---
---[Wiki](https://love2d.org/wiki/love.data.newDataView)
---
---@param data love.Data# The Data object to reference.
---@param offset number# The offset of the subsection to reference, in bytes.
---@param size number# The size in bytes of the subsection to reference.
---@diagnostic disable-next-line: args-after-dots
function love.data.newDataView(data, offset, size) end

---Packs (serializes) simple Lua values.
---
---This function behaves the same as Lua 5.3's string.pack.
---
---[Wiki](https://love2d.org/wiki/love.data.pack)
---
---@param container love.ContainerType# What type to return the encoded data as.
---@param format string# A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings.
---@param v1 number|boolean|string# The first value (number, boolean, or string) to serialize.
---@param ... number|boolean|string# Additional values to serialize.
---@diagnostic disable-next-line: args-after-dots
function love.data.pack(container, format, v1, ...) end

---Unpacks (deserializes) a byte-string or Data into simple Lua values.
---
---This function behaves the same as Lua 5.3's string.unpack.
---
---[Wiki](https://love2d.org/wiki/love.data.unpack)
---
---@param format string# A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings.
---@param datastring string# A string containing the packed (serialized) data.
---@param pos? number# (1) Where to start reading in the string. Negative values can be used to read relative from the end of the string.
---@diagnostic disable-next-line: args-after-dots
function love.data.unpack(format, datastring, pos) end

---Unpacks (deserializes) a byte-string or Data into simple Lua values.
---
---This function behaves the same as Lua 5.3's string.unpack.
---
---[Wiki](https://love2d.org/wiki/love.data.unpack)
---
---@param format string# A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings.
---@param data love.Data# A Data object containing the packed (serialized) data.
---@param pos? number# (1) 1-based index indicating where to start reading in the Data. Negative values can be used to read relative from the end of the Data object.
---@diagnostic disable-next-line: args-after-dots
function love.data.unpack(format, data, pos) end

---Clears the event queue.
---
---[Wiki](https://love2d.org/wiki/love.event.clear)
---
---@diagnostic disable-next-line: args-after-dots
function love.event.clear() end

---Returns an iterator for messages in the event queue.
---
---[Wiki](https://love2d.org/wiki/love.event.poll)
---
---@diagnostic disable-next-line: args-after-dots
function love.event.poll() end

---Pump events into the event queue.
---
---This is a low-level function, and is usually not called by the user, but by love.run.
---
---Note that this does need to be called for any OS to think you're still running,
---
---and if you want to handle OS-generated events at all (think callbacks).
---
---[Wiki](https://love2d.org/wiki/love.event.pump)
---
---@diagnostic disable-next-line: args-after-dots
function love.event.pump() end

---Adds an event to the event queue.
---
---From 0.10.0 onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six.
---
---[Wiki](https://love2d.org/wiki/love.event.push)
---
---@param n love.Event# The name of the event.
---@param a? love.Variant# (nil) First event argument.
---@param b? love.Variant# (nil) Second event argument.
---@param c? love.Variant# (nil) Third event argument.
---@param d? love.Variant# (nil) Fourth event argument.
---@param e? love.Variant# (nil) Fifth event argument.
---@param f? love.Variant# (nil) Sixth event argument.
---@param ...? love.Variant# (nil) Further event arguments may follow.
---@diagnostic disable-next-line: args-after-dots
function love.event.push(n, a, b, c, d, e, f, ...) end

---Adds the quit event to the queue.
---
---The quit event is a signal for the event handler to close LÖVE. It's possible to abort the exit process with the love.quit callback.
---
---[Wiki](https://love2d.org/wiki/love.event.quit)
---
---@param exitstatus? number# (0) The program exit status to use when closing the application.
---@diagnostic disable-next-line: args-after-dots
function love.event.quit(exitstatus) end

---Adds the quit event to the queue.
---
---The quit event is a signal for the event handler to close LÖVE. It's possible to abort the exit process with the love.quit callback.
---
---[Wiki](https://love2d.org/wiki/love.event.quit)
---
---@param restart string# Tells the default love.run to exit and restart the game without relaunching the executable.
---@diagnostic disable-next-line: args-after-dots
function love.event.quit(restart) end

---Like love.event.poll(), but blocks until there is an event in the queue.
---
---[Wiki](https://love2d.org/wiki/love.event.wait)
---
---@diagnostic disable-next-line: args-after-dots
function love.event.wait() end

---Closes a File.
---
---[Wiki](https://love2d.org/wiki/File:close)
---
---@diagnostic disable-next-line: args-after-dots
function File:close() end

---Flushes any buffered written data in the file to the disk.
---
---[Wiki](https://love2d.org/wiki/File:flush)
---
---@diagnostic disable-next-line: args-after-dots
function File:flush() end

---Gets the buffer mode of a file.
---
---[Wiki](https://love2d.org/wiki/File:getBuffer)
---
---@diagnostic disable-next-line: args-after-dots
function File:getBuffer() end

---Gets the filename that the File object was created with. If the file object originated from the love.filedropped callback, the filename will be the full platform-dependent file path.
---
---[Wiki](https://love2d.org/wiki/File:getFilename)
---
---@diagnostic disable-next-line: args-after-dots
function File:getFilename() end

---Gets the FileMode the file has been opened with.
---
---[Wiki](https://love2d.org/wiki/File:getMode)
---
---@diagnostic disable-next-line: args-after-dots
function File:getMode() end

---Returns the file size.
---
---[Wiki](https://love2d.org/wiki/File:getSize)
---
---@diagnostic disable-next-line: args-after-dots
function File:getSize() end

---Gets whether end-of-file has been reached.
---
---[Wiki](https://love2d.org/wiki/File:isEOF)
---
---@diagnostic disable-next-line: args-after-dots
function File:isEOF() end

---Gets whether the file is open.
---
---[Wiki](https://love2d.org/wiki/File:isOpen)
---
---@diagnostic disable-next-line: args-after-dots
function File:isOpen() end

---Iterate over all the lines in a file.
---
---[Wiki](https://love2d.org/wiki/File:lines)
---
---@diagnostic disable-next-line: args-after-dots
function File:lines() end

---Open the file for write, read or append.
---
---[Wiki](https://love2d.org/wiki/File:open)
---
---@param mode love.FileMode# The mode to open the file in.
---@diagnostic disable-next-line: args-after-dots
function File:open(mode) end

---Read a number of bytes from a file.
---
---[Wiki](https://love2d.org/wiki/File:read)
---
---@param bytes? number# (all) The number of bytes to read.
---@diagnostic disable-next-line: args-after-dots
function File:read(bytes) end

---Read a number of bytes from a file.
---
---[Wiki](https://love2d.org/wiki/File:read)
---
---@param container love.ContainerType# What type to return the file's contents as.
---@param bytes? number# (all) The number of bytes to read.
---@diagnostic disable-next-line: args-after-dots
function File:read(container, bytes) end

---Seek to a position in a file
---
---[Wiki](https://love2d.org/wiki/File:seek)
---
---@param pos number# The position to seek to
---@diagnostic disable-next-line: args-after-dots
function File:seek(pos) end

---Sets the buffer mode for a file opened for writing or appending. Files with buffering enabled will not write data to the disk until the buffer size limit is reached, depending on the buffer mode.
---
---File:flush will force any buffered data to be written to the disk.
---
---[Wiki](https://love2d.org/wiki/File:setBuffer)
---
---@param mode love.BufferMode# The buffer mode to use.
---@param size? number# (0) The maximum size in bytes of the file's buffer.
---@diagnostic disable-next-line: args-after-dots
function File:setBuffer(mode, size) end

---Returns the position in the file.
---
---[Wiki](https://love2d.org/wiki/File:tell)
---
---@diagnostic disable-next-line: args-after-dots
function File:tell() end

---Write data to a file.
---
---[Wiki](https://love2d.org/wiki/File:write)
---
---@param data string# The string data to write.
---@param size? number# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots
function File:write(data, size) end

---Write data to a file.
---
---[Wiki](https://love2d.org/wiki/File:write)
---
---@param data love.Data# The Data object to write.
---@param size? number# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots
function File:write(data, size) end

---Gets the extension of the FileData.
---
---[Wiki](https://love2d.org/wiki/FileData:getExtension)
---
---@diagnostic disable-next-line: args-after-dots
function FileData:getExtension() end

---Gets the filename of the FileData.
---
---[Wiki](https://love2d.org/wiki/FileData:getFilename)
---
---@diagnostic disable-next-line: args-after-dots
function FileData:getFilename() end

---Append data to an existing file.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.append)
---
---@param name string# The name (and path) of the file.
---@param data string# The string data to append to the file.
---@param size? number# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.append(name, data, size) end

---Append data to an existing file.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.append)
---
---@param name string# The name (and path) of the file.
---@param data love.Data# The Data object to append to the file.
---@param size? number# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.append(name, data, size) end

---Gets whether love.filesystem follows symbolic links.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.areSymlinksEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.areSymlinksEnabled() end

---Recursively creates a directory.
---
---When called with 'a/b' it creates both 'a' and 'a/b', if they don't exist already.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.createDirectory)
---
---@param name string# The directory to create.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.createDirectory(name) end

---Returns the application data directory (could be the same as getUserDirectory)
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getAppdataDirectory)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getAppdataDirectory() end

---Gets the filesystem paths that will be searched for c libraries when require is called.
---
---The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform.
---
---The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getCRequirePath)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getCRequirePath() end

---Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.
---
---If the path passed to the function exists in the game and the save directory, it will list the files and directories from both places.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getDirectoryItems)
---
---@param dir string# The directory.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getDirectoryItems(dir) end

---Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.
---
---If the path passed to the function exists in the game and the save directory, it will list the files and directories from both places.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getDirectoryItems)
---
---@param dir string# The directory.
---@param callback function# A function which is called for each file and folder in the directory. The filename is passed to the function as an argument.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getDirectoryItems(dir, callback) end

---Gets the write directory name for your game. 
---
---Note that this only returns the name of the folder to store your files in, not the full path.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getIdentity)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getIdentity() end

---Gets information about the specified file or directory.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getInfo)
---
---@param path string# The file or directory path to check.
---@param filtertype? love.FileType# (nil) If supplied, this parameter causes getInfo to only return the info table if the item at the given path matches the specified file type.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getInfo(path, filtertype) end

---Gets information about the specified file or directory.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getInfo)
---
---@param path string# The file or directory path to check.
---@param info table# A table which will be filled in with info about the specified path.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getInfo(path, info) end

---Gets information about the specified file or directory.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getInfo)
---
---@param path string# The file or directory path to check.
---@param filtertype love.FileType# Causes getInfo to only return the info table if the item at the given path matches the specified file type.
---@param info table# A table which will be filled in with info about the specified path.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getInfo(path, filtertype, info) end

---Gets the platform-specific absolute path of the directory containing a filepath.
---
---This can be used to determine whether a file is inside the save directory or the game's source .love.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getRealDirectory)
---
---@param filepath string# The filepath to get the directory of.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getRealDirectory(filepath) end

---Gets the filesystem paths that will be searched when require is called.
---
---The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.)
---
---The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getRequirePath)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getRequirePath() end

---Gets the full path to the designated save directory.
---
---This can be useful if you want to use the standard io library (or something else) to
---
---read or write in the save directory.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getSaveDirectory)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getSaveDirectory() end

---Returns the full path to the the .love file or directory. If the game is fused to the LÖVE executable, then the executable is returned.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getSource)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getSource() end

---Returns the full path to the directory containing the .love file. If the game is fused to the LÖVE executable, then the directory containing the executable is returned.
---
---If love.filesystem.isFused is true, the path returned by this function can be passed to love.filesystem.mount, which will make the directory containing the main game (e.g. C:\Program Files\coolgame\) readable by love.filesystem.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getSourceBaseDirectory)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getSourceBaseDirectory() end

---Returns the path of the user's directory
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getUserDirectory)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getUserDirectory() end

---Gets the current working directory.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.getWorkingDirectory)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.getWorkingDirectory() end

---Initializes love.filesystem, will be called internally, so should not be used explicitly.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.init)
---
---@param appname string# The name of the application binary, typically love.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.init(appname) end

---Gets whether the game is in fused mode or not.
---
---If a game is in fused mode, its save directory will be directly in the Appdata directory instead of Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries which are located in the save directory.
---
---A game is in fused mode if the source .love has been fused to the executable (see Game Distribution), or if '--fused' has been given as a command-line argument when starting the game.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.isFused)
---
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.isFused() end

---Iterate over the lines in a file.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.lines)
---
---@param name string# The name (and path) of the file
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.lines(name) end

---Loads a Lua file (but does not run it).
---
---[Wiki](https://love2d.org/wiki/love.filesystem.load)
---
---@param name string# The name (and path) of the file.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.load(name) end

---Mounts a zip file or folder in the game's save directory for reading.
---
---It is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.mount)
---
---@param archive string# The folder or zip file in the game's save directory to mount.
---@param mountpoint string# The new path the archive will be mounted to.
---@param appendToPath? boolean# (false) Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.mount(archive, mountpoint, appendToPath) end

---Mounts a zip file or folder in the game's save directory for reading.
---
---It is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.mount)
---
---@param filedata love.FileData# The FileData object in memory to mount.
---@param mountpoint string# The new path the archive will be mounted to.
---@param appendToPath? boolean# (false) Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.mount(filedata, mountpoint, appendToPath) end

---Mounts a zip file or folder in the game's save directory for reading.
---
---It is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.mount)
---
---@param data love.Data# The Data object in memory to mount.
---@param archivename string# The name to associate the mounted data with, for use with love.filesystem.unmount. Must be unique compared to other mounted data.
---@param mountpoint string# The new path the archive will be mounted to.
---@param appendToPath? boolean# (false) Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.mount(data, archivename, mountpoint, appendToPath) end

---Creates a new File object. 
---
---It needs to be opened before it can be accessed.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.newFile)
---
---@param filename string# The filename of the file.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.newFile(filename) end

---Creates a new File object. 
---
---It needs to be opened before it can be accessed.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.newFile)
---
---@param filename string# The filename of the file.
---@param mode love.FileMode# The mode to open the file in.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.newFile(filename, mode) end

---Creates a new FileData object from a file on disk, or from a string in memory.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.newFileData)
---
---@param contents string# The contents of the file in memory represented as a string.
---@param name string# The name of the file. The extension may be parsed and used by LÖVE when passing the FileData object into love.audio.newSource.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.newFileData(contents, name) end

---Creates a new FileData object from a file on disk, or from a string in memory.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.newFileData)
---
---@param originaldata love.Data# The Data object to copy into the new FileData object.
---@param name string# The name of the file. The extension may be parsed and used by LÖVE when passing the FileData object into love.audio.newSource.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.newFileData(originaldata, name) end

---Creates a new FileData object from a file on disk, or from a string in memory.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.newFileData)
---
---@param filepath string# Path to the file.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.newFileData(filepath) end

---Read the contents of a file.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.read)
---
---@param name string# The name (and path) of the file.
---@param size? number# (all) How many bytes to read.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.read(name, size) end

---Read the contents of a file.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.read)
---
---@param container love.ContainerType# What type to return the file's contents as.
---@param name string# The name (and path) of the file
---@param size? number# (all) How many bytes to read
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.read(container, name, size) end

---Removes a file or empty directory.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.remove)
---
---@param name string# The file or directory to remove.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.remove(name) end

---Sets the filesystem paths that will be searched for c libraries when require is called.
---
---The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform.
---
---The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.setCRequirePath)
---
---@param paths string# The paths that the ''require'' function will check in love's filesystem.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.setCRequirePath(paths) end

---Sets the write directory for your game. 
---
---Note that you can only set the name of the folder to store your files in, not the location.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.setIdentity)
---
---@param name string# The new identity that will be used as write directory.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.setIdentity(name) end

---Sets the write directory for your game. 
---
---Note that you can only set the name of the folder to store your files in, not the location.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.setIdentity)
---
---@param name string# The new identity that will be used as write directory.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.setIdentity(name) end

---Sets the filesystem paths that will be searched when require is called.
---
---The paths string given to this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.)
---
---The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.setRequirePath)
---
---@param paths string# The paths that the ''require'' function will check in love's filesystem.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.setRequirePath(paths) end

---Sets the source of the game, where the code is present. This function can only be called once, and is normally automatically done by LÖVE.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.setSource)
---
---@param path string# Absolute path to the game's source folder.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.setSource(path) end

---Sets whether love.filesystem follows symbolic links. It is enabled by default in version 0.10.0 and newer, and disabled by default in 0.9.2.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.setSymlinksEnabled)
---
---@param enable boolean# Whether love.filesystem should follow symbolic links.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.setSymlinksEnabled(enable) end

---Unmounts a zip file or folder previously mounted for reading with love.filesystem.mount.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.unmount)
---
---@param archive string# The folder or zip file in the game's save directory which is currently mounted.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.unmount(archive) end

---Write data to a file in the save directory. If the file existed already, it will be completely replaced by the new contents.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.write)
---
---@param name string# The name (and path) of the file.
---@param data string# The string data to write to the file.
---@param size? number# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.write(name, data, size) end

---Write data to a file in the save directory. If the file existed already, it will be completely replaced by the new contents.
---
---[Wiki](https://love2d.org/wiki/love.filesystem.write)
---
---@param name string# The name (and path) of the file.
---@param data love.Data# The Data object to write to the file.
---@param size? number# (all) How many bytes to write.
---@diagnostic disable-next-line: args-after-dots
function love.filesystem.write(name, data, size) end

---Gets glyph advance.
---
---[Wiki](https://love2d.org/wiki/GlyphData:getAdvance)
---
---@diagnostic disable-next-line: args-after-dots
function GlyphData:getAdvance() end

---Gets glyph bearing.
---
---[Wiki](https://love2d.org/wiki/GlyphData:getBearing)
---
---@diagnostic disable-next-line: args-after-dots
function GlyphData:getBearing() end

---Gets glyph bounding box.
---
---[Wiki](https://love2d.org/wiki/GlyphData:getBoundingBox)
---
---@diagnostic disable-next-line: args-after-dots
function GlyphData:getBoundingBox() end

---Gets glyph dimensions.
---
---[Wiki](https://love2d.org/wiki/GlyphData:getDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function GlyphData:getDimensions() end

---Gets glyph pixel format.
---
---[Wiki](https://love2d.org/wiki/GlyphData:getFormat)
---
---@diagnostic disable-next-line: args-after-dots
function GlyphData:getFormat() end

---Gets glyph number.
---
---[Wiki](https://love2d.org/wiki/GlyphData:getGlyph)
---
---@diagnostic disable-next-line: args-after-dots
function GlyphData:getGlyph() end

---Gets glyph string.
---
---[Wiki](https://love2d.org/wiki/GlyphData:getGlyphString)
---
---@diagnostic disable-next-line: args-after-dots
function GlyphData:getGlyphString() end

---Gets glyph height.
---
---[Wiki](https://love2d.org/wiki/GlyphData:getHeight)
---
---@diagnostic disable-next-line: args-after-dots
function GlyphData:getHeight() end

---Gets glyph width.
---
---[Wiki](https://love2d.org/wiki/GlyphData:getWidth)
---
---@diagnostic disable-next-line: args-after-dots
function GlyphData:getWidth() end

---Gets font advance.
---
---[Wiki](https://love2d.org/wiki/Rasterizer:getAdvance)
---
---@diagnostic disable-next-line: args-after-dots
function Rasterizer:getAdvance() end

---Gets ascent height.
---
---[Wiki](https://love2d.org/wiki/Rasterizer:getAscent)
---
---@diagnostic disable-next-line: args-after-dots
function Rasterizer:getAscent() end

---Gets descent height.
---
---[Wiki](https://love2d.org/wiki/Rasterizer:getDescent)
---
---@diagnostic disable-next-line: args-after-dots
function Rasterizer:getDescent() end

---Gets number of glyphs in font.
---
---[Wiki](https://love2d.org/wiki/Rasterizer:getGlyphCount)
---
---@diagnostic disable-next-line: args-after-dots
function Rasterizer:getGlyphCount() end

---Gets glyph data of a specified glyph.
---
---[Wiki](https://love2d.org/wiki/Rasterizer:getGlyphData)
---
---@param glyph string# Glyph
---@diagnostic disable-next-line: args-after-dots
function Rasterizer:getGlyphData(glyph) end

---Gets glyph data of a specified glyph.
---
---[Wiki](https://love2d.org/wiki/Rasterizer:getGlyphData)
---
---@param glyphNumber number# Glyph number
---@diagnostic disable-next-line: args-after-dots
function Rasterizer:getGlyphData(glyphNumber) end

---Gets font height.
---
---[Wiki](https://love2d.org/wiki/Rasterizer:getHeight)
---
---@diagnostic disable-next-line: args-after-dots
function Rasterizer:getHeight() end

---Gets line height of a font.
---
---[Wiki](https://love2d.org/wiki/Rasterizer:getLineHeight)
---
---@diagnostic disable-next-line: args-after-dots
function Rasterizer:getLineHeight() end

---Checks if font contains specified glyphs.
---
---[Wiki](https://love2d.org/wiki/Rasterizer:hasGlyphs)
---
---@param glyph1 string|number# Glyph
---@param glyph2 string|number# Glyph
---@param ... string|number# Additional glyphs
---@diagnostic disable-next-line: args-after-dots
function Rasterizer:hasGlyphs(glyph1, glyph2, ...) end

---Creates a new BMFont Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newBMFontRasterizer)
---
---@param imageData love.ImageData# The image data containing the drawable pictures of font glyphs.
---@param glyphs string# The sequence of glyphs in the ImageData.
---@param dpiscale? number# (1) DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newBMFontRasterizer(imageData, glyphs, dpiscale) end

---Creates a new BMFont Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newBMFontRasterizer)
---
---@param fileName string# The path to file containing the drawable pictures of font glyphs.
---@param glyphs string# The sequence of glyphs in the ImageData.
---@param dpiscale? number# (1) DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newBMFontRasterizer(fileName, glyphs, dpiscale) end

---Creates a new GlyphData.
---
---[Wiki](https://love2d.org/wiki/love.font.newGlyphData)
---
---@param rasterizer love.Rasterizer# The Rasterizer containing the font.
---@param glyph number# The character code of the glyph.
---@diagnostic disable-next-line: args-after-dots
function love.font.newGlyphData(rasterizer, glyph) end

---Creates a new Image Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newImageRasterizer)
---
---@param imageData love.ImageData# Font image data.
---@param glyphs string# String containing font glyphs.
---@param extraSpacing? number# (0) Font extra spacing.
---@param dpiscale? number# (1) Font DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newImageRasterizer(imageData, glyphs, extraSpacing, dpiscale) end

---Creates a new Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newRasterizer)
---
---@param filename string# The font file.
---@diagnostic disable-next-line: args-after-dots
function love.font.newRasterizer(filename) end

---Creates a new Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newRasterizer)
---
---@param data love.FileData# The FileData of the font file.
---@diagnostic disable-next-line: args-after-dots
function love.font.newRasterizer(data) end

---Creates a new Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newRasterizer)
---
---@param size? number# (12) The font size.
---@param hinting? love.HintingMode# ('normal') True Type hinting mode.
---@param dpiscale? number# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newRasterizer(size, hinting, dpiscale) end

---Creates a new Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newRasterizer)
---
---@param fileName string# Path to font file.
---@param size? number# (12) The font size.
---@param hinting? love.HintingMode# ('normal') True Type hinting mode.
---@param dpiscale? number# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newRasterizer(fileName, size, hinting, dpiscale) end

---Creates a new Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newRasterizer)
---
---@param fileData love.FileData# File data containing font.
---@param size? number# (12) The font size.
---@param hinting? love.HintingMode# ('normal') True Type hinting mode.
---@param dpiscale? number# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newRasterizer(fileData, size, hinting, dpiscale) end

---Creates a new Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newRasterizer)
---
---@param imageData love.ImageData# The image data containing the drawable pictures of font glyphs.
---@param glyphs string# The sequence of glyphs in the ImageData.
---@param dpiscale? number# (1) DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newRasterizer(imageData, glyphs, dpiscale) end

---Creates a new Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newRasterizer)
---
---@param fileName string# The path to file containing the drawable pictures of font glyphs.
---@param glyphs string# The sequence of glyphs in the ImageData.
---@param dpiscale? number# (1) DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newRasterizer(fileName, glyphs, dpiscale) end

---Creates a new TrueType Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newTrueTypeRasterizer)
---
---@param size? number# (12) The font size.
---@param hinting? love.HintingMode# ('normal') True Type hinting mode.
---@param dpiscale? number# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newTrueTypeRasterizer(size, hinting, dpiscale) end

---Creates a new TrueType Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newTrueTypeRasterizer)
---
---@param fileName string# Path to font file.
---@param size? number# (12) The font size.
---@param hinting? love.HintingMode# ('normal') True Type hinting mode.
---@param dpiscale? number# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newTrueTypeRasterizer(fileName, size, hinting, dpiscale) end

---Creates a new TrueType Rasterizer.
---
---[Wiki](https://love2d.org/wiki/love.font.newTrueTypeRasterizer)
---
---@param fileData love.FileData# File data containing font.
---@param size? number# (12) The font size.
---@param hinting? love.HintingMode# ('normal') True Type hinting mode.
---@param dpiscale? number# (love.window.getDPIScale()) The font DPI scale.
---@diagnostic disable-next-line: args-after-dots
function love.font.newTrueTypeRasterizer(fileData, size, hinting, dpiscale) end

---Generates mipmaps for the Canvas, based on the contents of the highest-resolution mipmap level.
---
---The Canvas must be created with mipmaps set to a MipmapMode other than 'none' for this function to work. It should only be called while the Canvas is not the active render target.
---
---If the mipmap mode is set to 'auto', this function is automatically called inside love.graphics.setCanvas when switching from this Canvas to another Canvas or to the main screen.
---
---[Wiki](https://love2d.org/wiki/Canvas:generateMipmaps)
---
---@diagnostic disable-next-line: args-after-dots
function Canvas:generateMipmaps() end

---Gets the number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.
---
---This may be different than the number used as an argument to love.graphics.newCanvas if the system running LÖVE doesn't support that number.
---
---[Wiki](https://love2d.org/wiki/Canvas:getMSAA)
---
---@diagnostic disable-next-line: args-after-dots
function Canvas:getMSAA() end

---Gets the MipmapMode this Canvas was created with.
---
---[Wiki](https://love2d.org/wiki/Canvas:getMipmapMode)
---
---@diagnostic disable-next-line: args-after-dots
function Canvas:getMipmapMode() end

---Generates ImageData from the contents of the Canvas.
---
---[Wiki](https://love2d.org/wiki/Canvas:newImageData)
---
---@diagnostic disable-next-line: args-after-dots
function Canvas:newImageData() end

---Generates ImageData from the contents of the Canvas.
---
---[Wiki](https://love2d.org/wiki/Canvas:newImageData)
---
---@param slice number# The cubemap face index, array index, or depth layer for cubemap, array, or volume type Canvases, respectively. This argument is ignored for regular 2D canvases.
---@param mipmap? number# (1) The mipmap index to use, for Canvases with mipmaps.
---@param x number# The x-axis of the top-left corner (in pixels) of the area within the Canvas to capture.
---@param y number# The y-axis of the top-left corner (in pixels) of the area within the Canvas to capture.
---@param width number# The width in pixels of the area within the Canvas to capture.
---@param height number# The height in pixels of the area within the Canvas to capture.
---@diagnostic disable-next-line: args-after-dots
function Canvas:newImageData(slice, mipmap, x, y, width, height) end

---Render to the Canvas using a function.
---
---This is a shortcut to love.graphics.setCanvas:
---
---canvas:renderTo( func )
---
---is the same as
---
---love.graphics.setCanvas( canvas )
---
---func()
---
---love.graphics.setCanvas()
---
---[Wiki](https://love2d.org/wiki/Canvas:renderTo)
---
---@param func fun(...:any)# A function performing drawing operations.
---@param ... any# Additional arguments to call the function with.
---@diagnostic disable-next-line: args-after-dots
function Canvas:renderTo(func, ...) end

---Gets the ascent of the Font.
---
---The ascent spans the distance between the baseline and the top of the glyph that reaches farthest from the baseline.
---
---[Wiki](https://love2d.org/wiki/Font:getAscent)
---
---@diagnostic disable-next-line: args-after-dots
function Font:getAscent() end

---Gets the baseline of the Font.
---
---Most scripts share the notion of a baseline: an imaginary horizontal line on which characters rest. In some scripts, parts of glyphs lie below the baseline.
---
---[Wiki](https://love2d.org/wiki/Font:getBaseline)
---
---@diagnostic disable-next-line: args-after-dots
function Font:getBaseline() end

---Gets the DPI scale factor of the Font.
---
---The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the font's glyphs have twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a font with a DPI scale factor of 1.
---
---The font size of TrueType fonts is scaled internally by the font's specified DPI scale factor. By default, LÖVE uses the screen's DPI scale factor when creating TrueType fonts.
---
---[Wiki](https://love2d.org/wiki/Font:getDPIScale)
---
---@diagnostic disable-next-line: args-after-dots
function Font:getDPIScale() end

---Gets the descent of the Font.
---
---The descent spans the distance between the baseline and the lowest descending glyph in a typeface.
---
---[Wiki](https://love2d.org/wiki/Font:getDescent)
---
---@diagnostic disable-next-line: args-after-dots
function Font:getDescent() end

---Gets the filter mode for a font.
---
---[Wiki](https://love2d.org/wiki/Font:getFilter)
---
---@diagnostic disable-next-line: args-after-dots
function Font:getFilter() end

---Gets the height of the Font.
---
---The height of the font is the size including any spacing; the height which it will need.
---
---[Wiki](https://love2d.org/wiki/Font:getHeight)
---
---@diagnostic disable-next-line: args-after-dots
function Font:getHeight() end

---Gets the kerning between two characters in the Font.
---
---Kerning is normally handled automatically in love.graphics.print, Text objects, Font:getWidth, Font:getWrap, etc. This function is useful when stitching text together manually.
---
---[Wiki](https://love2d.org/wiki/Font:getKerning)
---
---@param leftchar string# The left character.
---@param rightchar string# The right character.
---@diagnostic disable-next-line: args-after-dots
function Font:getKerning(leftchar, rightchar) end

---Gets the kerning between two characters in the Font.
---
---Kerning is normally handled automatically in love.graphics.print, Text objects, Font:getWidth, Font:getWrap, etc. This function is useful when stitching text together manually.
---
---[Wiki](https://love2d.org/wiki/Font:getKerning)
---
---@param leftglyph number# The unicode number for the left glyph.
---@param rightglyph number# The unicode number for the right glyph.
---@diagnostic disable-next-line: args-after-dots
function Font:getKerning(leftglyph, rightglyph) end

---Gets the line height.
---
---This will be the value previously set by Font:setLineHeight, or 1.0 by default.
---
---[Wiki](https://love2d.org/wiki/Font:getLineHeight)
---
---@diagnostic disable-next-line: args-after-dots
function Font:getLineHeight() end

---Determines the maximum width (accounting for newlines) taken by the given string.
---
---[Wiki](https://love2d.org/wiki/Font:getWidth)
---
---@param text string# A string.
---@diagnostic disable-next-line: args-after-dots
function Font:getWidth(text) end

---Gets formatting information for text, given a wrap limit.
---
---This function accounts for newlines correctly (i.e. '\n').
---
---[Wiki](https://love2d.org/wiki/Font:getWrap)
---
---@param text string# The text that will be wrapped.
---@param wraplimit number# The maximum width in pixels of each line that ''text'' is allowed before wrapping.
---@diagnostic disable-next-line: args-after-dots
function Font:getWrap(text, wraplimit) end

---Gets formatting information for text, given a wrap limit.
---
---This function accounts for newlines correctly (i.e. '\n').
---
---[Wiki](https://love2d.org/wiki/Font:getWrap)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param wraplimit number# The maximum width in pixels of each line that ''text'' is allowed before wrapping.
---@diagnostic disable-next-line: args-after-dots
function Font:getWrap(coloredtext, wraplimit) end

---Gets whether the Font can render a character or string.
---
---[Wiki](https://love2d.org/wiki/Font:hasGlyphs)
---
---@param text string# A UTF-8 encoded unicode string.
---@diagnostic disable-next-line: args-after-dots
function Font:hasGlyphs(text) end

---Gets whether the Font can render a character or string.
---
---[Wiki](https://love2d.org/wiki/Font:hasGlyphs)
---
---@param character1 string# A unicode character.
---@param character2 string# Another unicode character.
---@diagnostic disable-next-line: args-after-dots
function Font:hasGlyphs(character1, character2) end

---Gets whether the Font can render a character or string.
---
---[Wiki](https://love2d.org/wiki/Font:hasGlyphs)
---
---@param codepoint1 number# A unicode codepoint number.
---@param codepoint2 number# Another unicode codepoint number.
---@diagnostic disable-next-line: args-after-dots
function Font:hasGlyphs(codepoint1, codepoint2) end

---Sets the fallback fonts. When the Font doesn't contain a glyph, it will substitute the glyph from the next subsequent fallback Fonts. This is akin to setting a 'font stack' in Cascading Style Sheets (CSS).
---
---[Wiki](https://love2d.org/wiki/Font:setFallbacks)
---
---@param fallbackfont1 love.Font# The first fallback Font to use.
---@param ... love.Font# Additional fallback Fonts.
---@diagnostic disable-next-line: args-after-dots
function Font:setFallbacks(fallbackfont1, ...) end

---Sets the filter mode for a font.
---
---[Wiki](https://love2d.org/wiki/Font:setFilter)
---
---@param min love.FilterMode# How to scale a font down.
---@param mag love.FilterMode# How to scale a font up.
---@param anisotropy? number# (1) Maximum amount of anisotropic filtering used.
---@diagnostic disable-next-line: args-after-dots
function Font:setFilter(min, mag, anisotropy) end

---Sets the line height.
---
---When rendering the font in lines the actual height will be determined by the line height multiplied by the height of the font. The default is 1.0.
---
---[Wiki](https://love2d.org/wiki/Font:setLineHeight)
---
---@param height number# The new line height.
---@diagnostic disable-next-line: args-after-dots
function Font:setLineHeight(height) end

---Gets whether the Image was created from CompressedData.
---
---Compressed images take up less space in VRAM, and drawing a compressed image will generally be more efficient than drawing one created from raw pixel data.
---
---[Wiki](https://love2d.org/wiki/Image:isCompressed)
---
---@diagnostic disable-next-line: args-after-dots
function Image:isCompressed() end

---Gets whether the Image was created with the linear (non-gamma corrected) flag set to true.
---
---This method always returns false when gamma-correct rendering is not enabled.
---
---[Wiki](https://love2d.org/wiki/Image:isFormatLinear)
---
---@diagnostic disable-next-line: args-after-dots
function Image:isFormatLinear() end

---Replace the contents of an Image.
---
---[Wiki](https://love2d.org/wiki/Image:replacePixels)
---
---@param data love.ImageData# The new ImageData to replace the contents with.
---@param slice? number# (1) Which cubemap face, array index, or volume layer to replace, if applicable.
---@param mipmap? number# (1) The mimap level to replace, if the Image has mipmaps.
---@param x? number# (0) The x-offset in pixels from the top-left of the image to replace. The given ImageData's width plus this value must not be greater than the pixel width of the Image's specified mipmap level.
---@param y? number# (0) The y-offset in pixels from the top-left of the image to replace. The given ImageData's height plus this value must not be greater than the pixel height of the Image's specified mipmap level.
---@param reloadmipmaps? boolean# (false) Whether to generate new mipmaps after replacing the Image's pixels. True by default if the Image was created with automatically generated mipmaps, false by default otherwise.
---@diagnostic disable-next-line: args-after-dots
function Image:replacePixels(data, slice, mipmap, x, y, reloadmipmaps) end

---Attaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. This can be used to share vertex attribute data between several different Meshes.
---
---[Wiki](https://love2d.org/wiki/Mesh:attachAttribute)
---
---@param name string# The name of the vertex attribute to attach.
---@param mesh love.Mesh# The Mesh to get the vertex attribute from.
---@diagnostic disable-next-line: args-after-dots
function Mesh:attachAttribute(name, mesh) end

---Attaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. This can be used to share vertex attribute data between several different Meshes.
---
---[Wiki](https://love2d.org/wiki/Mesh:attachAttribute)
---
---@param name string# The name of the vertex attribute to attach.
---@param mesh love.Mesh# The Mesh to get the vertex attribute from.
---@param step? love.VertexAttributeStep# ('pervertex') Whether the attribute will be per-vertex or per-instance when the mesh is drawn.
---@param attachname? string# (name) The name of the attribute to use in shader code. Defaults to the name of the attribute in the given mesh. Can be used to use a different name for this attribute when rendering.
---@diagnostic disable-next-line: args-after-dots
function Mesh:attachAttribute(name, mesh, step, attachname) end

---Removes a previously attached vertex attribute from this Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:detachAttribute)
---
---@param name string# The name of the attached vertex attribute to detach.
---@diagnostic disable-next-line: args-after-dots
function Mesh:detachAttribute(name) end

---Immediately sends all modified vertex data in the Mesh to the graphics card.
---
---Normally it isn't necessary to call this method as love.graphics.draw(mesh, ...) will do it automatically if needed, but explicitly using **Mesh:flush** gives more control over when the work happens.
---
---If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(mesh, ...) calls.
---
---[Wiki](https://love2d.org/wiki/Mesh:flush)
---
---@diagnostic disable-next-line: args-after-dots
function Mesh:flush() end

---Gets the mode used when drawing the Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:getDrawMode)
---
---@diagnostic disable-next-line: args-after-dots
function Mesh:getDrawMode() end

---Gets the range of vertices used when drawing the Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:getDrawRange)
---
---@diagnostic disable-next-line: args-after-dots
function Mesh:getDrawRange() end

---Gets the texture (Image or Canvas) used when drawing the Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:getTexture)
---
---@diagnostic disable-next-line: args-after-dots
function Mesh:getTexture() end

---Gets the properties of a vertex in the Mesh.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/Mesh:getVertex)
---
---@param index number# The one-based index of the vertex you want to retrieve the information for.
---@diagnostic disable-next-line: args-after-dots
function Mesh:getVertex(index) end

---Gets the properties of a vertex in the Mesh.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/Mesh:getVertex)
---
---@param index number# The index of the vertex you want to retrieve the information for.
---@diagnostic disable-next-line: args-after-dots
function Mesh:getVertex(index) end

---Gets the properties of a specific attribute within a vertex in the Mesh.
---
---Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.
---
---[Wiki](https://love2d.org/wiki/Mesh:getVertexAttribute)
---
---@param vertexindex number# The index of the the vertex you want to retrieve the attribute for (one-based).
---@param attributeindex number# The index of the attribute within the vertex to be retrieved (one-based).
---@diagnostic disable-next-line: args-after-dots
function Mesh:getVertexAttribute(vertexindex, attributeindex) end

---Gets the total number of vertices in the Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:getVertexCount)
---
---@diagnostic disable-next-line: args-after-dots
function Mesh:getVertexCount() end

---Gets the vertex format that the Mesh was created with.
---
---[Wiki](https://love2d.org/wiki/Mesh:getVertexFormat)
---
---@diagnostic disable-next-line: args-after-dots
function Mesh:getVertexFormat() end

---Gets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.
---
---If no vertex map has been set previously via Mesh:setVertexMap, then this function will return nil in LÖVE 0.10.0+, or an empty table in 0.9.2 and older.
---
---[Wiki](https://love2d.org/wiki/Mesh:getVertexMap)
---
---@diagnostic disable-next-line: args-after-dots
function Mesh:getVertexMap() end

---Gets whether a specific vertex attribute in the Mesh is enabled. Vertex data from disabled attributes is not used when drawing the Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:isAttributeEnabled)
---
---@param name string# The name of the vertex attribute to be checked.
---@diagnostic disable-next-line: args-after-dots
function Mesh:isAttributeEnabled(name) end

---Enables or disables a specific vertex attribute in the Mesh. Vertex data from disabled attributes is not used when drawing the Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:setAttributeEnabled)
---
---@param name string# The name of the vertex attribute to enable or disable.
---@param enable boolean# Whether the vertex attribute is used when drawing this Mesh.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setAttributeEnabled(name, enable) end

---Sets the mode used when drawing the Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:setDrawMode)
---
---@param mode love.MeshDrawMode# The mode to use when drawing the Mesh.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setDrawMode(mode) end

---Restricts the drawn vertices of the Mesh to a subset of the total.
---
---[Wiki](https://love2d.org/wiki/Mesh:setDrawRange)
---
---@param start number# The index of the first vertex to use when drawing, or the index of the first value in the vertex map to use if one is set for this Mesh.
---@param count number# The number of vertices to use when drawing, or number of values in the vertex map to use if one is set for this Mesh.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setDrawRange(start, count) end

---Restricts the drawn vertices of the Mesh to a subset of the total.
---
---[Wiki](https://love2d.org/wiki/Mesh:setDrawRange)
---
---@diagnostic disable-next-line: args-after-dots
function Mesh:setDrawRange() end

---Sets the texture (Image or Canvas) used when drawing the Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:setTexture)
---
---@param texture love.Texture# The Image or Canvas to texture the Mesh with when drawing.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setTexture(texture) end

---Sets the texture (Image or Canvas) used when drawing the Mesh.
---
---[Wiki](https://love2d.org/wiki/Mesh:setTexture)
---
---@diagnostic disable-next-line: args-after-dots
function Mesh:setTexture() end

---Sets the properties of a vertex in the Mesh.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertex)
---
---@param index number# The index of the the vertex you want to modify (one-based).
---@param attributecomponent number# The first component of the first vertex attribute in the specified vertex.
---@param ... number# Additional components of all vertex attributes in the specified vertex.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertex(index, attributecomponent, ...) end

---Sets the properties of a vertex in the Mesh.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertex)
---
---@param index number# The index of the the vertex you want to modify (one-based).
---@param vertex {
---attributecomponent : number,
---[...] : number}# A table with vertex information, in the form of {attributecomponent, ...}.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertex(index, vertex) end

---Sets the properties of a vertex in the Mesh.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertex)
---
---@param index number# The index of the the vertex you want to modify (one-based).
---@param x number# The position of the vertex on the x-axis.
---@param y number# The position of the vertex on the y-axis.
---@param u number# The horizontal component of the texture coordinate.
---@param v number# The vertical component of the texture coordinate.
---@param r? number# (1) The red component of the vertex's color.
---@param g? number# (1) The green component of the vertex's color.
---@param b? number# (1) The blue component of the vertex's color.
---@param a? number# (1) The alpha component of the vertex's color.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertex(index, x, y, u, v, r, g, b, a) end

---Sets the properties of a vertex in the Mesh.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertex)
---
---@param index number# The index of the the vertex you want to modify (one-based).
---@param vertex {
---[1] : number,
---[2] : number,
---[3] : number,
---[4] : number,
---[5] : number,
---[6] : number,
---[7] : number,
---[8] : number}# A table with vertex information.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertex(index, vertex) end

---Sets the properties of a specific attribute within a vertex in the Mesh.
---
---Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertexAttribute)
---
---@param vertexindex number# The index of the the vertex to be modified (one-based).
---@param attributeindex number# The index of the attribute within the vertex to be modified (one-based).
---@param value1 number# The new value for the first component of the attribute.
---@param value2 number# The new value for the second component of the attribute.
---@param ... number# Any additional vertex attribute components.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertexAttribute(vertexindex, attributeindex, value1, value2, ...) end

---Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.
---
---The vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertexMap)
---
---@param map table# A table containing a list of vertex indices to use when drawing. Values must be in the range of Mesh:getVertexCount().
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertexMap(map) end

---Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.
---
---The vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertexMap)
---
---@param vi1 number# The index of the first vertex to use when drawing. Must be in the range of Mesh:getVertexCount().
---@param vi2 number# The index of the second vertex to use when drawing.
---@param vi3 number# The index of the third vertex to use when drawing.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertexMap(vi1, vi2, vi3) end

---Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.
---
---The vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertexMap)
---
---@param data love.Data# Array of vertex indices to use when drawing. Values must be in the range of Mesh:getVertexCount()-1
---@param datatype love.IndexDataType# Datatype of the vertex indices array above.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertexMap(data, datatype) end

---Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertices)
---
---@param vertices {
---attributecomponent : number,
---[...] : number}# The table filled with vertex information tables for each vertex, in the form of {vertex, ...} where each vertex is a table in the form of {attributecomponent, ...}.
---@param startvertex? number# (1) The index of the first vertex to replace.
---@param count? number# (all) Amount of vertices to replace.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertices(vertices, startvertex, count) end

---Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertices)
---
---@param data love.Data# A Data object to copy from. The contents of the Data must match the layout of this Mesh's vertex format.
---@param startvertex? number# (1) The index of the first vertex to replace.
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertices(data, startvertex) end

---Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop.
---
---[Wiki](https://love2d.org/wiki/Mesh:setVertices)
---
---@param vertices {
---[1] : number,
---[2] : number,
---[3] : number,
---[4] : number,
---[5] : number,
---[6] : number,
---[7] : number,
---[8] : number}# The table filled with vertex information tables for each vertex as follows:
---@diagnostic disable-next-line: args-after-dots
function Mesh:setVertices(vertices) end

---Creates an identical copy of the ParticleSystem in the stopped state.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:clone)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:clone() end

---Emits a burst of particles from the particle emitter.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:emit)
---
---@param numparticles number# The amount of particles to emit. The number of emitted particles will be truncated if the particle system's max buffer size is reached.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:emit(numparticles) end

---Gets the maximum number of particles the ParticleSystem can have at once.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getBufferSize)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getBufferSize() end

---Gets the series of colors applied to the particle sprite.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getColors)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getColors() end

---Gets the number of particles that are currently in the system.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getCount)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getCount() end

---Gets the direction of the particle emitter (in radians).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getDirection)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getDirection() end

---Gets the area-based spawn parameters for the particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getEmissionArea)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getEmissionArea() end

---Gets the amount of particles emitted per second.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getEmissionRate)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getEmissionRate() end

---Gets how long the particle system will emit particles (if -1 then it emits particles forever).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getEmitterLifetime)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getEmitterLifetime() end

---Gets the mode used when the ParticleSystem adds new particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getInsertMode)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getInsertMode() end

---Gets the linear acceleration (acceleration along the x and y axes) for particles.
---
---Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getLinearAcceleration)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getLinearAcceleration() end

---Gets the amount of linear damping (constant deceleration) for particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getLinearDamping)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getLinearDamping() end

---Gets the particle image's draw offset.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getOffset)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getOffset() end

---Gets the lifetime of the particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getParticleLifetime)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getParticleLifetime() end

---Gets the position of the emitter.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getPosition)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getPosition() end

---Gets the series of Quads used for the particle sprites.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getQuads)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getQuads() end

---Gets the radial acceleration (away from the emitter).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getRadialAcceleration)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getRadialAcceleration() end

---Gets the rotation of the image upon particle creation (in radians).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getRotation)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getRotation() end

---Gets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getSizeVariation)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getSizeVariation() end

---Gets the series of sizes by which the sprite is scaled. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getSizes)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getSizes() end

---Gets the speed of the particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getSpeed)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getSpeed() end

---Gets the spin of the sprite.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getSpin)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getSpin() end

---Gets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getSpinVariation)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getSpinVariation() end

---Gets the amount of directional spread of the particle emitter (in radians).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getSpread)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getSpread() end

---Gets the tangential acceleration (acceleration perpendicular to the particle's direction).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getTangentialAcceleration)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getTangentialAcceleration() end

---Gets the texture (Image or Canvas) used for the particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:getTexture)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:getTexture() end

---Gets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:hasRelativeRotation)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:hasRelativeRotation() end

---Checks whether the particle system is actively emitting particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:isActive)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:isActive() end

---Checks whether the particle system is paused.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:isPaused)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:isPaused() end

---Checks whether the particle system is stopped.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:isStopped)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:isStopped() end

---Moves the position of the emitter. This results in smoother particle spawning behaviour than if ParticleSystem:setPosition is used every frame.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:moveTo)
---
---@param x number# Position along x-axis.
---@param y number# Position along y-axis.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:moveTo(x, y) end

---Pauses the particle emitter.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:pause)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:pause() end

---Resets the particle emitter, removing any existing particles and resetting the lifetime counter.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:reset)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:reset() end

---Sets the size of the buffer (the max allowed amount of particles in the system).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setBufferSize)
---
---@param size number# The buffer size.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setBufferSize(size) end

---Sets a series of colors to apply to the particle sprite. The particle system will interpolate between each color evenly over the particle's lifetime.
---
---Arguments can be passed in groups of four, representing the components of the desired RGBA value, or as tables of RGBA component values, with a default alpha value of 1 if only three values are given. At least one color must be specified. A maximum of eight may be used.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setColors)
---
---@param r1 number# First color, red component (0-1).
---@param g1 number# First color, green component (0-1).
---@param b1 number# First color, blue component (0-1).
---@param a1? number# (1) First color, alpha component (0-1).
---@param ... number# Additional colors.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setColors(r1, g1, b1, a1, ...) end

---Sets a series of colors to apply to the particle sprite. The particle system will interpolate between each color evenly over the particle's lifetime.
---
---Arguments can be passed in groups of four, representing the components of the desired RGBA value, or as tables of RGBA component values, with a default alpha value of 1 if only three values are given. At least one color must be specified. A maximum of eight may be used.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setColors)
---
---@param rgba1 table[]# First color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1). The alpha is optional and defaults to 1 if it is left out.
---@param ... table[]# Additional color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1). The alpha is optional and defaults to 1 if it is left out.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setColors(rgba1, ...) end

---Sets the direction the particles will be emitted in.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setDirection)
---
---@param direction number# The direction of the particles (in radians).
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setDirection(direction) end

---Sets area-based spawn parameters for the particles. Newly created particles will spawn in an area around the emitter based on the parameters to this function.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setEmissionArea)
---
---@param distribution love.AreaSpreadDistribution# The type of distribution for new particles.
---@param dx number# The maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution.
---@param dy number# The maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution.
---@param angle? number# (0) The angle in radians of the emission area.
---@param directionRelativeToCenter? boolean# (false) True if newly spawned particles will be oriented relative to the center of the emission area, false otherwise.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setEmissionArea(distribution, dx, dy, angle, directionRelativeToCenter) end

---Sets the amount of particles emitted per second.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setEmissionRate)
---
---@param rate number# The amount of particles per second.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setEmissionRate(rate) end

---Sets how long the particle system should emit particles (if -1 then it emits particles forever).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setEmitterLifetime)
---
---@param life number# The lifetime of the emitter (in seconds).
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setEmitterLifetime(life) end

---Sets the mode to use when the ParticleSystem adds new particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setInsertMode)
---
---@param mode love.ParticleInsertMode# The mode to use when the ParticleSystem adds new particles.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setInsertMode(mode) end

---Sets the linear acceleration (acceleration along the x and y axes) for particles.
---
---Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setLinearAcceleration)
---
---@param xmin number# The minimum acceleration along the x axis.
---@param ymin number# The minimum acceleration along the y axis.
---@param xmax? number# (xmin) The maximum acceleration along the x axis.
---@param ymax? number# (ymin) The maximum acceleration along the y axis.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setLinearAcceleration(xmin, ymin, xmax, ymax) end

---Sets the amount of linear damping (constant deceleration) for particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setLinearDamping)
---
---@param min number# The minimum amount of linear damping applied to particles.
---@param max? number# (min) The maximum amount of linear damping applied to particles.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setLinearDamping(min, max) end

---Set the offset position which the particle sprite is rotated around.
---
---If this function is not used, the particles rotate around their center.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setOffset)
---
---@param x number# The x coordinate of the rotation offset.
---@param y number# The y coordinate of the rotation offset.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setOffset(x, y) end

---Sets the lifetime of the particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setParticleLifetime)
---
---@param min number# The minimum life of the particles (in seconds).
---@param max? number# (min) The maximum life of the particles (in seconds).
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setParticleLifetime(min, max) end

---Sets the position of the emitter.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setPosition)
---
---@param x number# Position along x-axis.
---@param y number# Position along y-axis.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setPosition(x, y) end

---Sets a series of Quads to use for the particle sprites. Particles will choose a Quad from the list based on the particle's current lifetime, allowing for the use of animated sprite sheets with ParticleSystems.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setQuads)
---
---@param quad1 love.Quad# The first Quad to use.
---@param ... love.Quad# Additional Quads to use.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setQuads(quad1, ...) end

---Sets a series of Quads to use for the particle sprites. Particles will choose a Quad from the list based on the particle's current lifetime, allowing for the use of animated sprite sheets with ParticleSystems.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setQuads)
---
---@param quads table[]# A table containing the Quads to use.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setQuads(quads) end

---Set the radial acceleration (away from the emitter).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setRadialAcceleration)
---
---@param min number# The minimum acceleration.
---@param max? number# (min) The maximum acceleration.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setRadialAcceleration(min, max) end

---Sets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setRelativeRotation)
---
---@param enable boolean# True to enable relative particle rotation, false to disable it.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setRelativeRotation(enable) end

---Sets the rotation of the image upon particle creation (in radians).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setRotation)
---
---@param min number# The minimum initial angle (radians).
---@param max? number# (min) The maximum initial angle (radians).
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setRotation(min, max) end

---Sets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setSizeVariation)
---
---@param variation number# The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setSizeVariation(variation) end

---Sets a series of sizes by which to scale a particle sprite. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.
---
---At least one size must be specified. A maximum of eight may be used.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setSizes)
---
---@param size1 number# The first size.
---@param size2? number# (nil) The second size.
---@param size8? number# (nil) The eighth size.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setSizes(size1, size2, size8) end

---Sets the speed of the particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setSpeed)
---
---@param min number# The minimum linear speed of the particles.
---@param max? number# (min) The maximum linear speed of the particles.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setSpeed(min, max) end

---Sets the spin of the sprite.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setSpin)
---
---@param min number# The minimum spin (radians per second).
---@param max? number# (min) The maximum spin (radians per second).
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setSpin(min, max) end

---Sets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setSpinVariation)
---
---@param variation number# The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setSpinVariation(variation) end

---Sets the amount of spread for the system.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setSpread)
---
---@param spread number# The amount of spread (radians).
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setSpread(spread) end

---Sets the tangential acceleration (acceleration perpendicular to the particle's direction).
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setTangentialAcceleration)
---
---@param min number# The minimum acceleration.
---@param max? number# (min) The maximum acceleration.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setTangentialAcceleration(min, max) end

---Sets the texture (Image or Canvas) to be used for the particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:setTexture)
---
---@param texture love.Texture# An Image or Canvas to use for the particles.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:setTexture(texture) end

---Starts the particle emitter.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:start)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:start() end

---Stops the particle emitter, resetting the lifetime counter.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:stop)
---
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:stop() end

---Updates the particle system; moving, creating and killing particles.
---
---[Wiki](https://love2d.org/wiki/ParticleSystem:update)
---
---@param dt number# The time (seconds) since last frame.
---@diagnostic disable-next-line: args-after-dots
function ParticleSystem:update(dt) end

---Gets reference texture dimensions initially specified in love.graphics.newQuad.
---
---[Wiki](https://love2d.org/wiki/Quad:getTextureDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function Quad:getTextureDimensions() end

---Gets the current viewport of this Quad.
---
---[Wiki](https://love2d.org/wiki/Quad:getViewport)
---
---@diagnostic disable-next-line: args-after-dots
function Quad:getViewport() end

---Sets the texture coordinates according to a viewport.
---
---[Wiki](https://love2d.org/wiki/Quad:setViewport)
---
---@param x number# The top-left corner along the x-axis.
---@param y number# The top-left corner along the y-axis.
---@param w number# The width of the viewport.
---@param h number# The height of the viewport.
---@param sw? number# (nil) Optional new reference width, the width of the Texture. Must be greater than 0 if set.
---@param sh? number# (nil) Optional new reference height, the height of the Texture. Must be greater than 0 if set.
---@diagnostic disable-next-line: args-after-dots
function Quad:setViewport(x, y, w, h, sw, sh) end

---Returns any warning and error messages from compiling the shader code. This can be used for debugging your shaders if there's anything the graphics hardware doesn't like.
---
---[Wiki](https://love2d.org/wiki/Shader:getWarnings)
---
---@diagnostic disable-next-line: args-after-dots
function Shader:getWarnings() end

---Gets whether a uniform / extern variable exists in the Shader.
---
---If a graphics driver's shader compiler determines that a uniform / extern variable doesn't affect the final output of the shader, it may optimize the variable out. This function will return false in that case.
---
---[Wiki](https://love2d.org/wiki/Shader:hasUniform)
---
---@param name string# The name of the uniform variable.
---@diagnostic disable-next-line: args-after-dots
function Shader:hasUniform(name) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
---
---uniform float time;  // 'float' is the typical number type used in GLSL shaders.
---
---uniform float varsvec2 light_pos;
---
---uniform vec4 colors[4;
---
---The corresponding send calls would be
---
---shader:send('time', t)
---
---shader:send('vars',a,b)
---
---shader:send('light_pos', {light_x, light_y})
---
---shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
---
---Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---
---[Wiki](https://love2d.org/wiki/Shader:send)
---
---@param name string# Name of the number to send to the shader.
---@param number number# Number to send to store in the uniform variable.
---@param ... number# Additional numbers to send if the uniform variable is an array.
---@diagnostic disable-next-line: args-after-dots
function Shader:send(name, number, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
---
---uniform float time;  // 'float' is the typical number type used in GLSL shaders.
---
---uniform float varsvec2 light_pos;
---
---uniform vec4 colors[4;
---
---The corresponding send calls would be
---
---shader:send('time', t)
---
---shader:send('vars',a,b)
---
---shader:send('light_pos', {light_x, light_y})
---
---shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
---
---Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---
---[Wiki](https://love2d.org/wiki/Shader:send)
---
---@param name string# Name of the vector to send to the shader.
---@param vector table# Numbers to send to the uniform variable as a vector. The number of elements in the table determines the type of the vector (e.g. two numbers -&gt; vec2). At least two and at most four numbers can be used.
---@param ... table# Additional vectors to send if the uniform variable is an array. All vectors need to be of the same size (e.g. only vec3's).
---@diagnostic disable-next-line: args-after-dots
function Shader:send(name, vector, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
---
---uniform float time;  // 'float' is the typical number type used in GLSL shaders.
---
---uniform float varsvec2 light_pos;
---
---uniform vec4 colors[4;
---
---The corresponding send calls would be
---
---shader:send('time', t)
---
---shader:send('vars',a,b)
---
---shader:send('light_pos', {light_x, light_y})
---
---shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
---
---Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---
---[Wiki](https://love2d.org/wiki/Shader:send)
---
---@param name string# Name of the matrix to send to the shader.
---@param matrix table# 2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using table form: {{a,b,c,d}, {e,f,g,h}, ... } or (since version 0.10.2) {a,b,c,d, e,f,g,h, ...}. The order in 0.10.2 is column-major; starting in 11.0 it's row-major instead.
---@param ... table# Additional matrices of the same type as ''matrix'' to store in a uniform array.
---@diagnostic disable-next-line: args-after-dots
function Shader:send(name, matrix, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
---
---uniform float time;  // 'float' is the typical number type used in GLSL shaders.
---
---uniform float varsvec2 light_pos;
---
---uniform vec4 colors[4;
---
---The corresponding send calls would be
---
---shader:send('time', t)
---
---shader:send('vars',a,b)
---
---shader:send('light_pos', {light_x, light_y})
---
---shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
---
---Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---
---[Wiki](https://love2d.org/wiki/Shader:send)
---
---@param name string# Name of the Texture to send to the shader.
---@param texture love.Texture# Texture (Image or Canvas) to send to the uniform variable.
---@diagnostic disable-next-line: args-after-dots
function Shader:send(name, texture) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
---
---uniform float time;  // 'float' is the typical number type used in GLSL shaders.
---
---uniform float varsvec2 light_pos;
---
---uniform vec4 colors[4;
---
---The corresponding send calls would be
---
---shader:send('time', t)
---
---shader:send('vars',a,b)
---
---shader:send('light_pos', {light_x, light_y})
---
---shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
---
---Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---
---[Wiki](https://love2d.org/wiki/Shader:send)
---
---@param name string# Name of the boolean to send to the shader.
---@param boolean boolean# Boolean to send to store in the uniform variable.
---@param ... boolean# Additional booleans to send if the uniform variable is an array.
---@diagnostic disable-next-line: args-after-dots
function Shader:send(name, boolean, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
---
---uniform float time;  // 'float' is the typical number type used in GLSL shaders.
---
---uniform float varsvec2 light_pos;
---
---uniform vec4 colors[4;
---
---The corresponding send calls would be
---
---shader:send('time', t)
---
---shader:send('vars',a,b)
---
---shader:send('light_pos', {light_x, light_y})
---
---shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
---
---Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---
---[Wiki](https://love2d.org/wiki/Shader:send)
---
---@param name string# Name of the matrix to send to the shader.
---@param matrixlayout love.MatrixLayout# The layout (row- or column-major) of the matrix.
---@param matrix table# 2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using table form: {{a,b,c,d}, {e,f,g,h}, ... } or {a,b,c,d, e,f,g,h, ...}.
---@param ... table# Additional matrices of the same type as ''matrix'' to store in a uniform array.
---@diagnostic disable-next-line: args-after-dots
function Shader:send(name, matrixlayout, matrix, ...) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
---
---uniform float time;  // 'float' is the typical number type used in GLSL shaders.
---
---uniform float varsvec2 light_pos;
---
---uniform vec4 colors[4;
---
---The corresponding send calls would be
---
---shader:send('time', t)
---
---shader:send('vars',a,b)
---
---shader:send('light_pos', {light_x, light_y})
---
---shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
---
---Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---
---[Wiki](https://love2d.org/wiki/Shader:send)
---
---@param name string# Name of the uniform to send to the shader.
---@param data love.Data# Data object containing the values to send.
---@param offset? number# (0) Offset in bytes from the start of the Data object.
---@param size? number# (all) Size in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.
---@diagnostic disable-next-line: args-after-dots
function Shader:send(name, data, offset, size) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
---
---uniform float time;  // 'float' is the typical number type used in GLSL shaders.
---
---uniform float varsvec2 light_pos;
---
---uniform vec4 colors[4;
---
---The corresponding send calls would be
---
---shader:send('time', t)
---
---shader:send('vars',a,b)
---
---shader:send('light_pos', {light_x, light_y})
---
---shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
---
---Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---
---[Wiki](https://love2d.org/wiki/Shader:send)
---
---@param name string# Name of the uniform matrix to send to the shader.
---@param data love.Data# Data object containing the values to send.
---@param matrixlayout love.MatrixLayout# The layout (row- or column-major) of the matrix in memory.
---@param offset? number# (0) Offset in bytes from the start of the Data object.
---@param size? number# (all) Size in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.
---@diagnostic disable-next-line: args-after-dots
function Shader:send(name, data, matrixlayout, offset, size) end

---Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.
---
---uniform float time;  // 'float' is the typical number type used in GLSL shaders.
---
---uniform float varsvec2 light_pos;
---
---uniform vec4 colors[4;
---
---The corresponding send calls would be
---
---shader:send('time', t)
---
---shader:send('vars',a,b)
---
---shader:send('light_pos', {light_x, light_y})
---
---shader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})
---
---Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.
---
---[Wiki](https://love2d.org/wiki/Shader:send)
---
---@param name string# Name of the uniform matrix to send to the shader.
---@param matrixlayout love.MatrixLayout# The layout (row- or column-major) of the matrix in memory.
---@param data love.Data# Data object containing the values to send.
---@param offset? number# (0) Offset in bytes from the start of the Data object.
---@param size? number# (all) Size in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.
---@diagnostic disable-next-line: args-after-dots
function Shader:send(name, matrixlayout, data, offset, size) end

---Sends one or more colors to a special (''extern'' / ''uniform'') vec3 or vec4 variable inside the shader. The color components must be in the range of 1. The colors are gamma-corrected if global gamma-correction is enabled.
---
---Extern variables must be marked using the ''extern'' keyword, e.g.
---
---extern vec4 Color;
---
---The corresponding sendColor call would be
---
---shader:sendColor('Color', {r, g, b, a})
---
---Extern variables can be accessed in both the Vertex and Pixel stages of a shader, as long as the variable is declared in each.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/Shader:sendColor)
---
---@param name string# The name of the color extern variable to send to in the shader.
---@param color table[]# A table with red, green, blue, and optional alpha color components in the range of 1 to send to the extern as a vector.
---@param ... table[]# Additional colors to send in case the extern is an array. All colors need to be of the same size (e.g. only vec3's).
---@diagnostic disable-next-line: args-after-dots
function Shader:sendColor(name, color, ...) end

---Adds a sprite to the batch. Sprites are drawn in the order they are added.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:add)
---
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shear factor (x-axis).
---@param ky? number# (0) Shear factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:add(x, y, r, sx, sy, ox, oy, kx, ky) end

---Adds a sprite to the batch. Sprites are drawn in the order they are added.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:add)
---
---@param quad love.Quad# The Quad to add.
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shear factor (x-axis).
---@param ky? number# (0) Shear factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:add(quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Adds a sprite to a batch created with an Array Texture.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:addLayer)
---
---@param layerindex number# The index of the layer to use for this sprite.
---@param x? number# (0) The position to draw the sprite (x-axis).
---@param y? number# (0) The position to draw the sprite (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:addLayer(layerindex, x, y, r, sx, sy, ox, oy, kx, ky) end

---Adds a sprite to a batch created with an Array Texture.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:addLayer)
---
---@param layerindex number# The index of the layer to use for this sprite.
---@param quad love.Quad# The subsection of the texture's layer to use when drawing the sprite.
---@param x? number# (0) The position to draw the sprite (x-axis).
---@param y? number# (0) The position to draw the sprite (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:addLayer(layerindex, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Adds a sprite to a batch created with an Array Texture.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:addLayer)
---
---@param layerindex number# The index of the layer to use for this sprite.
---@param transform love.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:addLayer(layerindex, transform) end

---Adds a sprite to a batch created with an Array Texture.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:addLayer)
---
---@param layerindex number# The index of the layer to use for this sprite.
---@param quad love.Quad# The subsection of the texture's layer to use when drawing the sprite.
---@param transform love.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:addLayer(layerindex, quad, transform) end

---Attaches a per-vertex attribute from a Mesh onto this SpriteBatch, for use when drawing. This can be combined with a Shader to augment a SpriteBatch with per-vertex or additional per-sprite information instead of just having per-sprite colors.
---
---Each sprite in a SpriteBatch has 4 vertices in the following order: top-left, bottom-left, top-right, bottom-right. The index returned by SpriteBatch:add (and used by SpriteBatch:set) can used to determine the first vertex of a specific sprite with the formula 1 + 4 * ( id - 1 ).
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:attachAttribute)
---
---@param name string# The name of the vertex attribute to attach.
---@param mesh love.Mesh# The Mesh to get the vertex attribute from.
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:attachAttribute(name, mesh) end

---Removes all sprites from the buffer.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:clear)
---
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:clear() end

---Immediately sends all new and modified sprite data in the batch to the graphics card.
---
---Normally it isn't necessary to call this method as love.graphics.draw(spritebatch, ...) will do it automatically if needed, but explicitly using SpriteBatch:flush gives more control over when the work happens.
---
---If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(spritebatch, ...) calls.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:flush)
---
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:flush() end

---Gets the maximum number of sprites the SpriteBatch can hold.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:getBufferSize)
---
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:getBufferSize() end

---Gets the color that will be used for the next add and set operations.
---
---If no color has been set with SpriteBatch:setColor or the current SpriteBatch color has been cleared, this method will return nil.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:getColor)
---
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:getColor() end

---Gets the number of sprites currently in the SpriteBatch.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:getCount)
---
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:getCount() end

---Gets the texture (Image or Canvas) used by the SpriteBatch.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:getTexture)
---
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:getTexture() end

---Changes a sprite in the batch. This requires the sprite index returned by SpriteBatch:add or SpriteBatch:addLayer.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:set)
---
---@param spriteindex number# The index of the sprite that will be changed.
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shear factor (x-axis).
---@param ky? number# (0) Shear factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:set(spriteindex, x, y, r, sx, sy, ox, oy, kx, ky) end

---Changes a sprite in the batch. This requires the sprite index returned by SpriteBatch:add or SpriteBatch:addLayer.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:set)
---
---@param spriteindex number# The index of the sprite that will be changed.
---@param quad love.Quad# The Quad used on the image of the batch.
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shear factor (x-axis).
---@param ky? number# (0) Shear factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:set(spriteindex, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Sets the color that will be used for the next add and set operations. Calling the function without arguments will disable all per-sprite colors for the SpriteBatch.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---In version 0.9.2 and older, the global color set with love.graphics.setColor will not work on the SpriteBatch if any of the sprites has its own color.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:setColor)
---
---@param r number# The amount of red.
---@param g number# The amount of green.
---@param b number# The amount of blue.
---@param a? number# (1) The amount of alpha.
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:setColor(r, g, b, a) end

---Sets the color that will be used for the next add and set operations. Calling the function without arguments will disable all per-sprite colors for the SpriteBatch.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---In version 0.9.2 and older, the global color set with love.graphics.setColor will not work on the SpriteBatch if any of the sprites has its own color.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:setColor)
---
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:setColor() end

---Restricts the drawn sprites in the SpriteBatch to a subset of the total.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:setDrawRange)
---
---@param start number# The index of the first sprite to draw. Index 1 corresponds to the first sprite added with SpriteBatch:add.
---@param count number# The number of sprites to draw.
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:setDrawRange(start, count) end

---Restricts the drawn sprites in the SpriteBatch to a subset of the total.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:setDrawRange)
---
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:setDrawRange() end

---Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:setLayer)
---
---@param spriteindex number# The index of the existing sprite to replace.
---@param layerindex number# The index of the layer in the Array Texture to use for this sprite.
---@param x? number# (0) The position to draw the sprite (x-axis).
---@param y? number# (0) The position to draw the sprite (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:setLayer(spriteindex, layerindex, x, y, r, sx, sy, ox, oy, kx, ky) end

---Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:setLayer)
---
---@param spriteindex number# The index of the existing sprite to replace.
---@param layerindex number# The index of the layer to use for this sprite.
---@param quad love.Quad# The subsection of the texture's layer to use when drawing the sprite.
---@param x? number# (0) The position to draw the sprite (x-axis).
---@param y? number# (0) The position to draw the sprite (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:setLayer(spriteindex, layerindex, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:setLayer)
---
---@param spriteindex number# The index of the existing sprite to replace.
---@param layerindex number# The index of the layer to use for the sprite.
---@param transform love.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:setLayer(spriteindex, layerindex, transform) end

---Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:setLayer)
---
---@param spriteindex number# The index of the existing sprite to replace.
---@param layerindex number# The index of the layer to use for the sprite.
---@param quad love.Quad# The subsection of the texture's layer to use when drawing the sprite.
---@param transform love.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:setLayer(spriteindex, layerindex, quad, transform) end

---Sets the texture (Image or Canvas) used for the sprites in the batch, when drawing.
---
---[Wiki](https://love2d.org/wiki/SpriteBatch:setTexture)
---
---@param texture love.Texture# The new Image or Canvas to use for the sprites in the batch.
---@diagnostic disable-next-line: args-after-dots
function SpriteBatch:setTexture(texture) end

---Adds additional colored text to the Text object at the specified position.
---
---[Wiki](https://love2d.org/wiki/Text:add)
---
---@param textstring string# The text to add to the object.
---@param x? number# (0) The position of the new text on the x-axis.
---@param y? number# (0) The position of the new text on the y-axis.
---@param angle? number# (0) The orientation of the new text in radians.
---@param sx? number# (1) Scale factor on the x-axis.
---@param sy? number# (sx) Scale factor on the y-axis.
---@param ox? number# (0) Origin offset on the x-axis.
---@param oy? number# (0) Origin offset on the y-axis.
---@param kx? number# (0) Shearing / skew factor on the x-axis.
---@param ky? number# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots
function Text:add(textstring, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Adds additional colored text to the Text object at the specified position.
---
---[Wiki](https://love2d.org/wiki/Text:add)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param x? number# (0) The position of the new text on the x-axis.
---@param y? number# (0) The position of the new text on the y-axis.
---@param angle? number# (0) The orientation of the new text in radians.
---@param sx? number# (1) Scale factor on the x-axis.
---@param sy? number# (sx) Scale factor on the y-axis.
---@param ox? number# (0) Origin offset on the x-axis.
---@param oy? number# (0) Origin offset on the y-axis.
---@param kx? number# (0) Shearing / skew factor on the x-axis.
---@param ky? number# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots
function Text:add(coloredtext, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Adds additional formatted / colored text to the Text object at the specified position.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---[Wiki](https://love2d.org/wiki/Text:addf)
---
---@param textstring string# The text to add to the object.
---@param wraplimit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align love.AlignMode# The alignment of the text.
---@param x number# The position of the new text (x-axis).
---@param y number# The position of the new text (y-axis).
---@param angle? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing / skew factor (x-axis).
---@param ky? number# (0) Shearing / skew factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function Text:addf(textstring, wraplimit, align, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Adds additional formatted / colored text to the Text object at the specified position.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---[Wiki](https://love2d.org/wiki/Text:addf)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param wraplimit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align love.AlignMode# The alignment of the text.
---@param x number# The position of the new text (x-axis).
---@param y number# The position of the new text (y-axis).
---@param angle? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing / skew factor (x-axis).
---@param ky? number# (0) Shearing / skew factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function Text:addf(coloredtext, wraplimit, align, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Clears the contents of the Text object.
---
---[Wiki](https://love2d.org/wiki/Text:clear)
---
---@diagnostic disable-next-line: args-after-dots
function Text:clear() end

---Gets the width and height of the text in pixels.
---
---[Wiki](https://love2d.org/wiki/Text:getDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function Text:getDimensions() end

---Gets the width and height of the text in pixels.
---
---[Wiki](https://love2d.org/wiki/Text:getDimensions)
---
---@param index number# An index number returned by Text:add or Text:addf.
---@diagnostic disable-next-line: args-after-dots
function Text:getDimensions(index) end

---Gets the Font used with the Text object.
---
---[Wiki](https://love2d.org/wiki/Text:getFont)
---
---@diagnostic disable-next-line: args-after-dots
function Text:getFont() end

---Gets the height of the text in pixels.
---
---[Wiki](https://love2d.org/wiki/Text:getHeight)
---
---@diagnostic disable-next-line: args-after-dots
function Text:getHeight() end

---Gets the height of the text in pixels.
---
---[Wiki](https://love2d.org/wiki/Text:getHeight)
---
---@param index number# An index number returned by Text:add or Text:addf.
---@diagnostic disable-next-line: args-after-dots
function Text:getHeight(index) end

---Gets the width of the text in pixels.
---
---[Wiki](https://love2d.org/wiki/Text:getWidth)
---
---@diagnostic disable-next-line: args-after-dots
function Text:getWidth() end

---Gets the width of the text in pixels.
---
---[Wiki](https://love2d.org/wiki/Text:getWidth)
---
---@param index number# An index number returned by Text:add or Text:addf.
---@diagnostic disable-next-line: args-after-dots
function Text:getWidth(index) end

---Replaces the contents of the Text object with a new unformatted string.
---
---[Wiki](https://love2d.org/wiki/Text:set)
---
---@param textstring string# The new string of text to use.
---@diagnostic disable-next-line: args-after-dots
function Text:set(textstring) end

---Replaces the contents of the Text object with a new unformatted string.
---
---[Wiki](https://love2d.org/wiki/Text:set)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to use as the new text, in the form of {color1, string1, color2, string2, ...}.
---@diagnostic disable-next-line: args-after-dots
function Text:set(coloredtext) end

---Replaces the Font used with the text.
---
---[Wiki](https://love2d.org/wiki/Text:setFont)
---
---@param font love.Font# The new font to use with this Text object.
---@diagnostic disable-next-line: args-after-dots
function Text:setFont(font) end

---Replaces the contents of the Text object with a new formatted string.
---
---[Wiki](https://love2d.org/wiki/Text:setf)
---
---@param textstring string# The new string of text to use.
---@param wraplimit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align love.AlignMode# The alignment of the text.
---@diagnostic disable-next-line: args-after-dots
function Text:setf(textstring, wraplimit, align) end

---Replaces the contents of the Text object with a new formatted string.
---
---[Wiki](https://love2d.org/wiki/Text:setf)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to use as the new text, in the form of {color1, string1, color2, string2, ...}.
---@param wraplimit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align love.AlignMode# The alignment of the text.
---@diagnostic disable-next-line: args-after-dots
function Text:setf(coloredtext, wraplimit, align) end

---Gets the DPI scale factor of the Texture.
---
---The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1.
---
---For example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi /  retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic.
---
---[Wiki](https://love2d.org/wiki/Texture:getDPIScale)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getDPIScale() end

---Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures.
---
---[Wiki](https://love2d.org/wiki/Texture:getDepth)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getDepth() end

---Gets the comparison mode used when sampling from a depth texture in a shader.
---
---Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.
---
---[Wiki](https://love2d.org/wiki/Texture:getDepthSampleMode)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getDepthSampleMode() end

---Gets the width and height of the Texture.
---
---[Wiki](https://love2d.org/wiki/Texture:getDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getDimensions() end

---Gets the filter mode of the Texture.
---
---[Wiki](https://love2d.org/wiki/Texture:getFilter)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getFilter() end

---Gets the pixel format of the Texture.
---
---[Wiki](https://love2d.org/wiki/Texture:getFormat)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getFormat() end

---Gets the height of the Texture.
---
---[Wiki](https://love2d.org/wiki/Texture:getHeight)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getHeight() end

---Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures.
---
---[Wiki](https://love2d.org/wiki/Texture:getLayerCount)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getLayerCount() end

---Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1.
---
---[Wiki](https://love2d.org/wiki/Texture:getMipmapCount)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getMipmapCount() end

---Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.
---
---[Wiki](https://love2d.org/wiki/Texture:getMipmapFilter)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getMipmapFilter() end

---Gets the width and height in pixels of the Texture.
---
---Texture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData.
---
---[Wiki](https://love2d.org/wiki/Texture:getPixelDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getPixelDimensions() end

---Gets the height in pixels of the Texture.
---
---DPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData.
---
---[Wiki](https://love2d.org/wiki/Texture:getPixelHeight)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getPixelHeight() end

---Gets the width in pixels of the Texture.
---
---DPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData.
---
---[Wiki](https://love2d.org/wiki/Texture:getPixelWidth)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getPixelWidth() end

---Gets the type of the Texture.
---
---[Wiki](https://love2d.org/wiki/Texture:getTextureType)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getTextureType() end

---Gets the width of the Texture.
---
---[Wiki](https://love2d.org/wiki/Texture:getWidth)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getWidth() end

---Gets the wrapping properties of a Texture.
---
---This function returns the currently set horizontal and vertical wrapping modes for the texture.
---
---[Wiki](https://love2d.org/wiki/Texture:getWrap)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:getWrap() end

---Gets whether the Texture can be drawn and sent to a Shader.
---
---Canvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas.
---
---Non-readable Canvases can still be rendered to.
---
---[Wiki](https://love2d.org/wiki/Texture:isReadable)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:isReadable() end

---Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.
---
---When using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation.
---
---Depth texture comparison can only be used with readable depth-formatted Canvases.
---
---[Wiki](https://love2d.org/wiki/Texture:setDepthSampleMode)
---
---@param compare love.CompareMode# The comparison mode used when sampling from this texture in a shader.
---@diagnostic disable-next-line: args-after-dots
function Texture:setDepthSampleMode(compare) end

---Sets the filter mode of the Texture.
---
---[Wiki](https://love2d.org/wiki/Texture:setFilter)
---
---@param min love.FilterMode# Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels).
---@param mag? love.FilterMode# (min) Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels).
---@param anisotropy? number# (1) Maximum amount of anisotropic filtering to use.
---@diagnostic disable-next-line: args-after-dots
function Texture:setFilter(min, mag, anisotropy) end

---Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.
---
---Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues.
---
---In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers.
---
---Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps.
---
---[Wiki](https://love2d.org/wiki/Texture:setMipmapFilter)
---
---@param filtermode love.FilterMode# The filter mode to use in between mipmap levels. 'nearest' will often give better performance.
---@param sharpness? number# (0) A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse.
---@diagnostic disable-next-line: args-after-dots
function Texture:setMipmapFilter(filtermode, sharpness) end

---Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.
---
---Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues.
---
---In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers.
---
---Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps.
---
---[Wiki](https://love2d.org/wiki/Texture:setMipmapFilter)
---
---@diagnostic disable-next-line: args-after-dots
function Texture:setMipmapFilter() end

---Sets the wrapping properties of a Texture.
---
---This function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions.
---
---Clamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad.
---
---[Wiki](https://love2d.org/wiki/Texture:setWrap)
---
---@param horiz love.WrapMode# Horizontal wrapping mode of the texture.
---@param vert? love.WrapMode# (horiz) Vertical wrapping mode of the texture.
---@param depth? love.WrapMode# (horiz) Wrapping mode for the z-axis of a Volume texture.
---@diagnostic disable-next-line: args-after-dots
function Texture:setWrap(horiz, vert, depth) end

---Gets the width and height of the Video in pixels.
---
---[Wiki](https://love2d.org/wiki/Video:getDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function Video:getDimensions() end

---Gets the scaling filters used when drawing the Video.
---
---[Wiki](https://love2d.org/wiki/Video:getFilter)
---
---@diagnostic disable-next-line: args-after-dots
function Video:getFilter() end

---Gets the height of the Video in pixels.
---
---[Wiki](https://love2d.org/wiki/Video:getHeight)
---
---@diagnostic disable-next-line: args-after-dots
function Video:getHeight() end

---Gets the audio Source used for playing back the video's audio. May return nil if the video has no audio, or if Video:setSource is called with a nil argument.
---
---[Wiki](https://love2d.org/wiki/Video:getSource)
---
---@diagnostic disable-next-line: args-after-dots
function Video:getSource() end

---Gets the VideoStream object used for decoding and controlling the video.
---
---[Wiki](https://love2d.org/wiki/Video:getStream)
---
---@diagnostic disable-next-line: args-after-dots
function Video:getStream() end

---Gets the width of the Video in pixels.
---
---[Wiki](https://love2d.org/wiki/Video:getWidth)
---
---@diagnostic disable-next-line: args-after-dots
function Video:getWidth() end

---Gets whether the Video is currently playing.
---
---[Wiki](https://love2d.org/wiki/Video:isPlaying)
---
---@diagnostic disable-next-line: args-after-dots
function Video:isPlaying() end

---Pauses the Video.
---
---[Wiki](https://love2d.org/wiki/Video:pause)
---
---@diagnostic disable-next-line: args-after-dots
function Video:pause() end

---Starts playing the Video. In order for the video to appear onscreen it must be drawn with love.graphics.draw.
---
---[Wiki](https://love2d.org/wiki/Video:play)
---
---@diagnostic disable-next-line: args-after-dots
function Video:play() end

---Rewinds the Video to the beginning.
---
---[Wiki](https://love2d.org/wiki/Video:rewind)
---
---@diagnostic disable-next-line: args-after-dots
function Video:rewind() end

---Sets the current playback position of the Video.
---
---[Wiki](https://love2d.org/wiki/Video:seek)
---
---@param offset number# The time in seconds since the beginning of the Video.
---@diagnostic disable-next-line: args-after-dots
function Video:seek(offset) end

---Sets the scaling filters used when drawing the Video.
---
---[Wiki](https://love2d.org/wiki/Video:setFilter)
---
---@param min love.FilterMode# The filter mode used when scaling the Video down.
---@param mag love.FilterMode# The filter mode used when scaling the Video up.
---@param anisotropy? number# (1) Maximum amount of anisotropic filtering used.
---@diagnostic disable-next-line: args-after-dots
function Video:setFilter(min, mag, anisotropy) end

---Sets the audio Source used for playing back the video's audio. The audio Source also controls playback speed and synchronization.
---
---[Wiki](https://love2d.org/wiki/Video:setSource)
---
---@param source? love.Source# (nil) The audio Source used for audio playback, or nil to disable audio synchronization.
---@diagnostic disable-next-line: args-after-dots
function Video:setSource(source) end

---Gets the current playback position of the Video.
---
---[Wiki](https://love2d.org/wiki/Video:tell)
---
---@diagnostic disable-next-line: args-after-dots
function Video:tell() end

---Applies the given Transform object to the current coordinate transformation.
---
---This effectively multiplies the existing coordinate transformation's matrix with the Transform object's internal matrix to produce the new coordinate transformation.
---
---[Wiki](https://love2d.org/wiki/love.graphics.applyTransform)
---
---@param transform love.Transform# The Transform object to apply to the current graphics coordinate transform.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.applyTransform(transform) end

---Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1 to angle2 in radians. The segments parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge.
---
---[Wiki](https://love2d.org/wiki/love.graphics.arc)
---
---@param drawmode love.DrawMode# How to draw the arc.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radius number# Radius of the arc.
---@param angle1 number# The angle at which the arc begins.
---@param angle2 number# The angle at which the arc terminates.
---@param segments? number# (10) The number of segments used for drawing the arc.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.arc(drawmode, x, y, radius, angle1, angle2, segments) end

---Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1 to angle2 in radians. The segments parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge.
---
---[Wiki](https://love2d.org/wiki/love.graphics.arc)
---
---@param drawmode love.DrawMode# How to draw the arc.
---@param arctype love.ArcType# The type of arc to draw.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radius number# Radius of the arc.
---@param angle1 number# The angle at which the arc begins.
---@param angle2 number# The angle at which the arc terminates.
---@param segments? number# (10) The number of segments used for drawing the arc.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.arc(drawmode, arctype, x, y, radius, angle1, angle2, segments) end

---Creates a screenshot once the current frame is done (after love.draw has finished).
---
---Since this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame.
---
---[Wiki](https://love2d.org/wiki/love.graphics.captureScreenshot)
---
---@param filename string# The filename to save the screenshot to. The encoded image type is determined based on the extension of the filename, and must be one of the ImageFormats.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.captureScreenshot(filename) end

---Creates a screenshot once the current frame is done (after love.draw has finished).
---
---Since this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame.
---
---[Wiki](https://love2d.org/wiki/love.graphics.captureScreenshot)
---
---@param callback fun(imageData:love.ImageData)# Function which gets called once the screenshot has been captured. An ImageData is passed into the function as its only argument.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.captureScreenshot(callback) end

---Creates a screenshot once the current frame is done (after love.draw has finished).
---
---Since this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame.
---
---[Wiki](https://love2d.org/wiki/love.graphics.captureScreenshot)
---
---@param channel love.Channel# The Channel to push the generated ImageData to.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.captureScreenshot(channel) end

---Draws a circle.
---
---[Wiki](https://love2d.org/wiki/love.graphics.circle)
---
---@param mode love.DrawMode# How to draw the circle.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radius number# The radius of the circle.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.circle(mode, x, y, radius) end

---Draws a circle.
---
---[Wiki](https://love2d.org/wiki/love.graphics.circle)
---
---@param mode love.DrawMode# How to draw the circle.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radius number# The radius of the circle.
---@param segments number# The number of segments used for drawing the circle. Note: The default variable for the segments parameter varies between different versions of LÖVE.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.circle(mode, x, y, radius, segments) end

---Clears the screen or active Canvas to the specified color.
---
---This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.
---
---Note that the scissor area bounds the cleared region.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---In versions prior to background color instead.
---
---[Wiki](https://love2d.org/wiki/love.graphics.clear)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.clear() end

---Clears the screen or active Canvas to the specified color.
---
---This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.
---
---Note that the scissor area bounds the cleared region.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---In versions prior to background color instead.
---
---[Wiki](https://love2d.org/wiki/love.graphics.clear)
---
---@param r number# The red channel of the color to clear the screen to.
---@param g number# The green channel of the color to clear the screen to.
---@param b number# The blue channel of the color to clear the screen to.
---@param a? number# (1) The alpha channel of the color to clear the screen to.
---@param clearstencil? boolean# (true) Whether to clear the active stencil buffer, if present. It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.
---@param cleardepth? boolean# (true) Whether to clear the active depth buffer, if present. It can also be a number between 0 and 1 to clear the depth buffer to a specific value.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.clear(r, g, b, a, clearstencil, cleardepth) end

---Clears the screen or active Canvas to the specified color.
---
---This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.
---
---Note that the scissor area bounds the cleared region.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---In versions prior to background color instead.
---
---[Wiki](https://love2d.org/wiki/love.graphics.clear)
---
---@param color table[]# A table in the form of {r, g, b, a} containing the color to clear the first active Canvas to.
---@param ... table[]# Additional tables for each active Canvas.
---@param clearstencil? boolean# (true) Whether to clear the active stencil buffer, if present. It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.
---@param cleardepth? boolean# (true) Whether to clear the active depth buffer, if present. It can also be a number between 0 and 1 to clear the depth buffer to a specific value.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.clear(color, ..., clearstencil, cleardepth) end

---Clears the screen or active Canvas to the specified color.
---
---This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.
---
---Note that the scissor area bounds the cleared region.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---In versions prior to background color instead.
---
---[Wiki](https://love2d.org/wiki/love.graphics.clear)
---
---@param clearcolor boolean# Whether to clear the active color canvas to transparent black (0, 0, 0, 0). Typically this should be set to false with this variant of the function.
---@param clearstencil boolean# Whether to clear the active stencil buffer, if present. It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.
---@param cleardepth boolean# Whether to clear the active depth buffer, if present. It can also be a number between 0 and 1 to clear the depth buffer to a specific value.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.clear(clearcolor, clearstencil, cleardepth) end

---Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases.
---
---If the active Canvas has just been changed and the 'replace' BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices.
---
---On some desktop systems this function may do nothing.
---
---[Wiki](https://love2d.org/wiki/love.graphics.discard)
---
---@param discardcolor? boolean# (true) Whether to discard the texture(s) of the active Canvas(es) (the contents of the screen if no Canvas is active.)
---@param discardstencil? boolean# (true) Whether to discard the contents of the stencil buffer of the screen / active Canvas.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.discard(discardcolor, discardstencil) end

---Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases.
---
---If the active Canvas has just been changed and the 'replace' BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices.
---
---On some desktop systems this function may do nothing.
---
---[Wiki](https://love2d.org/wiki/love.graphics.discard)
---
---@param discardcolors table[]# An array containing boolean values indicating whether to discard the texture of each active Canvas, when multiple simultaneous Canvases are active.
---@param discardstencil? boolean# (true) Whether to discard the contents of the stencil buffer of the screen / active Canvas.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.discard(discardcolors, discardstencil) end

---Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.
---
---Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.
---
---It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. 
---
---Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.
---
---The right and bottom edges of the object are shifted at an angle defined by the shearing factors.
---
---When using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.
---
---[Wiki](https://love2d.org/wiki/love.graphics.draw)
---
---@param drawable love.Drawable# A drawable object.
---@param x? number# (0) The position to draw the object (x-axis).
---@param y? number# (0) The position to draw the object (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.draw(drawable, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.
---
---Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.
---
---It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. 
---
---Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.
---
---The right and bottom edges of the object are shifted at an angle defined by the shearing factors.
---
---When using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.
---
---[Wiki](https://love2d.org/wiki/love.graphics.draw)
---
---@param texture love.Texture# A Texture (Image or Canvas) to texture the Quad with.
---@param quad love.Quad# The Quad to draw on screen.
---@param x number# The position to draw the object (x-axis).
---@param y number# The position to draw the object (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.draw(texture, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.
---
---Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.
---
---It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. 
---
---Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.
---
---The right and bottom edges of the object are shifted at an angle defined by the shearing factors.
---
---When using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.
---
---[Wiki](https://love2d.org/wiki/love.graphics.draw)
---
---@param drawable love.Drawable# A drawable object.
---@param transform love.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.draw(drawable, transform) end

---Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.
---
---Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.
---
---It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. 
---
---Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.
---
---The right and bottom edges of the object are shifted at an angle defined by the shearing factors.
---
---When using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.
---
---[Wiki](https://love2d.org/wiki/love.graphics.draw)
---
---@param texture love.Texture# A Texture (Image or Canvas) to texture the Quad with.
---@param quad love.Quad# The Quad to draw on screen.
---@param transform love.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.draw(texture, quad, transform) end

---Draws many instances of a Mesh with a single draw call, using hardware geometry instancing.
---
---Each instance can have unique properties (positions, colors, etc.) but will not by default unless a custom per-instance vertex attributes or the love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all render at the same position on top of each other.
---
---Instancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check.
---
---[Wiki](https://love2d.org/wiki/love.graphics.drawInstanced)
---
---@param mesh love.Mesh# The mesh to render.
---@param instancecount number# The number of instances to render.
---@param x? number# (0) The position to draw the instances (x-axis).
---@param y? number# (0) The position to draw the instances (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.drawInstanced(mesh, instancecount, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws many instances of a Mesh with a single draw call, using hardware geometry instancing.
---
---Each instance can have unique properties (positions, colors, etc.) but will not by default unless a custom per-instance vertex attributes or the love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all render at the same position on top of each other.
---
---Instancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check.
---
---[Wiki](https://love2d.org/wiki/love.graphics.drawInstanced)
---
---@param mesh love.Mesh# The mesh to render.
---@param instancecount number# The number of instances to render.
---@param transform love.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.drawInstanced(mesh, instancecount, transform) end

---Draws a layer of an Array Texture.
---
---[Wiki](https://love2d.org/wiki/love.graphics.drawLayer)
---
---@param texture love.Texture# The Array Texture to draw.
---@param layerindex number# The index of the layer to use when drawing.
---@param x? number# (0) The position to draw the texture (x-axis).
---@param y? number# (0) The position to draw the texture (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.drawLayer(texture, layerindex, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws a layer of an Array Texture.
---
---[Wiki](https://love2d.org/wiki/love.graphics.drawLayer)
---
---@param texture love.Texture# The Array Texture to draw.
---@param layerindex number# The index of the layer to use when drawing.
---@param quad love.Quad# The subsection of the texture's layer to use when drawing.
---@param x? number# (0) The position to draw the texture (x-axis).
---@param y? number# (0) The position to draw the texture (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.drawLayer(texture, layerindex, quad, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws a layer of an Array Texture.
---
---[Wiki](https://love2d.org/wiki/love.graphics.drawLayer)
---
---@param texture love.Texture# The Array Texture to draw.
---@param layerindex number# The index of the layer to use when drawing.
---@param transform love.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.drawLayer(texture, layerindex, transform) end

---Draws a layer of an Array Texture.
---
---[Wiki](https://love2d.org/wiki/love.graphics.drawLayer)
---
---@param texture love.Texture# The Array Texture to draw.
---@param layerindex number# The index of the layer to use when drawing.
---@param quad love.Quad# The subsection of the texture's layer to use when drawing.
---@param transform love.Transform# A transform object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.drawLayer(texture, layerindex, quad, transform) end

---Draws an ellipse.
---
---[Wiki](https://love2d.org/wiki/love.graphics.ellipse)
---
---@param mode love.DrawMode# How to draw the ellipse.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radiusx number# The radius of the ellipse along the x-axis (half the ellipse's width).
---@param radiusy number# The radius of the ellipse along the y-axis (half the ellipse's height).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.ellipse(mode, x, y, radiusx, radiusy) end

---Draws an ellipse.
---
---[Wiki](https://love2d.org/wiki/love.graphics.ellipse)
---
---@param mode love.DrawMode# How to draw the ellipse.
---@param x number# The position of the center along x-axis.
---@param y number# The position of the center along y-axis.
---@param radiusx number# The radius of the ellipse along the x-axis (half the ellipse's width).
---@param radiusy number# The radius of the ellipse along the y-axis (half the ellipse's height).
---@param segments number# The number of segments used for drawing the ellipse.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.ellipse(mode, x, y, radiusx, radiusy, segments) end

---Immediately renders any pending automatically batched draws.
---
---LÖVE will call this function internally as needed when most state is changed, so it is not necessary to manually call it.
---
---The current batch will be automatically flushed by love.graphics state changes (except for the transform stack and the current color), as well as Shader:send and methods on Textures which change their state. Using a different Image in consecutive love.graphics.draw calls will also flush the current batch.
---
---SpriteBatches, ParticleSystems, Meshes, and Text objects do their own batching and do not affect automatic batching of other draws, aside from flushing the current batch when they're drawn.
---
---[Wiki](https://love2d.org/wiki/love.graphics.flushBatch)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.flushBatch() end

---Gets the current background color.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getBackgroundColor)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getBackgroundColor() end

---Gets the blending mode.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getBlendMode)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getBlendMode() end

---Gets the current target Canvas.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getCanvas)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getCanvas() end

---Gets the available Canvas formats, and whether each is supported.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getCanvasFormats)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getCanvasFormats() end

---Gets the available Canvas formats, and whether each is supported.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getCanvasFormats)
---
---@param readable boolean# If true, the returned formats will only be indicated as supported if readable flag set to true for that format, and vice versa if the parameter is false.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getCanvasFormats(readable) end

---Gets the current color.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getColor)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getColor() end

---Gets the active color components used when drawing. Normally all 4 components are active unless love.graphics.setColorMask has been used.
---
---The color mask determines whether individual components of the colors of drawn objects will affect the color of the screen. They affect love.graphics.clear and Canvas:clear as well.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getColorMask)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getColorMask() end

---Gets the DPI scale factor of the window.
---
---The DPI scale factor represents relative pixel density. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.graphics.getDPIScale() would return 2 in that case.
---
---The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.
---
---The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getDPIScale)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getDPIScale() end

---Returns the default scaling filters used with Images, Canvases, and Fonts.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getDefaultFilter)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getDefaultFilter() end

---Gets the current depth test mode and whether writing to the depth buffer is enabled.
---
---This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getDepthMode)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getDepthMode() end

---Gets the width and height in pixels of the window.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getDimensions() end

---Gets the current Font object.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getFont)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getFont() end

---Gets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.
---
---This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getFrontFaceWinding)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getFrontFaceWinding() end

---Gets the height in pixels of the window.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getHeight)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getHeight() end

---Gets the raw and compressed pixel formats usable for Images, and whether each is supported.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getImageFormats)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getImageFormats() end

---Gets the line join style.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getLineJoin)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getLineJoin() end

---Gets the line style.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getLineStyle)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getLineStyle() end

---Gets the current line width.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getLineWidth)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getLineWidth() end

---Gets whether back-facing triangles in a Mesh are culled.
---
---Mesh face culling is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getMeshCullMode)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getMeshCullMode() end

---Gets the width and height in pixels of the window.
---
---love.graphics.getDimensions gets the dimensions of the window in units scaled by the screen's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing to the screen and using the graphics coordinate system (calculating the center of the screen, for example), and getPixelDimensions only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).
---
---[Wiki](https://love2d.org/wiki/love.graphics.getPixelDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getPixelDimensions() end

---Gets the height in pixels of the window.
---
---The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getHeight for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelHeight only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).
---
---[Wiki](https://love2d.org/wiki/love.graphics.getPixelHeight)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getPixelHeight() end

---Gets the width in pixels of the window.
---
---The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getWidth for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelWidth only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).
---
---[Wiki](https://love2d.org/wiki/love.graphics.getPixelWidth)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getPixelWidth() end

---Gets the point size.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getPointSize)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getPointSize() end

---Gets information about the system's video card and drivers.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getRendererInfo)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getRendererInfo() end

---Gets the current scissor box.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getScissor)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getScissor() end

---Gets the current Shader. Returns nil if none is set.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getShader)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getShader() end

---Gets the current depth of the transform / state stack (the number of pushes without corresponding pops).
---
---[Wiki](https://love2d.org/wiki/love.graphics.getStackDepth)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getStackDepth() end

---Gets performance-related rendering statistics. 
---
---[Wiki](https://love2d.org/wiki/love.graphics.getStats)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getStats() end

---Gets performance-related rendering statistics. 
---
---[Wiki](https://love2d.org/wiki/love.graphics.getStats)
---
---@param stats table# A table which will be filled in with the stat fields below.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getStats(stats) end

---Gets the current stencil test configuration.
---
---When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.
---
---Each Canvas has its own per-pixel stencil values.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getStencilTest)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getStencilTest() end

---Gets the optional graphics features and whether they're supported on the system.
---
---Some older or low-end systems don't always support all graphics features.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getSupported)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getSupported() end

---Gets the system-dependent maximum values for love.graphics features.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getSystemLimits)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getSystemLimits() end

---Gets the available texture types, and whether each is supported.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getTextureTypes)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getTextureTypes() end

---Gets the width in pixels of the window.
---
---[Wiki](https://love2d.org/wiki/love.graphics.getWidth)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.getWidth() end

---Sets the scissor to the rectangle created by the intersection of the specified rectangle with the existing scissor.  If no scissor is active yet, it behaves like love.graphics.setScissor.
---
---The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear.
---
---The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).
---
---[Wiki](https://love2d.org/wiki/love.graphics.intersectScissor)
---
---@param x number# The x-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle.
---@param y number# The y-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle.
---@param width number# The width of the rectangle to intersect with the existing scissor rectangle.
---@param height number# The height of the rectangle to intersect with the existing scissor rectangle.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.intersectScissor(x, y, width, height) end

---Converts the given 2D position from screen-space into global coordinates.
---
---This effectively applies the reverse of the current graphics transformations to the given position. A similar Transform:inverseTransformPoint method exists for Transform objects.
---
---[Wiki](https://love2d.org/wiki/love.graphics.inverseTransformPoint)
---
---@param screenX number# The x component of the screen-space position.
---@param screenY number# The y component of the screen-space position.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.inverseTransformPoint(screenX, screenY) end

---Gets whether the graphics module is able to be used. If it is not active, love.graphics function and method calls will not work correctly and may cause the program to crash.
---The graphics module is inactive if a window is not open, or if the app is in the background on iOS. Typically the app's execution will be automatically paused by the system, in the latter case.
---
---[Wiki](https://love2d.org/wiki/love.graphics.isActive)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.isActive() end

---Gets whether gamma-correct rendering is supported and enabled. It can be enabled by setting t.gammacorrect = true in love.conf.
---
---Not all devices support gamma-correct rendering, in which case it will be automatically disabled and this function will return false. It is supported on desktop systems which have graphics cards that are capable of using OpenGL 3 / DirectX 10, and iOS devices that can use OpenGL ES 3.
---
---[Wiki](https://love2d.org/wiki/love.graphics.isGammaCorrect)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.isGammaCorrect() end

---Gets whether wireframe mode is used when drawing.
---
---[Wiki](https://love2d.org/wiki/love.graphics.isWireframe)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.isWireframe() end

---Draws lines between points.
---
---[Wiki](https://love2d.org/wiki/love.graphics.line)
---
---@param x1 number# The position of first point on the x-axis.
---@param y1 number# The position of first point on the y-axis.
---@param x2 number# The position of second point on the x-axis.
---@param y2 number# The position of second point on the y-axis.
---@param ... number# You can continue passing point positions to draw a polyline.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.line(x1, y1, x2, y2, ...) end

---Draws lines between points.
---
---[Wiki](https://love2d.org/wiki/love.graphics.line)
---
---@param points table[]# A table of point positions, as described above.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.line(points) end

---Creates a new array Image.
---
---An array image / array texture is a single object which contains multiple 'layers' or 'slices' of 2D sub-images. It can be thought of similarly to a texture atlas or sprite sheet, but it doesn't suffer from the same tile / quad bleeding artifacts that texture atlases do – although every sub-image must have the same dimensions.
---
---A specific layer of an array image can be drawn with love.graphics.drawLayer / SpriteBatch:addLayer, or with the Quad variant of love.graphics.draw and Quad:setLayer, or via a custom Shader.
---
---To use an array image in a Shader, it must be declared as a ArrayImage or sampler2DArray type (instead of Image or sampler2D). The Texel(ArrayImage image, vec3 texturecoord) shader function must be used to get pixel colors from a slice of the array image. The vec3 argument contains the texture coordinate in the first two components, and the 0-based slice index in the third component.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newArrayImage)
---
---@param slices table[]# A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. Each sub-image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the slice index of that sub-table.
---@param settings? {
---mipmaps : boolean,
---linear : boolean,
---dpiscale : number}# (nil) Optional table of settings to configure the array image, containing the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newArrayImage(slices, settings) end

---Creates a new Canvas object for offscreen rendering.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newCanvas)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newCanvas() end

---Creates a new Canvas object for offscreen rendering.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newCanvas)
---
---@param width number# The desired width of the Canvas.
---@param height number# The desired height of the Canvas.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newCanvas(width, height) end

---Creates a new Canvas object for offscreen rendering.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newCanvas)
---
---@param width number# The desired width of the Canvas.
---@param height number# The desired height of the Canvas.
---@param settings? {
---type : love.TextureType,
---format : love.PixelFormat,
---readable : boolean,
---msaa : number,
---dpiscale : number,
---mipmaps : love.MipmapMode}# (nil) A table containing the given fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newCanvas(width, height, settings) end

---Creates a new Canvas object for offscreen rendering.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newCanvas)
---
---@param width number# The desired width of the Canvas.
---@param height number# The desired height of the Canvas.
---@param layers number# The number of array layers (if the Canvas is an Array Texture), or the volume depth (if the Canvas is a Volume Texture).
---@param settings? {
---type : love.TextureType,
---format : love.PixelFormat,
---readable : boolean,
---msaa : number,
---dpiscale : number,
---mipmaps : love.MipmapMode}# (nil) A table containing the given fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newCanvas(width, height, layers, settings) end

---Creates a new cubemap Image.
---
---Cubemap images have 6 faces (sides) which represent a cube. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).
---
---To use a cubemap image in a Shader, it must be declared as a CubeImage or samplerCube type (instead of Image or sampler2D). The Texel(CubeImage image, vec3 direction) shader function must be used to get pixel colors from the cubemap. The vec3 argument is a normalized direction from the center of the cube, rather than explicit texture coordinates.
---
---Each face in a cubemap image must have square dimensions.
---
---For variants of this function which accept a single image containing multiple cubemap faces, they must be laid out in one of the following forms in the image:
---
---   +y
---
---+z +x -z
---
---   -y
---
---   -x
---
---or:
---
---   +y
---
----x +z +x -z
---
---   -y
---
---or:
---
---+x
---
----x
---
---+y
---
----y
---
---+z
---
----z
---
---or:
---
---+x -x +y -y +z -z
---
---[Wiki](https://love2d.org/wiki/love.graphics.newCubeImage)
---
---@param filename string# The filepath to a cubemap image file (or a File, FileData, or ImageData).
---@param settings? {
---mipmaps : boolean,
---linear : boolean}# (nil) Optional table of settings to configure the cubemap image, containing the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newCubeImage(filename, settings) end

---Creates a new cubemap Image.
---
---Cubemap images have 6 faces (sides) which represent a cube. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).
---
---To use a cubemap image in a Shader, it must be declared as a CubeImage or samplerCube type (instead of Image or sampler2D). The Texel(CubeImage image, vec3 direction) shader function must be used to get pixel colors from the cubemap. The vec3 argument is a normalized direction from the center of the cube, rather than explicit texture coordinates.
---
---Each face in a cubemap image must have square dimensions.
---
---For variants of this function which accept a single image containing multiple cubemap faces, they must be laid out in one of the following forms in the image:
---
---   +y
---
---+z +x -z
---
---   -y
---
---   -x
---
---or:
---
---   +y
---
----x +z +x -z
---
---   -y
---
---or:
---
---+x
---
----x
---
---+y
---
----y
---
---+z
---
----z
---
---or:
---
---+x -x +y -y +z -z
---
---[Wiki](https://love2d.org/wiki/love.graphics.newCubeImage)
---
---@param faces table# A table containing 6 filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. Each face image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the cube face index of that sub-table.
---@param settings? {
---mipmaps : boolean,
---linear : boolean}# (nil) Optional table of settings to configure the cubemap image, containing the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newCubeImage(faces, settings) end

---Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.
---
---All variants which accept a filename can also accept a Data object instead.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newFont)
---
---@param filename string# The filepath to the BMFont or TrueType font file.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newFont(filename) end

---Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.
---
---All variants which accept a filename can also accept a Data object instead.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newFont)
---
---@param filename string# The filepath to the TrueType font file.
---@param size number# The size of the font in pixels.
---@param hinting? love.HintingMode# ('normal') True Type hinting mode.
---@param dpiscale? number# (love.graphics.getDPIScale()) The DPI scale factor of the font.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newFont(filename, size, hinting, dpiscale) end

---Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.
---
---All variants which accept a filename can also accept a Data object instead.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newFont)
---
---@param filename string# The filepath to the BMFont file.
---@param imagefilename string# The filepath to the BMFont's image file. If this argument is omitted, the path specified inside the BMFont file will be used.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newFont(filename, imagefilename) end

---Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.
---
---All variants which accept a filename can also accept a Data object instead.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newFont)
---
---@param size? number# (12) The size of the font in pixels.
---@param hinting? love.HintingMode# ('normal') True Type hinting mode.
---@param dpiscale? number# (love.graphics.getDPIScale()) The DPI scale factor of the font.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newFont(size, hinting, dpiscale) end

---Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newImage)
---
---@param filename string# The filepath to the image file.
---@param settings? {
---dpiscale : number,
---linear : boolean,
---mipmaps : boolean}# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newImage(filename, settings) end

---Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newImage)
---
---@param fileData love.FileData# The FileData containing image file.
---@param settings? {
---dpiscale : number,
---linear : boolean,
---mipmaps : boolean}# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newImage(fileData, settings) end

---Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newImage)
---
---@param imageData love.ImageData# The ImageData containing image.
---@param settings? {
---dpiscale : number,
---linear : boolean,
---mipmaps : boolean}# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newImage(imageData, settings) end

---Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newImage)
---
---@param compressedImageData love.CompressedImageData# A CompressedImageData object. The Image will use this CompressedImageData to reload itself when love.window.setMode is called.
---@param settings? {
---dpiscale : number,
---linear : boolean,
---mipmaps : boolean}# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newImage(compressedImageData, settings) end

---Creates a new specifically formatted image.
---
---In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs string.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newImageFont)
---
---@param filename string# The filepath to the image file.
---@param glyphs string# A string of the characters in the image in order from left to right.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newImageFont(filename, glyphs) end

---Creates a new specifically formatted image.
---
---In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs string.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newImageFont)
---
---@param imageData love.ImageData# The ImageData object to create the font from.
---@param glyphs string# A string of the characters in the image in order from left to right.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newImageFont(imageData, glyphs) end

---Creates a new specifically formatted image.
---
---In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs string.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newImageFont)
---
---@param filename string# The filepath to the image file.
---@param glyphs string# A string of the characters in the image in order from left to right.
---@param extraspacing number# Additional spacing (positive or negative) to apply to each glyph in the Font.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newImageFont(filename, glyphs, extraspacing) end

---Creates a new Mesh.
---
---Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newMesh)
---
---@param vertices {
---[1] : number,
---[2] : number,
---[3] : number,
---[4] : number,
---[5] : number,
---[6] : number,
---[7] : number,
---[8] : number}[]# The table filled with vertex information tables for each vertex as follows:
---@param mode? love.MeshDrawMode# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@param usage? love.SpriteBatchUsage# ('dynamic') The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newMesh(vertices, mode, usage) end

---Creates a new Mesh.
---
---Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newMesh)
---
---@param vertexcount number# The total number of vertices the Mesh will use. Each vertex is initialized to {0,0, 0,0, 1,1,1,1}.
---@param mode? love.MeshDrawMode# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@param usage? love.SpriteBatchUsage# ('dynamic') The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newMesh(vertexcount, mode, usage) end

---Creates a new Mesh.
---
---Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newMesh)
---
---@param vertexformat {
---attribute : table,
---[...] : table}# A table in the form of {attribute, ...}. Each attribute is a table which specifies a custom vertex attribute used for each vertex.
---@param vertices {
---attributecomponent : number,
---[...] : number}# The table filled with vertex information tables for each vertex, in the form of {vertex, ...} where each vertex is a table in the form of {attributecomponent, ...}.
---@param mode? love.MeshDrawMode# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@param usage? love.SpriteBatchUsage# ('dynamic') The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newMesh(vertexformat, vertices, mode, usage) end

---Creates a new Mesh.
---
---Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newMesh)
---
---@param vertexformat {
---attribute : table,
---[...] : table}# A table in the form of {attribute, ...}. Each attribute is a table which specifies a custom vertex attribute used for each vertex.
---@param vertexcount number# The total number of vertices the Mesh will use.
---@param mode? love.MeshDrawMode# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@param usage? love.SpriteBatchUsage# ('dynamic') The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newMesh(vertexformat, vertexcount, mode, usage) end

---Creates a new Mesh.
---
---Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newMesh)
---
---@param vertexcount number# The total number of vertices the Mesh will use. Each vertex is initialized to {0,0, 0,0, 255,255,255,255}.
---@param texture? love.Texture# (nil) The Image or Canvas to use when drawing the Mesh. May be nil to use no texture.
---@param mode? love.MeshDrawMode# ('fan') How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newMesh(vertexcount, texture, mode) end

---Creates a new ParticleSystem.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newParticleSystem)
---
---@param image love.Image# The image to use.
---@param buffer? number# (1000) The max number of particles at the same time.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newParticleSystem(image, buffer) end

---Creates a new ParticleSystem.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newParticleSystem)
---
---@param texture love.Texture# The texture (Image or Canvas) to use.
---@param buffer? number# (1000) The max number of particles at the same time.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newParticleSystem(texture, buffer) end

---Creates a new Quad.
---
---The purpose of a Quad is to use a fraction of an image to draw objects, as opposed to drawing entire image. It is most useful for sprite sheets and atlases: in a sprite atlas, multiple sprites reside in same image, quad is used to draw a specific sprite from that image; in animated sprites with all frames residing in the same image, quad is used to draw specific frame from the animation.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newQuad)
---
---@param x number# The top-left position in the Image along the x-axis.
---@param y number# The top-left position in the Image along the y-axis.
---@param width number# The width of the Quad in the Image. (Must be greater than 0.)
---@param height number# The height of the Quad in the Image. (Must be greater than 0.)
---@param sw number# The reference width, the width of the Image. (Must be greater than 0.)
---@param sh number# The reference height, the height of the Image. (Must be greater than 0.)
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newQuad(x, y, width, height, sw, sh) end

---Creates a new Quad.
---
---The purpose of a Quad is to use a fraction of an image to draw objects, as opposed to drawing entire image. It is most useful for sprite sheets and atlases: in a sprite atlas, multiple sprites reside in same image, quad is used to draw a specific sprite from that image; in animated sprites with all frames residing in the same image, quad is used to draw specific frame from the animation.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newQuad)
---
---@param x number# The top-left position in the Image along the x-axis.
---@param y number# The top-left position in the Image along the y-axis.
---@param width number# The width of the Quad in the Image. (Must be greater than 0.)
---@param height number# The height of the Quad in the Image. (Must be greater than 0.)
---@param texture love.Texture# The texture whose width and height will be used as the reference width and height.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newQuad(x, y, width, height, texture) end

---Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both.
---
---Shaders are small programs which are run on the graphics card when drawing. Vertex shaders are run once for each vertex (for example, an image has 4 vertices - one at each corner. A Mesh might have many more.) Pixel shaders are run once for each pixel on the screen which the drawn object touches. Pixel shader code is executed after all the object's vertices have been processed by the vertex shader.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newShader)
---
---@param code string# The pixel shader or vertex shader code, or a filename pointing to a file with the code.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newShader(code) end

---Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both.
---
---Shaders are small programs which are run on the graphics card when drawing. Vertex shaders are run once for each vertex (for example, an image has 4 vertices - one at each corner. A Mesh might have many more.) Pixel shaders are run once for each pixel on the screen which the drawn object touches. Pixel shader code is executed after all the object's vertices have been processed by the vertex shader.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newShader)
---
---@param pixelcode string# The pixel shader code, or a filename pointing to a file with the code.
---@param vertexcode string# The vertex shader code, or a filename pointing to a file with the code.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newShader(pixelcode, vertexcode) end

---Creates a new SpriteBatch object.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newSpriteBatch)
---
---@param image love.Image# The Image to use for the sprites.
---@param maxsprites? number# (1000) The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newSpriteBatch(image, maxsprites) end

---Creates a new SpriteBatch object.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newSpriteBatch)
---
---@param image love.Image# The Image to use for the sprites.
---@param maxsprites? number# (1000) The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch.
---@param usage? love.SpriteBatchUsage# ('dynamic') The expected usage of the SpriteBatch. The specified usage mode affects the SpriteBatch's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newSpriteBatch(image, maxsprites, usage) end

---Creates a new SpriteBatch object.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newSpriteBatch)
---
---@param texture love.Texture# The Image or Canvas to use for the sprites.
---@param maxsprites? number# (1000) The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch.
---@param usage? love.SpriteBatchUsage# ('dynamic') The expected usage of the SpriteBatch. The specified usage mode affects the SpriteBatch's memory usage and performance.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newSpriteBatch(texture, maxsprites, usage) end

---Creates a new drawable Text object.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newText)
---
---@param font love.Font# The font to use for the text.
---@param textstring? string# (nil) The initial string of text that the new Text object will contain. May be nil.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newText(font, textstring) end

---Creates a new drawable Text object.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newText)
---
---@param font love.Font# The font to use for the text.
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : love.Variant}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newText(font, coloredtext) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newVideo)
---
---@param filename string# The file path to the Ogg Theora video file.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newVideo(filename) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newVideo)
---
---@param videostream love.VideoStream# A video stream object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newVideo(videostream) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newVideo)
---
---@param filename string# The file path to the Ogg Theora video file (or VideoStream).
---@param settings? {
---audio : boolean,
---dpiscale : number}# (nil) A table containing the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newVideo(filename, settings) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newVideo)
---
---@param filename string# The file path to the Ogg Theora video file.
---@param loadaudio? boolean# (nil) Whether to try to load the video's audio into an audio Source. If not explicitly set to true or false, it will try without causing an error if the video has no audio.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newVideo(filename, loadaudio) end

---Creates a new drawable Video. Currently only Ogg Theora video files are supported.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newVideo)
---
---@param videostream love.VideoStream# A video stream object.
---@param loadaudio? boolean# (nil) Whether to try to load the video's audio into an audio Source. If not explicitly set to true or false, it will try without causing an error if the video has no audio.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newVideo(videostream, loadaudio) end

---Creates a new volume (3D) Image.
---
---Volume images are 3D textures with width, height, and depth. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).
---
---To use a volume image in a Shader, it must be declared as a VolumeImage or sampler3D type (instead of Image or sampler2D). The Texel(VolumeImage image, vec3 texcoords) shader function must be used to get pixel colors from the volume image. The vec3 argument is a normalized texture coordinate with the z component representing the depth to sample at (ranging from 1).
---
---Volume images are typically used as lookup tables in shaders for color grading, for example, because sampling using a texture coordinate that is partway in between two pixels can interpolate across all 3 dimensions in the volume image, resulting in a smooth gradient even when a small-sized volume image is used as the lookup table.
---
---Array images are a much better choice than volume images for storing multiple different sprites in a single array image for directly drawing them.
---
---[Wiki](https://love2d.org/wiki/love.graphics.newVolumeImage)
---
---@param layers table[]# A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. A table of tables can also be given, where each sub-table represents a single mipmap level and contains all layers for that mipmap.
---@param settings? {
---mipmaps : boolean,
---linear : boolean}# (nil) Optional table of settings to configure the volume image, containing the following fields:
---@diagnostic disable-next-line: args-after-dots
function love.graphics.newVolumeImage(layers, settings) end

---Resets the current coordinate transformation.
---
---This function is always used to reverse any previous calls to love.graphics.rotate, love.graphics.scale, love.graphics.shear or love.graphics.translate. It returns the current transformation state to its defaults.
---
---[Wiki](https://love2d.org/wiki/love.graphics.origin)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.origin() end

---Draws one or more points.
---
---[Wiki](https://love2d.org/wiki/love.graphics.points)
---
---@param x number# The position of the first point on the x-axis.
---@param y number# The position of the first point on the y-axis.
---@param ... number# The x and y coordinates of additional points.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.points(x, y, ...) end

---Draws one or more points.
---
---[Wiki](https://love2d.org/wiki/love.graphics.points)
---
---@param points table[]# A table containing multiple point positions, in the form of {x, y, ...}.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.points(points) end

---Draws one or more points.
---
---[Wiki](https://love2d.org/wiki/love.graphics.points)
---
---@param points {
---point : table,
---[...] : table}# A table containing multiple individually colored points, in the form of {point, ...}.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.points(points) end

---Draw a polygon.
---
---Following the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices.
---
---[Wiki](https://love2d.org/wiki/love.graphics.polygon)
---
---@param mode love.DrawMode# How to draw the polygon.
---@param ... number# The vertices of the polygon.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.polygon(mode, ...) end

---Draw a polygon.
---
---Following the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices.
---
---[Wiki](https://love2d.org/wiki/love.graphics.polygon)
---
---@param mode love.DrawMode# How to draw the polygon.
---@param vertices table[]# The vertices of the polygon as a table.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.polygon(mode, vertices) end

---Pops the current coordinate transformation from the transformation stack.
---
---This function is always used to reverse a previous push operation. It returns the current transformation state to what it was before the last preceding push.
---
---[Wiki](https://love2d.org/wiki/love.graphics.pop)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.pop() end

---Displays the results of drawing operations on the screen.
---
---This function is used when writing your own love.run function. It presents all the results of your drawing operations on the screen. See the example in love.run for a typical use of this function.
---
---[Wiki](https://love2d.org/wiki/love.graphics.present)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.present() end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.
---
---As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.
---
---love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.print)
---
---@param text string# The text to draw.
---@param x? number# (0) The position to draw the object (x-axis).
---@param y? number# (0) The position to draw the object (y-axis).
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.print(text, x, y, r, sx, sy, ox, oy, kx, ky) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.
---
---As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.
---
---love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.print)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param x? number# (0) The position of the text on the x-axis.
---@param y? number# (0) The position of the text on the y-axis.
---@param angle? number# (0) The orientation of the text in radians.
---@param sx? number# (1) Scale factor on the x-axis.
---@param sy? number# (sx) Scale factor on the y-axis.
---@param ox? number# (0) Origin offset on the x-axis.
---@param oy? number# (0) Origin offset on the y-axis.
---@param kx? number# (0) Shearing / skew factor on the x-axis.
---@param ky? number# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.print(coloredtext, x, y, angle, sx, sy, ox, oy, kx, ky) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.
---
---As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.
---
---love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.print)
---
---@param text string# The text to draw.
---@param transform love.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.print(text, transform) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.
---
---As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.
---
---love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.print)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param transform love.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.print(coloredtext, transform) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.
---
---As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.
---
---love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.print)
---
---@param text string# The text to draw.
---@param font love.Font# The Font object to use.
---@param transform love.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.print(text, font, transform) end

---Draws text on screen. If no Font is set, one will be created and set (once) if needed.
---
---As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.
---
---love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.print)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param font love.Font# The Font object to use.
---@param transform love.Transform# Transformation object.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.print(coloredtext, font, transform) end

---Draws formatted text, with word wrap and alignment.
---
---See additional notes in love.graphics.print.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.printf)
---
---@param text string# A text string.
---@param x number# The position on the x-axis.
---@param y number# The position on the y-axis.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align? love.AlignMode# ('left') The alignment.
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.printf(text, x, y, limit, align, r, sx, sy, ox, oy, kx, ky) end

---Draws formatted text, with word wrap and alignment.
---
---See additional notes in love.graphics.print.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.printf)
---
---@param text string# A text string.
---@param font love.Font# The Font object to use.
---@param x number# The position on the x-axis.
---@param y number# The position on the y-axis.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align? love.AlignMode# ('left') The alignment.
---@param r? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.printf(text, font, x, y, limit, align, r, sx, sy, ox, oy, kx, ky) end

---Draws formatted text, with word wrap and alignment.
---
---See additional notes in love.graphics.print.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.printf)
---
---@param text string# A text string.
---@param transform love.Transform# Transformation object.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align? love.AlignMode# ('left') The alignment.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.printf(text, transform, limit, align) end

---Draws formatted text, with word wrap and alignment.
---
---See additional notes in love.graphics.print.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.printf)
---
---@param text string# A text string.
---@param font love.Font# The Font object to use.
---@param transform love.Transform# Transformation object.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align? love.AlignMode# ('left') The alignment.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.printf(text, font, transform, limit, align) end

---Draws formatted text, with word wrap and alignment.
---
---See additional notes in love.graphics.print.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.printf)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param x number# The position of the text (x-axis).
---@param y number# The position of the text (y-axis).
---@param limit number# The maximum width in pixels of the text before it gets automatically wrapped to a new line.
---@param align love.AlignMode# The alignment of the text.
---@param angle? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing / skew factor (x-axis).
---@param ky? number# (0) Shearing / skew factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.printf(coloredtext, x, y, limit, align, angle, sx, sy, ox, oy, kx, ky) end

---Draws formatted text, with word wrap and alignment.
---
---See additional notes in love.graphics.print.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.printf)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param font love.Font# The Font object to use.
---@param x number# The position on the x-axis.
---@param y number# The position on the y-axis.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align? love.AlignMode# ('left') The alignment.
---@param angle? number# (0) Orientation (radians).
---@param sx? number# (1) Scale factor (x-axis).
---@param sy? number# (sx) Scale factor (y-axis).
---@param ox? number# (0) Origin offset (x-axis).
---@param oy? number# (0) Origin offset (y-axis).
---@param kx? number# (0) Shearing factor (x-axis).
---@param ky? number# (0) Shearing factor (y-axis).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.printf(coloredtext, font, x, y, limit, align, angle, sx, sy, ox, oy, kx, ky) end

---Draws formatted text, with word wrap and alignment.
---
---See additional notes in love.graphics.print.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.printf)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param transform love.Transform# Transformation object.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align? love.AlignMode# ('left') The alignment.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.printf(coloredtext, transform, limit, align) end

---Draws formatted text, with word wrap and alignment.
---
---See additional notes in love.graphics.print.
---
---The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.
---
---In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.
---
---In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.printf)
---
---@param coloredtext {
---color1 : table,
---string1 : string,
---color2 : table,
---string2 : string,
---[...] : table|string}# A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.
---@param font love.Font# The Font object to use.
---@param transform love.Transform# Transformation object.
---@param limit number# Wrap the line after this many horizontal pixels.
---@param align? love.AlignMode# ('left') The alignment.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.printf(coloredtext, font, transform, limit, align) end

---Copies and pushes the current coordinate transformation to the transformation stack.
---
---This function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push.
---
---[Wiki](https://love2d.org/wiki/love.graphics.push)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.push() end

---Copies and pushes the current coordinate transformation to the transformation stack.
---
---This function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push.
---
---[Wiki](https://love2d.org/wiki/love.graphics.push)
---
---@param stack love.StackType# The type of stack to push (e.g. just transformation state, or all love.graphics state).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.push(stack) end

---Draws a rectangle.
---
---[Wiki](https://love2d.org/wiki/love.graphics.rectangle)
---
---@param mode love.DrawMode# How to draw the rectangle.
---@param x number# The position of top-left corner along the x-axis.
---@param y number# The position of top-left corner along the y-axis.
---@param width number# Width of the rectangle.
---@param height number# Height of the rectangle.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.rectangle(mode, x, y, width, height) end

---Draws a rectangle.
---
---[Wiki](https://love2d.org/wiki/love.graphics.rectangle)
---
---@param mode love.DrawMode# How to draw the rectangle.
---@param x number# The position of top-left corner along the x-axis.
---@param y number# The position of top-left corner along the y-axis.
---@param width number# Width of the rectangle.
---@param height number# Height of the rectangle.
---@param rx number# The x-axis radius of each round corner. Cannot be greater than half the rectangle's width.
---@param ry? number# (rx) The y-axis radius of each round corner. Cannot be greater than half the rectangle's height.
---@param segments? number# (nil) The number of segments used for drawing the round corners. A default amount will be chosen if no number is given.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.rectangle(mode, x, y, width, height, rx, ry, segments) end

---Replaces the current coordinate transformation with the given Transform object.
---
---[Wiki](https://love2d.org/wiki/love.graphics.replaceTransform)
---
---@param transform love.Transform# The Transform object to replace the current graphics coordinate transform with.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.replaceTransform(transform) end

---Resets the current graphics settings.
---
---Calling reset makes the current drawing color white, the current background color black, disables any active color component masks, disables wireframe mode and resets the current graphics transformation to the origin. It also sets both the point and line drawing modes to smooth and their sizes to 1.0.
---
---[Wiki](https://love2d.org/wiki/love.graphics.reset)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.reset() end

---Rotates the coordinate system in two dimensions.
---
---Calling this function affects all future drawing operations by rotating the coordinate system around the origin by the given amount of radians. This change lasts until love.draw() exits.
---
---[Wiki](https://love2d.org/wiki/love.graphics.rotate)
---
---@param angle number# The amount to rotate the coordinate system in radians.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.rotate(angle) end

---Scales the coordinate system in two dimensions.
---
---By default the coordinate system in LÖVE corresponds to the display pixels in horizontal and vertical directions one-to-one, and the x-axis increases towards the right while the y-axis increases downwards. Scaling the coordinate system changes this relation.
---
---After scaling by sx and sy, all coordinates are treated as if they were multiplied by sx and sy. Every result of a drawing operation is also correspondingly scaled, so scaling by (2, 2) for example would mean making everything twice as large in both x- and y-directions. Scaling by a negative value flips the coordinate system in the corresponding direction, which also means everything will be drawn flipped or upside down, or both. Scaling by zero is not a useful operation.
---
---Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.
---
---Scaling lasts until love.draw() exits.
---
---[Wiki](https://love2d.org/wiki/love.graphics.scale)
---
---@param sx number# The scaling in the direction of the x-axis.
---@param sy? number# (sx) The scaling in the direction of the y-axis. If omitted, it defaults to same as parameter sx.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.scale(sx, sy) end

---Sets the background color.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setBackgroundColor)
---
---@param red number# The red component (0-1).
---@param green number# The green component (0-1).
---@param blue number# The blue component (0-1).
---@param alpha? number# (1) The alpha component (0-1).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setBackgroundColor(red, green, blue, alpha) end

---Sets the background color.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setBackgroundColor)
---
---@param rgba table[]# A numerical indexed table with the red, green, blue and alpha values as numbers. The alpha is optional and defaults to 1 if it is left out.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setBackgroundColor(rgba) end

---Sets the blending mode.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setBlendMode)
---
---@param mode love.BlendMode# The blend mode to use.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setBlendMode(mode) end

---Sets the blending mode.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setBlendMode)
---
---@param mode love.BlendMode# The blend mode to use.
---@param alphamode? love.BlendAlphaMode# ('alphamultiply') What to do with the alpha of drawn objects when blending.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setBlendMode(mode, alphamode) end

---Captures drawing operations to a Canvas.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setCanvas)
---
---@param canvas love.Canvas# The new target.
---@param mipmap? number# (1) The mipmap level to render to, for Canvases with mipmaps.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setCanvas(canvas, mipmap) end

---Captures drawing operations to a Canvas.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setCanvas)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setCanvas() end

---Captures drawing operations to a Canvas.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setCanvas)
---
---@param canvas1 love.Canvas# The first render target.
---@param canvas2 love.Canvas# The second render target.
---@param ... love.Canvas# More canvases.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setCanvas(canvas1, canvas2, ...) end

---Captures drawing operations to a Canvas.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setCanvas)
---
---@param canvas love.Canvas# The new render target.
---@param slice number# For cubemaps this is the cube face index to render to (between 1 and 6). For Array textures this is the array layer. For volume textures this is the depth slice. 2D canvases should use a value of 1.
---@param mipmap? number# (1) The mipmap level to render to, for Canvases with mipmaps.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setCanvas(canvas, slice, mipmap) end

---Captures drawing operations to a Canvas.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setCanvas)
---
---@param setup {
---[1] : love.Canvas,
---[2] : love.Canvas,
---[...] : love.Canvas,
---stencil : boolean,
---depth : boolean,
---depthstencil : love.Canvas}# A table specifying the active Canvas(es), their mipmap levels and active layers if applicable, and whether to use a stencil and/or depth buffer.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setCanvas(setup) end

---Sets the color used for drawing.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setColor)
---
---@param red number# The amount of red.
---@param green number# The amount of green.
---@param blue number# The amount of blue.
---@param alpha? number# (1) The amount of alpha.  The alpha value will be applied to all subsequent draw operations, even the drawing of an image.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setColor(red, green, blue, alpha) end

---Sets the color used for drawing.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setColor)
---
---@param rgba table[]# A numerical indexed table with the red, green, blue and alpha values as numbers. The alpha is optional and defaults to 1 if it is left out.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setColor(rgba) end

---Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if '''red''' is set to '''false''', no further changes will be made to the red component of any pixels.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setColorMask)
---
---@param red boolean# Render red component.
---@param green boolean# Render green component.
---@param blue boolean# Render blue component.
---@param alpha boolean# Render alpha component.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setColorMask(red, green, blue, alpha) end

---Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if '''red''' is set to '''false''', no further changes will be made to the red component of any pixels.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setColorMask)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setColorMask() end

---Sets the default scaling filters used with Images, Canvases, and Fonts.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setDefaultFilter)
---
---@param min love.FilterMode# Filter mode used when scaling the image down.
---@param mag? love.FilterMode# (min) Filter mode used when scaling the image up.
---@param anisotropy? number# (1) Maximum amount of Anisotropic Filtering used.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setDefaultFilter(min, mag, anisotropy) end

---Configures depth testing and writing to the depth buffer.
---
---This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setDepthMode)
---
---@param comparemode love.CompareMode# Depth comparison mode used for depth testing.
---@param write boolean# Whether to write update / write values to the depth buffer when rendering.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setDepthMode(comparemode, write) end

---Configures depth testing and writing to the depth buffer.
---
---This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setDepthMode)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setDepthMode() end

---Set an already-loaded Font as the current font or create and load a new one from the file and size.
---
---It's recommended that Font objects are created with love.graphics.newFont in the loading stage and then passed to this function in the drawing stage.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setFont)
---
---@param font love.Font# The Font object to use.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setFont(font) end

---Sets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.
---
---This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setFrontFaceWinding)
---
---@param winding love.VertexWinding# The winding mode to use. The default winding is counterclockwise ('ccw').
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setFrontFaceWinding(winding) end

---Sets the line join style. See LineJoin for the possible options.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setLineJoin)
---
---@param join love.LineJoin# The LineJoin to use.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setLineJoin(join) end

---Sets the line style.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setLineStyle)
---
---@param style love.LineStyle# The LineStyle to use. Line styles include smooth and rough.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setLineStyle(style) end

---Sets the line width.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setLineWidth)
---
---@param width number# The width of the line.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setLineWidth(width) end

---Sets whether back-facing triangles in a Mesh are culled.
---
---This is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.
---
---By default, both front- and back-facing triangles in Meshes are rendered.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setMeshCullMode)
---
---@param mode love.CullMode# The Mesh face culling mode to use (whether to render everything, cull back-facing triangles, or cull front-facing triangles).
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setMeshCullMode(mode) end

---Creates and sets a new Font.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setNewFont)
---
---@param size? number# (12) The size of the font.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setNewFont(size) end

---Creates and sets a new Font.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setNewFont)
---
---@param filename string# The path and name of the file with the font.
---@param size? number# (12) The size of the font.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setNewFont(filename, size) end

---Creates and sets a new Font.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setNewFont)
---
---@param file love.File# A File with the font.
---@param size? number# (12) The size of the font.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setNewFont(file, size) end

---Creates and sets a new Font.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setNewFont)
---
---@param data love.Data# A Data with the font.
---@param size? number# (12) The size of the font.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setNewFont(data, size) end

---Creates and sets a new Font.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setNewFont)
---
---@param rasterizer love.Rasterizer# A rasterizer.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setNewFont(rasterizer) end

---Sets the point size.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setPointSize)
---
---@param size number# The new point size.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setPointSize(size) end

---Sets or disables scissor.
---
---The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear. 
---
---The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).
---
---[Wiki](https://love2d.org/wiki/love.graphics.setScissor)
---
---@param x number# x coordinate of upper left corner.
---@param y number# y coordinate of upper left corner.
---@param width number# width of clipping rectangle.
---@param height number# height of clipping rectangle.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setScissor(x, y, width, height) end

---Sets or disables scissor.
---
---The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear. 
---
---The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).
---
---[Wiki](https://love2d.org/wiki/love.graphics.setScissor)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setScissor() end

---Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setShader)
---
---@param shader love.Shader# The new shader.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setShader(shader) end

---Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setShader)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setShader() end

---Configures or disables stencil testing.
---
---When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setStencilTest)
---
---@param comparemode love.CompareMode# The type of comparison to make for each pixel.
---@param comparevalue number# The value to use when comparing with the stencil value of each pixel. Must be between 0 and 255.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setStencilTest(comparemode, comparevalue) end

---Configures or disables stencil testing.
---
---When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setStencilTest)
---
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setStencilTest() end

---Sets whether wireframe lines will be used when drawing.
---
---[Wiki](https://love2d.org/wiki/love.graphics.setWireframe)
---
---@param enable boolean# True to enable wireframe mode when drawing, false to disable it.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.setWireframe(enable) end

---Shears the coordinate system.
---
---[Wiki](https://love2d.org/wiki/love.graphics.shear)
---
---@param kx number# The shear factor on the x-axis.
---@param ky number# The shear factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.shear(kx, ky) end

---Draws geometry as a stencil.
---
---The geometry drawn by the supplied function sets invisible stencil values of pixels, instead of setting pixel colors. The stencil buffer (which contains those stencil values) can act like a mask / stencil - love.graphics.setStencilTest can be used afterward to determine how further rendering is affected by the stencil values in each pixel.
---
---Stencil values are integers within the range of 255.
---
---[Wiki](https://love2d.org/wiki/love.graphics.stencil)
---
---@param stencilfunction function# Function which draws geometry. The stencil values of pixels, rather than the color of each pixel, will be affected by the geometry.
---@param action? love.StencilAction# ('replace') How to modify any stencil values of pixels that are touched by what's drawn in the stencil function.
---@param value? number# (1) The new stencil value to use for pixels if the 'replace' stencil action is used. Has no effect with other stencil actions. Must be between 0 and 255.
---@param keepvalues? boolean# (false) True to preserve old stencil values of pixels, false to re-set every pixel's stencil value to 0 before executing the stencil function. love.graphics.clear will also re-set all stencil values.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.stencil(stencilfunction, action, value, keepvalues) end

---Converts the given 2D position from global coordinates into screen-space.
---
---This effectively applies the current graphics transformations to the given position. A similar Transform:transformPoint method exists for Transform objects.
---
---[Wiki](https://love2d.org/wiki/love.graphics.transformPoint)
---
---@param globalX number# The x component of the position in global coordinates.
---@param globalY number# The y component of the position in global coordinates.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.transformPoint(globalX, globalY) end

---Translates the coordinate system in two dimensions.
---
---When this function is called with two numbers, dx, and dy, all the following drawing operations take effect as if their x and y coordinates were x+dx and y+dy. 
---
---Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.
---
---This change lasts until love.draw() exits or else a love.graphics.pop reverts to a previous love.graphics.push.
---
---Translating using whole numbers will prevent tearing/blurring of images and fonts draw after translating.
---
---[Wiki](https://love2d.org/wiki/love.graphics.translate)
---
---@param dx number# The translation relative to the x-axis.
---@param dy number# The translation relative to the y-axis.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.translate(dx, dy) end

---Validates shader code. Check if specified shader code does not contain any errors.
---
---[Wiki](https://love2d.org/wiki/love.graphics.validateShader)
---
---@param gles boolean# Validate code as GLSL ES shader.
---@param code string# The pixel shader or vertex shader code, or a filename pointing to a file with the code.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.validateShader(gles, code) end

---Validates shader code. Check if specified shader code does not contain any errors.
---
---[Wiki](https://love2d.org/wiki/love.graphics.validateShader)
---
---@param gles boolean# Validate code as GLSL ES shader.
---@param pixelcode string# The pixel shader code, or a filename pointing to a file with the code.
---@param vertexcode string# The vertex shader code, or a filename pointing to a file with the code.
---@diagnostic disable-next-line: args-after-dots
function love.graphics.validateShader(gles, pixelcode, vertexcode) end

---Gets the width and height of the CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/CompressedImageData:getDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function CompressedImageData:getDimensions() end

---Gets the width and height of the CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/CompressedImageData:getDimensions)
---
---@param level number# A mipmap level. Must be in the range of CompressedImageData:getMipmapCount().
---@diagnostic disable-next-line: args-after-dots
function CompressedImageData:getDimensions(level) end

---Gets the format of the CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/CompressedImageData:getFormat)
---
---@diagnostic disable-next-line: args-after-dots
function CompressedImageData:getFormat() end

---Gets the height of the CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/CompressedImageData:getHeight)
---
---@diagnostic disable-next-line: args-after-dots
function CompressedImageData:getHeight() end

---Gets the height of the CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/CompressedImageData:getHeight)
---
---@param level number# A mipmap level. Must be in the range of CompressedImageData:getMipmapCount().
---@diagnostic disable-next-line: args-after-dots
function CompressedImageData:getHeight(level) end

---Gets the number of mipmap levels in the CompressedImageData. The base mipmap level (original image) is included in the count.
---
---[Wiki](https://love2d.org/wiki/CompressedImageData:getMipmapCount)
---
---@diagnostic disable-next-line: args-after-dots
function CompressedImageData:getMipmapCount() end

---Gets the width of the CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/CompressedImageData:getWidth)
---
---@diagnostic disable-next-line: args-after-dots
function CompressedImageData:getWidth() end

---Gets the width of the CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/CompressedImageData:getWidth)
---
---@param level number# A mipmap level. Must be in the range of  CompressedImageData:getMipmapCount().
---@diagnostic disable-next-line: args-after-dots
function CompressedImageData:getWidth(level) end

---Encodes the ImageData and optionally writes it to the save directory.
---
---[Wiki](https://love2d.org/wiki/ImageData:encode)
---
---@param format love.ImageFormat# The format to encode the image as.
---@param filename? string# (nil) The filename to write the file to. If nil, no file will be written but the FileData will still be returned.
---@diagnostic disable-next-line: args-after-dots
function ImageData:encode(format, filename) end

---Encodes the ImageData and optionally writes it to the save directory.
---
---[Wiki](https://love2d.org/wiki/ImageData:encode)
---
---@param outFile string# Name of a file to write encoded data to. The format will be automatically deduced from the file extension.
---@diagnostic disable-next-line: args-after-dots
function ImageData:encode(outFile) end

---Encodes the ImageData and optionally writes it to the save directory.
---
---[Wiki](https://love2d.org/wiki/ImageData:encode)
---
---@param outFile string# Name of a file to write encoded data to.
---@param format love.ImageFormat# The format to encode the image in.
---@diagnostic disable-next-line: args-after-dots
function ImageData:encode(outFile, format) end

---Gets the width and height of the ImageData in pixels.
---
---[Wiki](https://love2d.org/wiki/ImageData:getDimensions)
---
---@diagnostic disable-next-line: args-after-dots
function ImageData:getDimensions() end

---Gets the height of the ImageData in pixels.
---
---[Wiki](https://love2d.org/wiki/ImageData:getHeight)
---
---@diagnostic disable-next-line: args-after-dots
function ImageData:getHeight() end

---Gets the color of a pixel at a specific position in the image.
---
---Valid x and y values start at 0 and go up to image width and height minus 1. Non-integer values are floored.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/ImageData:getPixel)
---
---@param x number# The position of the pixel on the x-axis.
---@param y number# The position of the pixel on the y-axis.
---@diagnostic disable-next-line: args-after-dots
function ImageData:getPixel(x, y) end

---Gets the width of the ImageData in pixels.
---
---[Wiki](https://love2d.org/wiki/ImageData:getWidth)
---
---@diagnostic disable-next-line: args-after-dots
function ImageData:getWidth() end

---Transform an image by applying a function to every pixel.
---
---This function is a higher-order function. It takes another function as a parameter, and calls it once for each pixel in the ImageData.
---
---The passed function is called with six parameters for each pixel in turn. The parameters are numbers that represent the x and y coordinates of the pixel and its red, green, blue and alpha values. The function should return the new red, green, blue, and alpha values for that pixel.
---
---function pixelFunction(x, y, r, g, b, a)
---
---    -- template for defining your own pixel mapping function
---
---    -- perform computations giving the new values for r, g, b and a
---
---    -- ...
---
---    return r, g, b, a
---
---end
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/ImageData:mapPixel)
---
---@param pixelFunction fun(x:number, y:number, r:number, g:number, b:number, a:number):r: number, g: number, b: number, a: number# Function to apply to every pixel.
---@param x? number# (0) The x-axis of the top-left corner of the area within the ImageData to apply the function to.
---@param y? number# (0) The y-axis of the top-left corner of the area within the ImageData to apply the function to.
---@param width? number# (ImageData:getWidth()) The width of the area within the ImageData to apply the function to.
---@param height? number# (ImageData:getHeight()) The height of the area within the ImageData to apply the function to.
---@diagnostic disable-next-line: args-after-dots
function ImageData:mapPixel(pixelFunction, x, y, width, height) end

---Paste into ImageData from another source ImageData.
---
---[Wiki](https://love2d.org/wiki/ImageData:paste)
---
---@param source love.ImageData# Source ImageData from which to copy.
---@param dx number# Destination top-left position on x-axis.
---@param dy number# Destination top-left position on y-axis.
---@param sx number# Source top-left position on x-axis.
---@param sy number# Source top-left position on y-axis.
---@param sw number# Source width.
---@param sh number# Source height.
---@diagnostic disable-next-line: args-after-dots
function ImageData:paste(source, dx, dy, sx, sy, sw, sh) end

---Sets the color of a pixel at a specific position in the image.
---
---Valid x and y values start at 0 and go up to image width and height minus 1.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/ImageData:setPixel)
---
---@param x number# The position of the pixel on the x-axis.
---@param y number# The position of the pixel on the y-axis.
---@param r number# The red component (0-1).
---@param g number# The green component (0-1).
---@param b number# The blue component (0-1).
---@param a number# The alpha component (0-1).
---@diagnostic disable-next-line: args-after-dots
function ImageData:setPixel(x, y, r, g, b, a) end

---Sets the color of a pixel at a specific position in the image.
---
---Valid x and y values start at 0 and go up to image width and height minus 1.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/ImageData:setPixel)
---
---@param x number# The position of the pixel on the x-axis.
---@param y number# The position of the pixel on the y-axis.
---@param color table[]# A numerical indexed table with the red, green, blue and alpha values as numbers.
---@diagnostic disable-next-line: args-after-dots
function ImageData:setPixel(x, y, color) end

---Gets the pixel format of the ImageData.
---
---[Wiki](https://love2d.org/wiki/ImageData:getFormat)
---
---@diagnostic disable-next-line: args-after-dots
function ImageData:getFormat() end

---Determines whether a file can be loaded as CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/love.image.isCompressed)
---
---@param filename string# The filename of the potentially compressed image file.
---@diagnostic disable-next-line: args-after-dots
function love.image.isCompressed(filename) end

---Determines whether a file can be loaded as CompressedImageData.
---
---[Wiki](https://love2d.org/wiki/love.image.isCompressed)
---
---@param fileData love.FileData# A FileData potentially containing a compressed image.
---@diagnostic disable-next-line: args-after-dots
function love.image.isCompressed(fileData) end

---Create a new CompressedImageData object from a compressed image file. LÖVE supports several compressed texture formats, enumerated in the CompressedImageFormat page.
---
---[Wiki](https://love2d.org/wiki/love.image.newCompressedData)
---
---@param filename string# The filename of the compressed image file.
---@diagnostic disable-next-line: args-after-dots
function love.image.newCompressedData(filename) end

---Create a new CompressedImageData object from a compressed image file. LÖVE supports several compressed texture formats, enumerated in the CompressedImageFormat page.
---
---[Wiki](https://love2d.org/wiki/love.image.newCompressedData)
---
---@param fileData love.FileData# A FileData containing a compressed image.
---@diagnostic disable-next-line: args-after-dots
function love.image.newCompressedData(fileData) end

---Creates a new ImageData object.
---
---[Wiki](https://love2d.org/wiki/love.image.newImageData)
---
---@param width number# The width of the ImageData.
---@param height number# The height of the ImageData.
---@diagnostic disable-next-line: args-after-dots
function love.image.newImageData(width, height) end

---Creates a new ImageData object.
---
---[Wiki](https://love2d.org/wiki/love.image.newImageData)
---
---@param width number# The width of the ImageData.
---@param height number# The height of the ImageData.
---@param format? love.PixelFormat# ('rgba8') The pixel format of the ImageData.
---@param data? string# (nil) Optional raw byte data to load into the ImageData, in the format specified by ''format''.
---@diagnostic disable-next-line: args-after-dots
function love.image.newImageData(width, height, format, data) end

---Creates a new ImageData object.
---
---[Wiki](https://love2d.org/wiki/love.image.newImageData)
---
---@param width number# The width of the ImageData.
---@param height number# The height of the ImageData.
---@param data string# The data to load into the ImageData (RGBA bytes, left to right and top to bottom).
---@diagnostic disable-next-line: args-after-dots
function love.image.newImageData(width, height, data) end

---Creates a new ImageData object.
---
---[Wiki](https://love2d.org/wiki/love.image.newImageData)
---
---@param filename string# The filename of the image file.
---@diagnostic disable-next-line: args-after-dots
function love.image.newImageData(filename) end

---Creates a new ImageData object.
---
---[Wiki](https://love2d.org/wiki/love.image.newImageData)
---
---@param filedata love.FileData# The encoded file data to decode into image data.
---@diagnostic disable-next-line: args-after-dots
function love.image.newImageData(filedata) end

---Gets the direction of each axis.
---
---[Wiki](https://love2d.org/wiki/Joystick:getAxes)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getAxes() end

---Gets the direction of an axis.
---
---[Wiki](https://love2d.org/wiki/Joystick:getAxis)
---
---@param axis number# The index of the axis to be checked.
---@diagnostic disable-next-line: args-after-dots
function Joystick:getAxis(axis) end

---Gets the number of axes on the joystick.
---
---[Wiki](https://love2d.org/wiki/Joystick:getAxisCount)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getAxisCount() end

---Gets the number of buttons on the joystick.
---
---[Wiki](https://love2d.org/wiki/Joystick:getButtonCount)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getButtonCount() end

---Gets the USB vendor ID, product ID, and product version numbers of joystick which consistent across operating systems.
---
---Can be used to show different icons, etc. for different gamepads.
---
---[Wiki](https://love2d.org/wiki/Joystick:getDeviceInfo)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getDeviceInfo() end

---Gets a stable GUID unique to the type of the physical joystick which does not change over time. For example, all Sony Dualshock 3 controllers in OS X have the same GUID. The value is platform-dependent.
---
---[Wiki](https://love2d.org/wiki/Joystick:getGUID)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getGUID() end

---Gets the direction of a virtual gamepad axis. If the Joystick isn't recognized as a gamepad or isn't connected, this function will always return 0.
---
---[Wiki](https://love2d.org/wiki/Joystick:getGamepadAxis)
---
---@param axis love.GamepadAxis# The virtual axis to be checked.
---@diagnostic disable-next-line: args-after-dots
function Joystick:getGamepadAxis(axis) end

---Gets the button, axis or hat that a virtual gamepad input is bound to.
---
---[Wiki](https://love2d.org/wiki/Joystick:getGamepadMapping)
---
---@param axis love.GamepadAxis# The virtual gamepad axis to get the binding for.
---@diagnostic disable-next-line: args-after-dots
function Joystick:getGamepadMapping(axis) end

---Gets the button, axis or hat that a virtual gamepad input is bound to.
---
---[Wiki](https://love2d.org/wiki/Joystick:getGamepadMapping)
---
---@param button love.GamepadButton# The virtual gamepad button to get the binding for.
---@diagnostic disable-next-line: args-after-dots
function Joystick:getGamepadMapping(button) end

---Gets the full gamepad mapping string of this Joystick, or nil if it's not recognized as a gamepad.
---
---The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings.
---
---[Wiki](https://love2d.org/wiki/Joystick:getGamepadMappingString)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getGamepadMappingString() end

---Gets the direction of the Joystick's hat.
---
---[Wiki](https://love2d.org/wiki/Joystick:getHat)
---
---@param hat number# The index of the hat to be checked.
---@diagnostic disable-next-line: args-after-dots
function Joystick:getHat(hat) end

---Gets the number of hats on the joystick.
---
---[Wiki](https://love2d.org/wiki/Joystick:getHatCount)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getHatCount() end

---Gets the joystick's unique identifier. The identifier will remain the same for the life of the game, even when the Joystick is disconnected and reconnected, but it '''will''' change when the game is re-launched.
---
---[Wiki](https://love2d.org/wiki/Joystick:getID)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getID() end

---Gets the name of the joystick.
---
---[Wiki](https://love2d.org/wiki/Joystick:getName)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getName() end

---Gets the current vibration motor strengths on a Joystick with rumble support.
---
---[Wiki](https://love2d.org/wiki/Joystick:getVibration)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:getVibration() end

---Gets whether the Joystick is connected.
---
---[Wiki](https://love2d.org/wiki/Joystick:isConnected)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:isConnected() end

---Checks if a button on the Joystick is pressed.
---
---LÖVE 0.9.0 had a bug which required the button indices passed to Joystick:isDown to be 0-based instead of 1-based, for example button 1 would be 0 for this function. It was fixed in 0.9.1.
---
---[Wiki](https://love2d.org/wiki/Joystick:isDown)
---
---@param buttonN number# The index of a button to check.
---@diagnostic disable-next-line: args-after-dots
function Joystick:isDown(buttonN) end

---Gets whether the Joystick is recognized as a gamepad. If this is the case, the Joystick's buttons and axes can be used in a standardized manner across different operating systems and joystick models via Joystick:getGamepadAxis, Joystick:isGamepadDown, love.gamepadpressed, and related functions.
---
---LÖVE automatically recognizes most popular controllers with a similar layout to the Xbox 360 controller as gamepads, but you can add more with love.joystick.setGamepadMapping.
---
---[Wiki](https://love2d.org/wiki/Joystick:isGamepad)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:isGamepad() end

---Checks if a virtual gamepad button on the Joystick is pressed. If the Joystick is not recognized as a Gamepad or isn't connected, then this function will always return false.
---
---[Wiki](https://love2d.org/wiki/Joystick:isGamepadDown)
---
---@param buttonN love.GamepadButton# The gamepad button to check.
---@diagnostic disable-next-line: args-after-dots
function Joystick:isGamepadDown(buttonN) end

---Gets whether the Joystick supports vibration.
---
---[Wiki](https://love2d.org/wiki/Joystick:isVibrationSupported)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:isVibrationSupported() end

---Sets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use Joystick:isVibrationSupported to check.
---
---[Wiki](https://love2d.org/wiki/Joystick:setVibration)
---
---@param left number# Strength of the left vibration motor on the Joystick. Must be in the range of 1.
---@param right number# Strength of the right vibration motor on the Joystick. Must be in the range of 1.
---@diagnostic disable-next-line: args-after-dots
function Joystick:setVibration(left, right) end

---Sets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use Joystick:isVibrationSupported to check.
---
---[Wiki](https://love2d.org/wiki/Joystick:setVibration)
---
---@diagnostic disable-next-line: args-after-dots
function Joystick:setVibration() end

---Sets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use Joystick:isVibrationSupported to check.
---
---[Wiki](https://love2d.org/wiki/Joystick:setVibration)
---
---@param left number# Strength of the left vibration motor on the Joystick. Must be in the range of 1.
---@param right number# Strength of the right vibration motor on the Joystick. Must be in the range of 1.
---@param duration? number# (-1) The duration of the vibration in seconds. A negative value means infinite duration.
---@diagnostic disable-next-line: args-after-dots
function Joystick:setVibration(left, right, duration) end

---Gets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a gamepad.
---
---The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings.
---
---[Wiki](https://love2d.org/wiki/love.joystick.getGamepadMappingString)
---
---@param guid string# The GUID value to get the mapping string for.
---@diagnostic disable-next-line: args-after-dots
function love.joystick.getGamepadMappingString(guid) end

---Gets the number of connected joysticks.
---
---[Wiki](https://love2d.org/wiki/love.joystick.getJoystickCount)
---
---@diagnostic disable-next-line: args-after-dots
function love.joystick.getJoystickCount() end

---Gets a list of connected Joysticks.
---
---[Wiki](https://love2d.org/wiki/love.joystick.getJoysticks)
---
---@diagnostic disable-next-line: args-after-dots
function love.joystick.getJoysticks() end

---Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.
---
---It also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this nice database. If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded.
---
---[Wiki](https://love2d.org/wiki/love.joystick.loadGamepadMappings)
---
---@param filename string# The filename to load the mappings string from.
---@diagnostic disable-next-line: args-after-dots
function love.joystick.loadGamepadMappings(filename) end

---Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.
---
---It also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this nice database. If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded.
---
---[Wiki](https://love2d.org/wiki/love.joystick.loadGamepadMappings)
---
---@param mappings string# The mappings string to load.
---@diagnostic disable-next-line: args-after-dots
function love.joystick.loadGamepadMappings(mappings) end

---Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified.
---
---The mappings are stored as a string for use with love.joystick.loadGamepadMappings.
---
---[Wiki](https://love2d.org/wiki/love.joystick.saveGamepadMappings)
---
---@param filename string# The filename to save the mappings string to.
---@diagnostic disable-next-line: args-after-dots
function love.joystick.saveGamepadMappings(filename) end

---Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified.
---
---The mappings are stored as a string for use with love.joystick.loadGamepadMappings.
---
---[Wiki](https://love2d.org/wiki/love.joystick.saveGamepadMappings)
---
---@diagnostic disable-next-line: args-after-dots
function love.joystick.saveGamepadMappings() end

---Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X.
---
---LÖVE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.
---
---The virtual gamepad buttons and axes are designed around the Xbox 360 controller layout.
---
---[Wiki](https://love2d.org/wiki/love.joystick.setGamepadMapping)
---
---@param guid string# The OS-dependent GUID for the type of Joystick the binding will affect.
---@param button love.GamepadButton# The virtual gamepad button to bind.
---@param inputtype love.JoystickInputType# The type of input to bind the virtual gamepad button to.
---@param inputindex number# The index of the axis, button, or hat to bind the virtual gamepad button to.
---@param hatdir? love.JoystickHat# (nil) The direction of the hat, if the virtual gamepad button will be bound to a hat. nil otherwise.
---@diagnostic disable-next-line: args-after-dots
function love.joystick.setGamepadMapping(guid, button, inputtype, inputindex, hatdir) end

---Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X.
---
---LÖVE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.
---
---The virtual gamepad buttons and axes are designed around the Xbox 360 controller layout.
---
---[Wiki](https://love2d.org/wiki/love.joystick.setGamepadMapping)
---
---@param guid string# The OS-dependent GUID for the type of Joystick the binding will affect.
---@param axis love.GamepadAxis# The virtual gamepad axis to bind.
---@param inputtype love.JoystickInputType# The type of input to bind the virtual gamepad axis to.
---@param inputindex number# The index of the axis, button, or hat to bind the virtual gamepad axis to.
---@param hatdir? love.JoystickHat# (nil) The direction of the hat, if the virtual gamepad axis will be bound to a hat. nil otherwise.
---@diagnostic disable-next-line: args-after-dots
function love.joystick.setGamepadMapping(guid, axis, inputtype, inputindex, hatdir) end

---Gets the key corresponding to the given hardware scancode.
---
---Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.
---
---Scancodes are useful for creating default controls that have the same physical locations on on all systems.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.getKeyFromScancode)
---
---@param scancode love.Scancode# The scancode to get the key from.
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.getKeyFromScancode(scancode) end

---Gets the hardware scancode corresponding to the given key.
---
---Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.
---
---Scancodes are useful for creating default controls that have the same physical locations on on all systems.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.getScancodeFromKey)
---
---@param key love.KeyConstant# The key to get the scancode from.
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.getScancodeFromKey(key) end

---Gets whether key repeat is enabled.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.hasKeyRepeat)
---
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.hasKeyRepeat() end

---Gets whether screen keyboard is supported.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.hasScreenKeyboard)
---
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.hasScreenKeyboard() end

---Gets whether text input events are enabled.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.hasTextInput)
---
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.hasTextInput() end

---Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.isDown)
---
---@param key love.KeyConstant# The key to check.
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.isDown(key) end

---Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.isDown)
---
---@param key love.KeyConstant# A key to check.
---@param ... love.KeyConstant# Additional keys to check.
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.isDown(key, ...) end

---Checks whether the specified Scancodes are pressed. Not to be confused with love.keypressed or love.keyreleased.
---
---Unlike regular KeyConstants, Scancodes are keyboard layout-independent. The scancode 'w' is used if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.isScancodeDown)
---
---@param scancode love.Scancode# A Scancode to check.
---@param ... love.Scancode# Additional Scancodes to check.
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.isScancodeDown(scancode, ...) end

---Enables or disables key repeat for love.keypressed. It is disabled by default.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.setKeyRepeat)
---
---@param enable boolean# Whether repeat keypress events should be enabled when a key is held down.
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.setKeyRepeat(enable) end

---Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android.
---
---On touch devices, this shows the system's native on-screen keyboard when it's enabled.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.setTextInput)
---
---@param enable boolean# Whether text input events should be enabled.
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.setTextInput(enable) end

---Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android.
---
---On touch devices, this shows the system's native on-screen keyboard when it's enabled.
---
---[Wiki](https://love2d.org/wiki/love.keyboard.setTextInput)
---
---@param enable boolean# Whether text input events should be enabled.
---@param x number# Text rectangle x position.
---@param y number# Text rectangle y position.
---@param w number# Text rectangle width.
---@param h number# Text rectangle height.
---@diagnostic disable-next-line: args-after-dots
function love.keyboard.setTextInput(enable, x, y, w, h) end

---Evaluate Bézier curve at parameter t. The parameter must be between 0 and 1 (inclusive).
---
---This function can be used to move objects along paths or tween parameters. However it should not be used to render the curve, see BezierCurve:render for that purpose.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:evaluate)
---
---@param t number# Where to evaluate the curve.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:evaluate(t) end

---Get coordinates of the i-th control point. Indices start with 1.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:getControlPoint)
---
---@param i number# Index of the control point.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:getControlPoint(i) end

---Get the number of control points in the Bézier curve.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:getControlPointCount)
---
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:getControlPointCount() end

---Get degree of the Bézier curve. The degree is equal to number-of-control-points - 1.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:getDegree)
---
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:getDegree() end

---Get the derivative of the Bézier curve.
---
---This function can be used to rotate sprites moving along a curve in the direction of the movement and compute the direction perpendicular to the curve at some parameter t.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:getDerivative)
---
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:getDerivative() end

---Gets a BezierCurve that corresponds to the specified segment of this BezierCurve.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:getSegment)
---
---@param startpoint number# The starting point along the curve. Must be between 0 and 1.
---@param endpoint number# The end of the segment. Must be between 0 and 1.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:getSegment(startpoint, endpoint) end

---Insert control point as the new i-th control point. Existing control points from i onwards are pushed back by 1. Indices start with 1. Negative indices wrap around: -1 is the last control point, -2 the one before the last, etc.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:insertControlPoint)
---
---@param x number# Position of the control point along the x axis.
---@param y number# Position of the control point along the y axis.
---@param i? number# (-1) Index of the control point.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:insertControlPoint(x, y, i) end

---Removes the specified control point.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:removeControlPoint)
---
---@param index number# The index of the control point to remove.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:removeControlPoint(index) end

---Get a list of coordinates to be used with love.graphics.line.
---
---This function samples the Bézier curve using recursive subdivision. You can control the recursion depth using the depth parameter.
---
---If you are just interested to know the position on the curve given a parameter, use BezierCurve:evaluate.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:render)
---
---@param depth? number# (5) Number of recursive subdivision steps.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:render(depth) end

---Get a list of coordinates on a specific part of the curve, to be used with love.graphics.line.
---
---This function samples the Bézier curve using recursive subdivision. You can control the recursion depth using the depth parameter.
---
---If you are just need to know the position on the curve given a parameter, use BezierCurve:evaluate.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:renderSegment)
---
---@param startpoint number# The starting point along the curve. Must be between 0 and 1.
---@param endpoint number# The end of the segment to render. Must be between 0 and 1.
---@param depth? number# (5) Number of recursive subdivision steps.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:renderSegment(startpoint, endpoint, depth) end

---Rotate the Bézier curve by an angle.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:rotate)
---
---@param angle number# Rotation angle in radians.
---@param ox? number# (0) X coordinate of the rotation center.
---@param oy? number# (0) Y coordinate of the rotation center.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:rotate(angle, ox, oy) end

---Scale the Bézier curve by a factor.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:scale)
---
---@param s number# Scale factor.
---@param ox? number# (0) X coordinate of the scaling center.
---@param oy? number# (0) Y coordinate of the scaling center.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:scale(s, ox, oy) end

---Set coordinates of the i-th control point. Indices start with 1.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:setControlPoint)
---
---@param i number# Index of the control point.
---@param x number# Position of the control point along the x axis.
---@param y number# Position of the control point along the y axis.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:setControlPoint(i, x, y) end

---Move the Bézier curve by an offset.
---
---[Wiki](https://love2d.org/wiki/BezierCurve:translate)
---
---@param dx number# Offset along the x axis.
---@param dy number# Offset along the y axis.
---@diagnostic disable-next-line: args-after-dots
function BezierCurve:translate(dx, dy) end

---Gets the seed of the random number generator object.
---
---The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer  values above 2^53, but the seed value is an integer number in the range of 2^64 - 1.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator:getSeed)
---
---@diagnostic disable-next-line: args-after-dots
function RandomGenerator:getSeed() end

---Gets the current state of the random number generator. This returns an opaque string which is only useful for later use with RandomGenerator:setState in the same major version of LÖVE.
---
---This is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator:getState)
---
---@diagnostic disable-next-line: args-after-dots
function RandomGenerator:getState() end

---Generates a pseudo-random number in a platform independent manner.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator:random)
---
---@diagnostic disable-next-line: args-after-dots
function RandomGenerator:random() end

---Generates a pseudo-random number in a platform independent manner.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator:random)
---
---@param max number# The maximum possible value it should return.
---@diagnostic disable-next-line: args-after-dots
function RandomGenerator:random(max) end

---Generates a pseudo-random number in a platform independent manner.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator:random)
---
---@param min number# The minimum possible value it should return.
---@param max number# The maximum possible value it should return.
---@diagnostic disable-next-line: args-after-dots
function RandomGenerator:random(min, max) end

---Get a normally distributed pseudo random number.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator:randomNormal)
---
---@param stddev? number# (1) Standard deviation of the distribution.
---@param mean? number# (0) The mean of the distribution.
---@diagnostic disable-next-line: args-after-dots
function RandomGenerator:randomNormal(stddev, mean) end

---Sets the seed of the random number generator using the specified integer number.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator:setSeed)
---
---@param seed number# The integer number with which you want to seed the randomization. Must be within the range of 2^53.
---@diagnostic disable-next-line: args-after-dots
function RandomGenerator:setSeed(seed) end

---Sets the seed of the random number generator using the specified integer number.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator:setSeed)
---
---@param low number# The lower 32 bits of the seed value. Must be within the range of 2^32 - 1.
---@param high number# The higher 32 bits of the seed value. Must be within the range of 2^32 - 1.
---@diagnostic disable-next-line: args-after-dots
function RandomGenerator:setSeed(low, high) end

---Sets the current state of the random number generator. The value used as an argument for this function is an opaque string and should only originate from a previous call to RandomGenerator:getState in the same major version of LÖVE.
---
---This is different from RandomGenerator:setSeed in that setState directly sets the RandomGenerator's current implementation-dependent state, whereas setSeed gives it a new seed value.
---
---[Wiki](https://love2d.org/wiki/RandomGenerator:setState)
---
---@param state string# The new state of the RandomGenerator object, represented as a string. This should originate from a previous call to RandomGenerator:getState.
---@diagnostic disable-next-line: args-after-dots
function RandomGenerator:setState(state) end

---Applies the given other Transform object to this one.
---
---This effectively multiplies this Transform's internal transformation matrix with the other Transform's (i.e. self * other), and stores the result in this object.
---
---[Wiki](https://love2d.org/wiki/Transform:apply)
---
---@param other love.Transform# The other Transform object to apply to this Transform.
---@diagnostic disable-next-line: args-after-dots
function Transform:apply(other) end

---Creates a new copy of this Transform.
---
---[Wiki](https://love2d.org/wiki/Transform:clone)
---
---@diagnostic disable-next-line: args-after-dots
function Transform:clone() end

---Gets the internal 4x4 transformation matrix stored by this Transform. The matrix is returned in row-major order.
---
---[Wiki](https://love2d.org/wiki/Transform:getMatrix)
---
---@diagnostic disable-next-line: args-after-dots
function Transform:getMatrix() end

---Creates a new Transform containing the inverse of this Transform.
---
---[Wiki](https://love2d.org/wiki/Transform:inverse)
---
---@diagnostic disable-next-line: args-after-dots
function Transform:inverse() end

---Applies the reverse of the Transform object's transformation to the given 2D position.
---
---This effectively converts the given position from the local coordinate space of the Transform into global coordinates.
---
---One use of this method can be to convert a screen-space mouse position into global world coordinates, if the given Transform has transformations applied that are used for a camera system in-game.
---
---[Wiki](https://love2d.org/wiki/Transform:inverseTransformPoint)
---
---@param localX number# The x component of the position with the transform applied.
---@param localY number# The y component of the position with the transform applied.
---@diagnostic disable-next-line: args-after-dots
function Transform:inverseTransformPoint(localX, localY) end

---Checks whether the Transform is an affine transformation.
---
---[Wiki](https://love2d.org/wiki/Transform:isAffine2DTransform)
---
---@diagnostic disable-next-line: args-after-dots
function Transform:isAffine2DTransform() end

---Resets the Transform to an identity state. All previously applied transformations are erased.
---
---[Wiki](https://love2d.org/wiki/Transform:reset)
---
---@diagnostic disable-next-line: args-after-dots
function Transform:reset() end

---Applies a rotation to the Transform's coordinate system. This method does not reset any previously applied transformations.
---
---[Wiki](https://love2d.org/wiki/Transform:rotate)
---
---@param angle number# The relative angle in radians to rotate this Transform by.
---@diagnostic disable-next-line: args-after-dots
function Transform:rotate(angle) end

---Scales the Transform's coordinate system. This method does not reset any previously applied transformations.
---
---[Wiki](https://love2d.org/wiki/Transform:scale)
---
---@param sx number# The relative scale factor along the x-axis.
---@param sy? number# (sx) The relative scale factor along the y-axis.
---@diagnostic disable-next-line: args-after-dots
function Transform:scale(sx, sy) end

---Directly sets the Transform's internal 4x4 transformation matrix.
---
---[Wiki](https://love2d.org/wiki/Transform:setMatrix)
---
---@param e1_1 number# The first column of the first row of the matrix.
---@param e1_2 number# The second column of the first row of the matrix.
---@param e1_3 number# The third column of the first row of the matrix.
---@param e1_4 number# The fourth column of the first row of the matrix.
---@param e2_1 number# The first column of the second row of the matrix.
---@param e2_2 number# The second column of the second row of the matrix.
---@param e2_3 number# The third column of the second row of the matrix.
---@param e2_4 number# The fourth column of the second row of the matrix.
---@param e3_1 number# The first column of the third row of the matrix.
---@param e3_2 number# The second column of the third row of the matrix.
---@param e3_3 number# The third column of the third row of the matrix.
---@param e3_4 number# The fourth column of the third row of the matrix.
---@param e4_1 number# The first column of the fourth row of the matrix.
---@param e4_2 number# The second column of the fourth row of the matrix.
---@param e4_3 number# The third column of the fourth row of the matrix.
---@param e4_4 number# The fourth column of the fourth row of the matrix.
---@diagnostic disable-next-line: args-after-dots
function Transform:setMatrix(e1_1, e1_2, e1_3, e1_4, e2_1, e2_2, e2_3, e2_4, e3_1, e3_2, e3_3, e3_4, e4_1, e4_2, e4_3, e4_4) end

---Directly sets the Transform's internal 4x4 transformation matrix.
---
---[Wiki](https://love2d.org/wiki/Transform:setMatrix)
---
---@param layout love.MatrixLayout# How to interpret the matrix element arguments (row-major or column-major).
---@param e1_1 number# The first column of the first row of the matrix.
---@param e1_2 number# The second column of the first row or the first column of the second row of the matrix, depending on the specified layout.
---@param e1_3 number# The third column/row of the first row/column of the matrix.
---@param e1_4 number# The fourth column/row of the first row/column of the matrix.
---@param e2_1 number# The first column/row of the second row/column of the matrix.
---@param e2_2 number# The second column/row of the second row/column of the matrix.
---@param e2_3 number# The third column/row of the second row/column of the matrix.
---@param e2_4 number# The fourth column/row of the second row/column of the matrix.
---@param e3_1 number# The first column/row of the third row/column of the matrix.
---@param e3_2 number# The second column/row of the third row/column of the matrix.
---@param e3_3 number# The third column/row of the third row/column of the matrix.
---@param e3_4 number# The fourth column/row of the third row/column of the matrix.
---@param e4_1 number# The first column/row of the fourth row/column of the matrix.
---@param e4_2 number# The second column/row of the fourth row/column of the matrix.
---@param e4_3 number# The third column/row of the fourth row/column of the matrix.
---@param e4_4 number# The fourth column of the fourth row of the matrix.
---@diagnostic disable-next-line: args-after-dots
function Transform:setMatrix(layout, e1_1, e1_2, e1_3, e1_4, e2_1, e2_2, e2_3, e2_4, e3_1, e3_2, e3_3, e3_4, e4_1, e4_2, e4_3, e4_4) end

---Directly sets the Transform's internal 4x4 transformation matrix.
---
---[Wiki](https://love2d.org/wiki/Transform:setMatrix)
---
---@param layout love.MatrixLayout# How to interpret the matrix element arguments (row-major or column-major).
---@param matrix table[]# A flat table containing the 16 matrix elements.
---@diagnostic disable-next-line: args-after-dots
function Transform:setMatrix(layout, matrix) end

---Directly sets the Transform's internal 4x4 transformation matrix.
---
---[Wiki](https://love2d.org/wiki/Transform:setMatrix)
---
---@param layout love.MatrixLayout# How to interpret the matrix element arguments (row-major or column-major).
---@param matrix table# A table of 4 tables, with each sub-table containing 4 matrix elements.
---@diagnostic disable-next-line: args-after-dots
function Transform:setMatrix(layout, matrix) end

---Resets the Transform to the specified transformation parameters.
---
---[Wiki](https://love2d.org/wiki/Transform:setTransformation)
---
---@param x number# The position of the Transform on the x-axis.
---@param y number# The position of the Transform on the y-axis.
---@param angle? number# (0) The orientation of the Transform in radians.
---@param sx? number# (1) Scale factor on the x-axis.
---@param sy? number# (sx) Scale factor on the y-axis.
---@param ox? number# (0) Origin offset on the x-axis.
---@param oy? number# (0) Origin offset on the y-axis.
---@param kx? number# (0) Shearing / skew factor on the x-axis.
---@param ky? number# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots
function Transform:setTransformation(x, y, angle, sx, sy, ox, oy, kx, ky) end

---Applies a shear factor (skew) to the Transform's coordinate system. This method does not reset any previously applied transformations.
---
---[Wiki](https://love2d.org/wiki/Transform:shear)
---
---@param kx number# The shear factor along the x-axis.
---@param ky number# The shear factor along the y-axis.
---@diagnostic disable-next-line: args-after-dots
function Transform:shear(kx, ky) end

---Applies the Transform object's transformation to the given 2D position.
---
---This effectively converts the given position from global coordinates into the local coordinate space of the Transform.
---
---[Wiki](https://love2d.org/wiki/Transform:transformPoint)
---
---@param globalX number# The x component of the position in global coordinates.
---@param globalY number# The y component of the position in global coordinates.
---@diagnostic disable-next-line: args-after-dots
function Transform:transformPoint(globalX, globalY) end

---Applies a translation to the Transform's coordinate system. This method does not reset any previously applied transformations.
---
---[Wiki](https://love2d.org/wiki/Transform:translate)
---
---@param dx number# The relative translation along the x-axis.
---@param dy number# The relative translation along the y-axis.
---@diagnostic disable-next-line: args-after-dots
function Transform:translate(dx, dy) end

---Converts a color from 0..255 to 0..1 range.
---
---[Wiki](https://love2d.org/wiki/love.math.colorFromBytes)
---
---@param rb number# Red color component in 0..255 range.
---@param gb number# Green color component in 0..255 range.
---@param bb number# Blue color component in 0..255 range.
---@param ab? number# (nil) Alpha color component in 0..255 range.
---@diagnostic disable-next-line: args-after-dots
function love.math.colorFromBytes(rb, gb, bb, ab) end

---Converts a color from 0..1 to 0..255 range.
---
---[Wiki](https://love2d.org/wiki/love.math.colorToBytes)
---
---@param r number# Red color component.
---@param g number# Green color component.
---@param b number# Blue color component.
---@param a? number# (nil) Alpha color component.
---@diagnostic disable-next-line: args-after-dots
function love.math.colorToBytes(r, g, b, a) end

---Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.
---
---Read more about gamma-correct rendering here, here, and here.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.math.gammaToLinear)
---
---@param r number# The red channel of the sRGB color to convert.
---@param g number# The green channel of the sRGB color to convert.
---@param b number# The blue channel of the sRGB color to convert.
---@diagnostic disable-next-line: args-after-dots
function love.math.gammaToLinear(r, g, b) end

---Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.
---
---Read more about gamma-correct rendering here, here, and here.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.math.gammaToLinear)
---
---@param color table# An array with the red, green, and blue channels of the sRGB color to convert.
---@diagnostic disable-next-line: args-after-dots
function love.math.gammaToLinear(color) end

---Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.
---
---Read more about gamma-correct rendering here, here, and here.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.math.gammaToLinear)
---
---@param c number# The value of a color channel in sRGB space to convert.
---@diagnostic disable-next-line: args-after-dots
function love.math.gammaToLinear(c) end

---Gets the seed of the random number generator.
---
---The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer  values above 2^53, but the seed can be an integer value up to 2^64.
---
---[Wiki](https://love2d.org/wiki/love.math.getRandomSeed)
---
---@diagnostic disable-next-line: args-after-dots
function love.math.getRandomSeed() end

---Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with love.math.setRandomState or RandomGenerator:setState.
---
---This is different from love.math.getRandomSeed in that getRandomState gets the random number generator's current state, whereas getRandomSeed gets the previously set seed number.
---
---[Wiki](https://love2d.org/wiki/love.math.getRandomState)
---
---@diagnostic disable-next-line: args-after-dots
function love.math.getRandomState() end

---Checks whether a polygon is convex.
---
---PolygonShapes in love.physics, some forms of Meshes, and polygons drawn with love.graphics.polygon must be simple convex polygons.
---
---[Wiki](https://love2d.org/wiki/love.math.isConvex)
---
---@param vertices table[]# The vertices of the polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}.
---@diagnostic disable-next-line: args-after-dots
function love.math.isConvex(vertices) end

---Checks whether a polygon is convex.
---
---PolygonShapes in love.physics, some forms of Meshes, and polygons drawn with love.graphics.polygon must be simple convex polygons.
---
---[Wiki](https://love2d.org/wiki/love.math.isConvex)
---
---@param x1 number# The position of the first vertex of the polygon on the x-axis.
---@param y1 number# The position of the first vertex of the polygon on the y-axis.
---@param x2 number# The position of the second vertex of the polygon on the x-axis.
---@param y2 number# The position of the second vertex of the polygon on the y-axis.
---@param ... number# Additional position of the vertex of the polygon on the x-axis and y-axis.
---@diagnostic disable-next-line: args-after-dots
function love.math.isConvex(x1, y1, x2, y2, ...) end

---Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.
---
---In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.
---
---Read more about gamma-correct rendering here, here, and here.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.math.linearToGamma)
---
---@param lr number# The red channel of the linear RGB color to convert.
---@param lg number# The green channel of the linear RGB color to convert.
---@param lb number# The blue channel of the linear RGB color to convert.
---@diagnostic disable-next-line: args-after-dots
function love.math.linearToGamma(lr, lg, lb) end

---Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.
---
---In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.
---
---Read more about gamma-correct rendering here, here, and here.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.math.linearToGamma)
---
---@param color table[]# An array with the red, green, and blue channels of the linear RGB color to convert.
---@diagnostic disable-next-line: args-after-dots
function love.math.linearToGamma(color) end

---Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.
---
---In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.
---
---Read more about gamma-correct rendering here, here, and here.
---
---In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.
---
---[Wiki](https://love2d.org/wiki/love.math.linearToGamma)
---
---@param lc number# The value of a color channel in linear RGB space to convert.
---@diagnostic disable-next-line: args-after-dots
function love.math.linearToGamma(lc) end

---Creates a new BezierCurve object.
---
---The number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four vertices define a cubic (degree 3) Bézier curve, etc.
---
---[Wiki](https://love2d.org/wiki/love.math.newBezierCurve)
---
---@param vertices table[]# The vertices of the control polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}.
---@diagnostic disable-next-line: args-after-dots
function love.math.newBezierCurve(vertices) end

---Creates a new BezierCurve object.
---
---The number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four vertices define a cubic (degree 3) Bézier curve, etc.
---
---[Wiki](https://love2d.org/wiki/love.math.newBezierCurve)
---
---@param x1 number# The position of the first vertex of the control polygon on the x-axis.
---@param y1 number# The position of the first vertex of the control polygon on the y-axis.
---@param x2 number# The position of the second vertex of the control polygon on the x-axis.
---@param y2 number# The position of the second vertex of the control polygon on the y-axis.
---@param ... number# Additional position of the vertex of the control polygon on the x-axis and y-axis.
---@diagnostic disable-next-line: args-after-dots
function love.math.newBezierCurve(x1, y1, x2, y2, ...) end

---Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.
---
---[Wiki](https://love2d.org/wiki/love.math.newRandomGenerator)
---
---@diagnostic disable-next-line: args-after-dots
function love.math.newRandomGenerator() end

---Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.
---
---[Wiki](https://love2d.org/wiki/love.math.newRandomGenerator)
---
---@param seed number# The initial seed number to use for this object.
---@diagnostic disable-next-line: args-after-dots
function love.math.newRandomGenerator(seed) end

---Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.
---
---[Wiki](https://love2d.org/wiki/love.math.newRandomGenerator)
---
---@param low number# The lower 32 bits of the seed number to use for this object.
---@param high number# The higher 32 bits of the seed number to use for this object.
---@diagnostic disable-next-line: args-after-dots
function love.math.newRandomGenerator(low, high) end

---Creates a new Transform object.
---
---[Wiki](https://love2d.org/wiki/love.math.newTransform)
---
---@diagnostic disable-next-line: args-after-dots
function love.math.newTransform() end

---Creates a new Transform object.
---
---[Wiki](https://love2d.org/wiki/love.math.newTransform)
---
---@param x number# The position of the new Transform on the x-axis.
---@param y number# The position of the new Transform on the y-axis.
---@param angle? number# (0) The orientation of the new Transform in radians.
---@param sx? number# (1) Scale factor on the x-axis.
---@param sy? number# (sx) Scale factor on the y-axis.
---@param ox? number# (0) Origin offset on the x-axis.
---@param oy? number# (0) Origin offset on the y-axis.
---@param kx? number# (0) Shearing / skew factor on the x-axis.
---@param ky? number# (0) Shearing / skew factor on the y-axis.
---@diagnostic disable-next-line: args-after-dots
function love.math.newTransform(x, y, angle, sx, sy, ox, oy, kx, ky) end

---Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.
---
---Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.
---
---There are many webpages which discuss Perlin and Simplex noise in detail.
---
---[Wiki](https://love2d.org/wiki/love.math.noise)
---
---@param x number# The number used to generate the noise value.
---@diagnostic disable-next-line: args-after-dots
function love.math.noise(x) end

---Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.
---
---Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.
---
---There are many webpages which discuss Perlin and Simplex noise in detail.
---
---[Wiki](https://love2d.org/wiki/love.math.noise)
---
---@param x number# The first value of the 2-dimensional vector used to generate the noise value.
---@param y number# The second value of the 2-dimensional vector used to generate the noise value.
---@diagnostic disable-next-line: args-after-dots
function love.math.noise(x, y) end

---Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.
---
---Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.
---
---There are many webpages which discuss Perlin and Simplex noise in detail.
---
---[Wiki](https://love2d.org/wiki/love.math.noise)
---
---@param x number# The first value of the 3-dimensional vector used to generate the noise value.
---@param y number# The second value of the 3-dimensional vector used to generate the noise value.
---@param z number# The third value of the 3-dimensional vector used to generate the noise value.
---@diagnostic disable-next-line: args-after-dots
function love.math.noise(x, y, z) end

---Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.
---
---Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.
---
---There are many webpages which discuss Perlin and Simplex noise in detail.
---
---[Wiki](https://love2d.org/wiki/love.math.noise)
---
---@param x number# The first value of the 4-dimensional vector used to generate the noise value.
---@param y number# The second value of the 4-dimensional vector used to generate the noise value.
---@param z number# The third value of the 4-dimensional vector used to generate the noise value.
---@param w number# The fourth value of the 4-dimensional vector used to generate the noise value.
---@diagnostic disable-next-line: args-after-dots
function love.math.noise(x, y, z, w) end

---Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself.
---
---[Wiki](https://love2d.org/wiki/love.math.random)
---
---@diagnostic disable-next-line: args-after-dots
function love.math.random() end

---Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself.
---
---[Wiki](https://love2d.org/wiki/love.math.random)
---
---@param max number# The maximum possible value it should return.
---@diagnostic disable-next-line: args-after-dots
function love.math.random(max) end

---Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself.
---
---[Wiki](https://love2d.org/wiki/love.math.random)
---
---@param min number# The minimum possible value it should return.
---@param max number# The maximum possible value it should return.
---@diagnostic disable-next-line: args-after-dots
function love.math.random(min, max) end

---Get a normally distributed pseudo random number.
---
---[Wiki](https://love2d.org/wiki/love.math.randomNormal)
---
---@param stddev? number# (1) Standard deviation of the distribution.
---@param mean? number# (0) The mean of the distribution.
---@diagnostic disable-next-line: args-after-dots
function love.math.randomNormal(stddev, mean) end

---Sets the seed of the random number generator using the specified integer number. This is called internally at startup, so you generally don't need to call it yourself.
---
---[Wiki](https://love2d.org/wiki/love.math.setRandomSeed)
---
---@param seed number# The integer number with which you want to seed the randomization. Must be within the range of 2^53 - 1.
---@diagnostic disable-next-line: args-after-dots
function love.math.setRandomSeed(seed) end

---Sets the seed of the random number generator using the specified integer number. This is called internally at startup, so you generally don't need to call it yourself.
---
---[Wiki](https://love2d.org/wiki/love.math.setRandomSeed)
---
---@param low number# The lower 32 bits of the seed value. Must be within the range of 2^32 - 1.
---@param high number# The higher 32 bits of the seed value. Must be within the range of 2^32 - 1.
---@diagnostic disable-next-line: args-after-dots
function love.math.setRandomSeed(low, high) end

---Sets the current state of the random number generator. The value used as an argument for this function is an opaque implementation-dependent string and should only originate from a previous call to love.math.getRandomState.
---
---This is different from love.math.setRandomSeed in that setRandomState directly sets the random number generator's current implementation-dependent state, whereas setRandomSeed gives it a new seed value.
---
---[Wiki](https://love2d.org/wiki/love.math.setRandomState)
---
---@param state string# The new state of the random number generator, represented as a string. This should originate from a previous call to love.math.getRandomState.
---@diagnostic disable-next-line: args-after-dots
function love.math.setRandomState(state) end

---Decomposes a simple convex or concave polygon into triangles.
---
---[Wiki](https://love2d.org/wiki/love.math.triangulate)
---
---@param polygon table# Polygon to triangulate. Must not intersect itself.
---@diagnostic disable-next-line: args-after-dots
function love.math.triangulate(polygon) end

---Decomposes a simple convex or concave polygon into triangles.
---
---[Wiki](https://love2d.org/wiki/love.math.triangulate)
---
---@param x1 number# The position of the first vertex of the polygon on the x-axis.
---@param y1 number# The position of the first vertex of the polygon on the y-axis.
---@param x2 number# The position of the second vertex of the polygon on the x-axis.
---@param y2 number# The position of the second vertex of the polygon on the y-axis.
---@param x3 number# The position of the third vertex of the polygon on the x-axis.
---@param y3 number# The position of the third vertex of the polygon on the y-axis.
---@diagnostic disable-next-line: args-after-dots
function love.math.triangulate(x1, y1, x2, y2, x3, y3) end

---Gets the type of the Cursor.
---
---[Wiki](https://love2d.org/wiki/Cursor:getType)
---
---@diagnostic disable-next-line: args-after-dots
function Cursor:getType() end

---Gets the current Cursor.
---
---[Wiki](https://love2d.org/wiki/love.mouse.getCursor)
---
---@diagnostic disable-next-line: args-after-dots
function love.mouse.getCursor() end

---Returns the current position of the mouse.
---
---[Wiki](https://love2d.org/wiki/love.mouse.getPosition)
---
---@diagnostic disable-next-line: args-after-dots
function love.mouse.getPosition() end

---Gets whether relative mode is enabled for the mouse.
---
---If relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.
---
---The reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated.
---
---[Wiki](https://love2d.org/wiki/love.mouse.getRelativeMode)
---
---@diagnostic disable-next-line: args-after-dots
function love.mouse.getRelativeMode() end

---Gets a Cursor object representing a system-native hardware cursor.
---
---Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.
---
---[Wiki](https://love2d.org/wiki/love.mouse.getSystemCursor)
---
---@param ctype love.CursorType# The type of system cursor to get. 
---@diagnostic disable-next-line: args-after-dots
function love.mouse.getSystemCursor(ctype) end

---Returns the current x-position of the mouse.
---
---[Wiki](https://love2d.org/wiki/love.mouse.getX)
---
---@diagnostic disable-next-line: args-after-dots
function love.mouse.getX() end

---Returns the current y-position of the mouse.
---
---[Wiki](https://love2d.org/wiki/love.mouse.getY)
---
---@diagnostic disable-next-line: args-after-dots
function love.mouse.getY() end

---Gets whether cursor functionality is supported.
---
---If it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors.
---
---[Wiki](https://love2d.org/wiki/love.mouse.isCursorSupported)
---
---@diagnostic disable-next-line: args-after-dots
function love.mouse.isCursorSupported() end

---Checks whether a certain mouse button is down.
---
---This function does not detect mouse wheel scrolling; you must use the love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for that. 
---
---[Wiki](https://love2d.org/wiki/love.mouse.isDown)
---
---@param button number# The index of a button to check. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependant.
---@param ... number# Additional button numbers to check.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.isDown(button, ...) end

---Checks if the mouse is grabbed.
---
---[Wiki](https://love2d.org/wiki/love.mouse.isGrabbed)
---
---@diagnostic disable-next-line: args-after-dots
function love.mouse.isGrabbed() end

---Checks if the cursor is visible.
---
---[Wiki](https://love2d.org/wiki/love.mouse.isVisible)
---
---@diagnostic disable-next-line: args-after-dots
function love.mouse.isVisible() end

---Creates a new hardware Cursor object from an image file or ImageData.
---
---Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.
---
---The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.
---
---[Wiki](https://love2d.org/wiki/love.mouse.newCursor)
---
---@param imageData love.ImageData# The ImageData to use for the new Cursor.
---@param hotx? number# (0) The x-coordinate in the ImageData of the cursor's hot spot.
---@param hoty? number# (0) The y-coordinate in the ImageData of the cursor's hot spot.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.newCursor(imageData, hotx, hoty) end

---Creates a new hardware Cursor object from an image file or ImageData.
---
---Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.
---
---The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.
---
---[Wiki](https://love2d.org/wiki/love.mouse.newCursor)
---
---@param filename string# Path to the image to use for the new Cursor.
---@param hotx? number# (0) The x-coordinate in the image of the cursor's hot spot.
---@param hoty? number# (0) The y-coordinate in the image of the cursor's hot spot.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.newCursor(filename, hotx, hoty) end

---Creates a new hardware Cursor object from an image file or ImageData.
---
---Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.
---
---The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.
---
---[Wiki](https://love2d.org/wiki/love.mouse.newCursor)
---
---@param fileData love.FileData# Data representing the image to use for the new Cursor.
---@param hotx? number# (0) The x-coordinate in the image of the cursor's hot spot.
---@param hoty? number# (0) The y-coordinate in the image of the cursor's hot spot.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.newCursor(fileData, hotx, hoty) end

---Sets the current mouse cursor.
---
---[Wiki](https://love2d.org/wiki/love.mouse.setCursor)
---
---@param cursor love.Cursor# The Cursor object to use as the current mouse cursor.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.setCursor(cursor) end

---Sets the current mouse cursor.
---
---[Wiki](https://love2d.org/wiki/love.mouse.setCursor)
---
---@diagnostic disable-next-line: args-after-dots
function love.mouse.setCursor() end

---Grabs the mouse and confines it to the window.
---
---[Wiki](https://love2d.org/wiki/love.mouse.setGrabbed)
---
---@param grab boolean# True to confine the mouse, false to let it leave the window.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.setGrabbed(grab) end

---Sets the current position of the mouse. Non-integer values are floored.
---
---[Wiki](https://love2d.org/wiki/love.mouse.setPosition)
---
---@param x number# The new position of the mouse along the x-axis.
---@param y number# The new position of the mouse along the y-axis.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.setPosition(x, y) end

---Sets whether relative mode is enabled for the mouse.
---
---When relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.
---
---The reported position of the mouse may not be updated while relative mode is enabled, even when relative mouse motion events are generated.
---
---[Wiki](https://love2d.org/wiki/love.mouse.setRelativeMode)
---
---@param enable boolean# True to enable relative mode, false to disable it.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.setRelativeMode(enable) end

---Sets the current visibility of the cursor.
---
---[Wiki](https://love2d.org/wiki/love.mouse.setVisible)
---
---@param visible boolean# True to set the cursor to visible, false to hide the cursor.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.setVisible(visible) end

---Sets the current X position of the mouse.
---
---Non-integer values are floored.
---
---[Wiki](https://love2d.org/wiki/love.mouse.setX)
---
---@param x number# The new position of the mouse along the x-axis.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.setX(x) end

---Sets the current Y position of the mouse.
---
---Non-integer values are floored.
---
---[Wiki](https://love2d.org/wiki/love.mouse.setY)
---
---@param y number# The new position of the mouse along the y-axis.
---@diagnostic disable-next-line: args-after-dots
function love.mouse.setY(y) end

---Applies an angular impulse to a body. This makes a single, instantaneous addition to the body momentum.
---
---A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce.
---
---[Wiki](https://love2d.org/wiki/Body:applyAngularImpulse)
---
---@param impulse number# The impulse in kilogram-square meter per second.
---@diagnostic disable-next-line: args-after-dots
function Body:applyAngularImpulse(impulse) end

---Apply force to a Body.
---
---A force pushes a body in a direction. A body with with a larger mass will react less. The reaction also depends on how long a force is applied: since the force acts continuously over the entire timestep, a short timestep will only push the body for a short time. Thus forces are best used for many timesteps to give a continuous push to a body (like gravity). For a single push that is independent of timestep, it is better to use Body:applyLinearImpulse.
---
---If the position to apply the force is not given, it will act on the center of mass of the body. The part of the force not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia).
---
---Note that the force components and position must be given in world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:applyForce)
---
---@param fx number# The x component of force to apply to the center of mass.
---@param fy number# The y component of force to apply to the center of mass.
---@diagnostic disable-next-line: args-after-dots
function Body:applyForce(fx, fy) end

---Apply force to a Body.
---
---A force pushes a body in a direction. A body with with a larger mass will react less. The reaction also depends on how long a force is applied: since the force acts continuously over the entire timestep, a short timestep will only push the body for a short time. Thus forces are best used for many timesteps to give a continuous push to a body (like gravity). For a single push that is independent of timestep, it is better to use Body:applyLinearImpulse.
---
---If the position to apply the force is not given, it will act on the center of mass of the body. The part of the force not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia).
---
---Note that the force components and position must be given in world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:applyForce)
---
---@param fx number# The x component of force to apply.
---@param fy number# The y component of force to apply.
---@param x number# The x position to apply the force.
---@param y number# The y position to apply the force.
---@diagnostic disable-next-line: args-after-dots
function Body:applyForce(fx, fy, x, y) end

---Applies an impulse to a body.
---
---This makes a single, instantaneous addition to the body momentum.
---
---An impulse pushes a body in a direction. A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce.
---
---If the position to apply the impulse is not given, it will act on the center of mass of the body. The part of the impulse not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia). 
---
---Note that the impulse components and position must be given in world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:applyLinearImpulse)
---
---@param ix number# The x component of the impulse applied to the center of mass.
---@param iy number# The y component of the impulse applied to the center of mass.
---@diagnostic disable-next-line: args-after-dots
function Body:applyLinearImpulse(ix, iy) end

---Applies an impulse to a body.
---
---This makes a single, instantaneous addition to the body momentum.
---
---An impulse pushes a body in a direction. A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce.
---
---If the position to apply the impulse is not given, it will act on the center of mass of the body. The part of the impulse not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia). 
---
---Note that the impulse components and position must be given in world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:applyLinearImpulse)
---
---@param ix number# The x component of the impulse.
---@param iy number# The y component of the impulse.
---@param x number# The x position to apply the impulse.
---@param y number# The y position to apply the impulse.
---@diagnostic disable-next-line: args-after-dots
function Body:applyLinearImpulse(ix, iy, x, y) end

---Apply torque to a body.
---
---Torque is like a force that will change the angular velocity (spin) of a body. The effect will depend on the rotational inertia a body has.
---
---[Wiki](https://love2d.org/wiki/Body:applyTorque)
---
---@param torque number# The torque to apply.
---@diagnostic disable-next-line: args-after-dots
function Body:applyTorque(torque) end

---Explicitly destroys the Body and all fixtures and joints attached to it.
---
---An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately.
---
---[Wiki](https://love2d.org/wiki/Body:destroy)
---
---@diagnostic disable-next-line: args-after-dots
function Body:destroy() end

---Get the angle of the body.
---
---The angle is measured in radians. If you need to transform it to degrees, use math.deg.
---
---A value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view.
---
---[Wiki](https://love2d.org/wiki/Body:getAngle)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getAngle() end

---Gets the Angular damping of the Body
---
---The angular damping is the ''rate of decrease of the angular velocity over time'': A spinning body with no damping and no external forces will continue spinning indefinitely. A spinning body with damping will gradually stop spinning.
---
---Damping is not the same as friction - they can be modelled together. However, only damping is provided by Box2D (and LOVE).
---
---Damping parameters should be between 0 and infinity, with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 0.1.
---
---[Wiki](https://love2d.org/wiki/Body:getAngularDamping)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getAngularDamping() end

---Get the angular velocity of the Body.
---
---The angular velocity is the ''rate of change of angle over time''.
---
---It is changed in World:update by applying torques, off centre forces/impulses, and angular damping. It can be set directly with Body:setAngularVelocity.
---
---If you need the ''rate of change of position over time'', use Body:getLinearVelocity.
---
---[Wiki](https://love2d.org/wiki/Body:getAngularVelocity)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getAngularVelocity() end

---Gets a list of all Contacts attached to the Body.
---
---[Wiki](https://love2d.org/wiki/Body:getContacts)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getContacts() end

---Returns a table with all fixtures.
---
---[Wiki](https://love2d.org/wiki/Body:getFixtures)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getFixtures() end

---Returns the gravity scale factor.
---
---[Wiki](https://love2d.org/wiki/Body:getGravityScale)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getGravityScale() end

---Gets the rotational inertia of the body.
---
---The rotational inertia is how hard is it to make the body spin.
---
---[Wiki](https://love2d.org/wiki/Body:getInertia)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getInertia() end

---Returns a table containing the Joints attached to this Body.
---
---[Wiki](https://love2d.org/wiki/Body:getJoints)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getJoints() end

---Gets the linear damping of the Body.
---
---The linear damping is the ''rate of decrease of the linear velocity over time''. A moving body with no damping and no external forces will continue moving indefinitely, as is the case in space. A moving body with damping will gradually stop moving.
---
---Damping is not the same as friction - they can be modelled together.
---
---[Wiki](https://love2d.org/wiki/Body:getLinearDamping)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getLinearDamping() end

---Gets the linear velocity of the Body from its center of mass.
---
---The linear velocity is the ''rate of change of position over time''.
---
---If you need the ''rate of change of angle over time'', use Body:getAngularVelocity.
---
---If you need to get the linear velocity of a point different from the center of mass:
---
---*  Body:getLinearVelocityFromLocalPoint allows you to specify the point in local coordinates.
---
---*  Body:getLinearVelocityFromWorldPoint allows you to specify the point in world coordinates.
---
---See page 136 of 'Essential Mathematics for Games and Interactive Applications' for definitions of local and world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getLinearVelocity)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getLinearVelocity() end

---Get the linear velocity of a point on the body.
---
---The linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning.
---
---The point on the body must given in local coordinates. Use Body:getLinearVelocityFromWorldPoint to specify this with world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getLinearVelocityFromLocalPoint)
---
---@param x number# The x position to measure velocity.
---@param y number# The y position to measure velocity.
---@diagnostic disable-next-line: args-after-dots
function Body:getLinearVelocityFromLocalPoint(x, y) end

---Get the linear velocity of a point on the body.
---
---The linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning.
---
---The point on the body must given in world coordinates. Use Body:getLinearVelocityFromLocalPoint to specify this with local coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getLinearVelocityFromWorldPoint)
---
---@param x number# The x position to measure velocity.
---@param y number# The y position to measure velocity.
---@diagnostic disable-next-line: args-after-dots
function Body:getLinearVelocityFromWorldPoint(x, y) end

---Get the center of mass position in local coordinates.
---
---Use Body:getWorldCenter to get the center of mass in world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getLocalCenter)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getLocalCenter() end

---Transform a point from world coordinates to local coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getLocalPoint)
---
---@param worldX number# The x position in world coordinates.
---@param worldY number# The y position in world coordinates.
---@diagnostic disable-next-line: args-after-dots
function Body:getLocalPoint(worldX, worldY) end

---Transforms multiple points from world coordinates to local coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getLocalPoints)
---
---@param x1 number# (Argument) The x position of the first point.
---@param y1 number# (Argument) The y position of the first point.
---@param x2 number# (Argument) The x position of the second point.
---@param y2 number# (Argument) The y position of the second point.
---@param ... number# (Argument) You can continue passing x and y position of the points.
---@diagnostic disable-next-line: args-after-dots
function Body:getLocalPoints(x1, y1, x2, y2, ...) end

---Transform a vector from world coordinates to local coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getLocalVector)
---
---@param worldX number# The vector x component in world coordinates.
---@param worldY number# The vector y component in world coordinates.
---@diagnostic disable-next-line: args-after-dots
function Body:getLocalVector(worldX, worldY) end

---Get the mass of the body.
---
---Static bodies always have a mass of 0.
---
---[Wiki](https://love2d.org/wiki/Body:getMass)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getMass() end

---Returns the mass, its center, and the rotational inertia.
---
---[Wiki](https://love2d.org/wiki/Body:getMassData)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getMassData() end

---Get the position of the body.
---
---Note that this may not be the center of mass of the body.
---
---[Wiki](https://love2d.org/wiki/Body:getPosition)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getPosition() end

---Get the position and angle of the body.
---
---Note that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view.
---
---[Wiki](https://love2d.org/wiki/Body:getTransform)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getTransform() end

---Returns the type of the body.
---
---[Wiki](https://love2d.org/wiki/Body:getType)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getType() end

---Returns the Lua value associated with this Body.
---
---[Wiki](https://love2d.org/wiki/Body:getUserData)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getUserData() end

---Gets the World the body lives in.
---
---[Wiki](https://love2d.org/wiki/Body:getWorld)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getWorld() end

---Get the center of mass position in world coordinates.
---
---Use Body:getLocalCenter to get the center of mass in local coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getWorldCenter)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getWorldCenter() end

---Transform a point from local coordinates to world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getWorldPoint)
---
---@param localX number# The x position in local coordinates.
---@param localY number# The y position in local coordinates.
---@diagnostic disable-next-line: args-after-dots
function Body:getWorldPoint(localX, localY) end

---Transforms multiple points from local coordinates to world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getWorldPoints)
---
---@param x1 number# The x position of the first point.
---@param y1 number# The y position of the first point.
---@param x2 number# The x position of the second point.
---@param y2 number# The y position of the second point.
---@diagnostic disable-next-line: args-after-dots
function Body:getWorldPoints(x1, y1, x2, y2) end

---Transform a vector from local coordinates to world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getWorldVector)
---
---@param localX number# The vector x component in local coordinates.
---@param localY number# The vector y component in local coordinates.
---@diagnostic disable-next-line: args-after-dots
function Body:getWorldVector(localX, localY) end

---Get the x position of the body in world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getX)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getX() end

---Get the y position of the body in world coordinates.
---
---[Wiki](https://love2d.org/wiki/Body:getY)
---
---@diagnostic disable-next-line: args-after-dots
function Body:getY() end

---Returns whether the body is actively used in the simulation.
---
---[Wiki](https://love2d.org/wiki/Body:isActive)
---
---@diagnostic disable-next-line: args-after-dots
function Body:isActive() end

---Returns the sleep status of the body.
---
---[Wiki](https://love2d.org/wiki/Body:isAwake)
---
---@diagnostic disable-next-line: args-after-dots
function Body:isAwake() end

---Get the bullet status of a body.
---
---There are two methods to check for body collisions:
---
---*  at their location when the world is updated (default)
---
---*  using continuous collision detection (CCD)
---
---The default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly.
---
---Note that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet.
---
---[Wiki](https://love2d.org/wiki/Body:isBullet)
---
---@diagnostic disable-next-line: args-after-dots
function Body:isBullet() end

---Gets whether the Body is destroyed. Destroyed bodies cannot be used.
---
---[Wiki](https://love2d.org/wiki/Body:isDestroyed)
---
---@diagnostic disable-next-line: args-after-dots
function Body:isDestroyed() end

---Returns whether the body rotation is locked.
---
---[Wiki](https://love2d.org/wiki/Body:isFixedRotation)
---
---@diagnostic disable-next-line: args-after-dots
function Body:isFixedRotation() end

---Returns the sleeping behaviour of the body.
---
---[Wiki](https://love2d.org/wiki/Body:isSleepingAllowed)
---
---@diagnostic disable-next-line: args-after-dots
function Body:isSleepingAllowed() end

---Gets whether the Body is touching the given other Body.
---
---[Wiki](https://love2d.org/wiki/Body:isTouching)
---
---@param otherbody love.Body# The other body to check.
---@diagnostic disable-next-line: args-after-dots
function Body:isTouching(otherbody) end

---Resets the mass of the body by recalculating it from the mass properties of the fixtures.
---
---[Wiki](https://love2d.org/wiki/Body:resetMassData)
---
---@diagnostic disable-next-line: args-after-dots
function Body:resetMassData() end

---Sets whether the body is active in the world.
---
---An inactive body does not take part in the simulation. It will not move or cause any collisions.
---
---[Wiki](https://love2d.org/wiki/Body:setActive)
---
---@param active boolean# If the body is active or not.
---@diagnostic disable-next-line: args-after-dots
function Body:setActive(active) end

---Set the angle of the body.
---
---The angle is measured in radians. If you need to transform it from degrees, use math.rad.
---
---A value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view.
---
---It is possible to cause a collision with another body by changing its angle. 
---
---[Wiki](https://love2d.org/wiki/Body:setAngle)
---
---@param angle number# The angle in radians.
---@diagnostic disable-next-line: args-after-dots
function Body:setAngle(angle) end

---Sets the angular damping of a Body
---
---See Body:getAngularDamping for a definition of angular damping.
---
---Angular damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will look unrealistic.
---
---[Wiki](https://love2d.org/wiki/Body:setAngularDamping)
---
---@param damping number# The new angular damping.
---@diagnostic disable-next-line: args-after-dots
function Body:setAngularDamping(damping) end

---Sets the angular velocity of a Body.
---
---The angular velocity is the ''rate of change of angle over time''.
---
---This function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost. 
---
---[Wiki](https://love2d.org/wiki/Body:setAngularVelocity)
---
---@param w number# The new angular velocity, in radians per second
---@diagnostic disable-next-line: args-after-dots
function Body:setAngularVelocity(w) end

---Wakes the body up or puts it to sleep.
---
---[Wiki](https://love2d.org/wiki/Body:setAwake)
---
---@param awake boolean# The body sleep status.
---@diagnostic disable-next-line: args-after-dots
function Body:setAwake(awake) end

---Set the bullet status of a body.
---
---There are two methods to check for body collisions:
---
---*  at their location when the world is updated (default)
---
---*  using continuous collision detection (CCD)
---
---The default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly.
---
---Note that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet.
---
---[Wiki](https://love2d.org/wiki/Body:setBullet)
---
---@param status boolean# The bullet status of the body.
---@diagnostic disable-next-line: args-after-dots
function Body:setBullet(status) end

---Set whether a body has fixed rotation.
---
---Bodies with fixed rotation don't vary the speed at which they rotate. Calling this function causes the mass to be reset. 
---
---[Wiki](https://love2d.org/wiki/Body:setFixedRotation)
---
---@param isFixed boolean# Whether the body should have fixed rotation.
---@diagnostic disable-next-line: args-after-dots
function Body:setFixedRotation(isFixed) end

---Sets a new gravity scale factor for the body.
---
---[Wiki](https://love2d.org/wiki/Body:setGravityScale)
---
---@param scale number# The new gravity scale factor.
---@diagnostic disable-next-line: args-after-dots
function Body:setGravityScale(scale) end

---Set the inertia of a body.
---
---[Wiki](https://love2d.org/wiki/Body:setInertia)
---
---@param inertia number# The new moment of inertia, in kilograms * pixel squared.
---@diagnostic disable-next-line: args-after-dots
function Body:setInertia(inertia) end

---Sets the linear damping of a Body
---
---See Body:getLinearDamping for a definition of linear damping.
---
---Linear damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will make the objects look 'floaty'(if gravity is enabled).
---
---[Wiki](https://love2d.org/wiki/Body:setLinearDamping)
---
---@param ld number# The new linear damping
---@diagnostic disable-next-line: args-after-dots
function Body:setLinearDamping(ld) end

---Sets a new linear velocity for the Body.
---
---This function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost.
---
---[Wiki](https://love2d.org/wiki/Body:setLinearVelocity)
---
---@param x number# The x-component of the velocity vector.
---@param y number# The y-component of the velocity vector.
---@diagnostic disable-next-line: args-after-dots
function Body:setLinearVelocity(x, y) end

---Sets a new body mass.
---
---[Wiki](https://love2d.org/wiki/Body:setMass)
---
---@param mass number# The mass, in kilograms.
---@diagnostic disable-next-line: args-after-dots
function Body:setMass(mass) end

---Overrides the calculated mass data.
---
---[Wiki](https://love2d.org/wiki/Body:setMassData)
---
---@param x number# The x position of the center of mass.
---@param y number# The y position of the center of mass.
---@param mass number# The mass of the body.
---@param inertia number# The rotational inertia.
---@diagnostic disable-next-line: args-after-dots
function Body:setMassData(x, y, mass, inertia) end

---Set the position of the body.
---
---Note that this may not be the center of mass of the body.
---
---This function cannot wake up the body.
---
---[Wiki](https://love2d.org/wiki/Body:setPosition)
---
---@param x number# The x position.
---@param y number# The y position.
---@diagnostic disable-next-line: args-after-dots
function Body:setPosition(x, y) end

---Sets the sleeping behaviour of the body. Should sleeping be allowed, a body at rest will automatically sleep. A sleeping body is not simulated unless it collided with an awake body. Be wary that one can end up with a situation like a floating sleeping body if the floor was removed.
---
---[Wiki](https://love2d.org/wiki/Body:setSleepingAllowed)
---
---@param allowed boolean# True if the body is allowed to sleep or false if not.
---@diagnostic disable-next-line: args-after-dots
function Body:setSleepingAllowed(allowed) end

---Set the position and angle of the body.
---
---Note that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view.
---
---This function cannot wake up the body.
---
---[Wiki](https://love2d.org/wiki/Body:setTransform)
---
---@param x number# The x component of the position.
---@param y number# The y component of the position.
---@param angle number# The angle in radians.
---@diagnostic disable-next-line: args-after-dots
function Body:setTransform(x, y, angle) end

---Sets a new body type.
---
---[Wiki](https://love2d.org/wiki/Body:setType)
---
---@param type love.BodyType# The new type.
---@diagnostic disable-next-line: args-after-dots
function Body:setType(type) end

---Associates a Lua value with the Body.
---
---To delete the reference, explicitly pass nil.
---
---[Wiki](https://love2d.org/wiki/Body:setUserData)
---
---@param value any# The Lua value to associate with the Body.
---@diagnostic disable-next-line: args-after-dots
function Body:setUserData(value) end

---Set the x position of the body.
---
---This function cannot wake up the body. 
---
---[Wiki](https://love2d.org/wiki/Body:setX)
---
---@param x number# The x position.
---@diagnostic disable-next-line: args-after-dots
function Body:setX(x) end

---Set the y position of the body.
---
---This function cannot wake up the body. 
---
---[Wiki](https://love2d.org/wiki/Body:setY)
---
---@param y number# The y position.
---@diagnostic disable-next-line: args-after-dots
function Body:setY(y) end

---Returns a child of the shape as an EdgeShape.
---
---[Wiki](https://love2d.org/wiki/ChainShape:getChildEdge)
---
---@param index number# The index of the child.
---@diagnostic disable-next-line: args-after-dots
function ChainShape:getChildEdge(index) end

---Gets the vertex that establishes a connection to the next shape.
---
---Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---
---[Wiki](https://love2d.org/wiki/ChainShape:getNextVertex)
---
---@diagnostic disable-next-line: args-after-dots
function ChainShape:getNextVertex() end

---Returns a point of the shape.
---
---[Wiki](https://love2d.org/wiki/ChainShape:getPoint)
---
---@param index number# The index of the point to return.
---@diagnostic disable-next-line: args-after-dots
function ChainShape:getPoint(index) end

---Returns all points of the shape.
---
---[Wiki](https://love2d.org/wiki/ChainShape:getPoints)
---
---@diagnostic disable-next-line: args-after-dots
function ChainShape:getPoints() end

---Gets the vertex that establishes a connection to the previous shape.
---
---Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---
---[Wiki](https://love2d.org/wiki/ChainShape:getPreviousVertex)
---
---@diagnostic disable-next-line: args-after-dots
function ChainShape:getPreviousVertex() end

---Returns the number of vertices the shape has.
---
---[Wiki](https://love2d.org/wiki/ChainShape:getVertexCount)
---
---@diagnostic disable-next-line: args-after-dots
function ChainShape:getVertexCount() end

---Sets a vertex that establishes a connection to the next shape.
---
---This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---
---[Wiki](https://love2d.org/wiki/ChainShape:setNextVertex)
---
---@param x number# The x-component of the vertex.
---@param y number# The y-component of the vertex.
---@diagnostic disable-next-line: args-after-dots
function ChainShape:setNextVertex(x, y) end

---Sets a vertex that establishes a connection to the previous shape.
---
---This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---
---[Wiki](https://love2d.org/wiki/ChainShape:setPreviousVertex)
---
---@param x number# The x-component of the vertex.
---@param y number# The y-component of the vertex.
---@diagnostic disable-next-line: args-after-dots
function ChainShape:setPreviousVertex(x, y) end

---Gets the center point of the circle shape.
---
---[Wiki](https://love2d.org/wiki/CircleShape:getPoint)
---
---@diagnostic disable-next-line: args-after-dots
function CircleShape:getPoint() end

---Gets the radius of the circle shape.
---
---[Wiki](https://love2d.org/wiki/CircleShape:getRadius)
---
---@diagnostic disable-next-line: args-after-dots
function CircleShape:getRadius() end

---Sets the location of the center of the circle shape.
---
---[Wiki](https://love2d.org/wiki/CircleShape:setPoint)
---
---@param x number# The x-component of the new center point of the circle.
---@param y number# The y-component of the new center point of the circle.
---@diagnostic disable-next-line: args-after-dots
function CircleShape:setPoint(x, y) end

---Sets the radius of the circle.
---
---[Wiki](https://love2d.org/wiki/CircleShape:setRadius)
---
---@param radius number# The radius of the circle
---@diagnostic disable-next-line: args-after-dots
function CircleShape:setRadius(radius) end

---Gets the child indices of the shapes of the two colliding fixtures. For ChainShapes, an index of 1 is the first edge in the chain.
---Used together with Fixture:rayCast or ChainShape:getChildEdge.
---
---[Wiki](https://love2d.org/wiki/Contact:getChildren)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:getChildren() end

---Gets the two Fixtures that hold the shapes that are in contact.
---
---[Wiki](https://love2d.org/wiki/Contact:getFixtures)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:getFixtures() end

---Get the friction between two shapes that are in contact.
---
---[Wiki](https://love2d.org/wiki/Contact:getFriction)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:getFriction() end

---Get the normal vector between two shapes that are in contact.
---
---This function returns the coordinates of a unit vector that points from the first shape to the second.
---
---[Wiki](https://love2d.org/wiki/Contact:getNormal)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:getNormal() end

---Returns the contact points of the two colliding fixtures. There can be one or two points.
---
---[Wiki](https://love2d.org/wiki/Contact:getPositions)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:getPositions() end

---Get the restitution between two shapes that are in contact.
---
---[Wiki](https://love2d.org/wiki/Contact:getRestitution)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:getRestitution() end

---Returns whether the contact is enabled. The collision will be ignored if a contact gets disabled in the preSolve callback.
---
---[Wiki](https://love2d.org/wiki/Contact:isEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:isEnabled() end

---Returns whether the two colliding fixtures are touching each other.
---
---[Wiki](https://love2d.org/wiki/Contact:isTouching)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:isTouching() end

---Resets the contact friction to the mixture value of both fixtures.
---
---[Wiki](https://love2d.org/wiki/Contact:resetFriction)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:resetFriction() end

---Resets the contact restitution to the mixture value of both fixtures.
---
---[Wiki](https://love2d.org/wiki/Contact:resetRestitution)
---
---@diagnostic disable-next-line: args-after-dots
function Contact:resetRestitution() end

---Enables or disables the contact.
---
---[Wiki](https://love2d.org/wiki/Contact:setEnabled)
---
---@param enabled boolean# True to enable or false to disable.
---@diagnostic disable-next-line: args-after-dots
function Contact:setEnabled(enabled) end

---Sets the contact friction.
---
---[Wiki](https://love2d.org/wiki/Contact:setFriction)
---
---@param friction number# The contact friction.
---@diagnostic disable-next-line: args-after-dots
function Contact:setFriction(friction) end

---Sets the contact restitution.
---
---[Wiki](https://love2d.org/wiki/Contact:setRestitution)
---
---@param restitution number# The contact restitution.
---@diagnostic disable-next-line: args-after-dots
function Contact:setRestitution(restitution) end

---Gets the damping ratio.
---
---[Wiki](https://love2d.org/wiki/DistanceJoint:getDampingRatio)
---
---@diagnostic disable-next-line: args-after-dots
function DistanceJoint:getDampingRatio() end

---Gets the response speed.
---
---[Wiki](https://love2d.org/wiki/DistanceJoint:getFrequency)
---
---@diagnostic disable-next-line: args-after-dots
function DistanceJoint:getFrequency() end

---Gets the equilibrium distance between the two Bodies.
---
---[Wiki](https://love2d.org/wiki/DistanceJoint:getLength)
---
---@diagnostic disable-next-line: args-after-dots
function DistanceJoint:getLength() end

---Sets the damping ratio.
---
---[Wiki](https://love2d.org/wiki/DistanceJoint:setDampingRatio)
---
---@param ratio number# The damping ratio.
---@diagnostic disable-next-line: args-after-dots
function DistanceJoint:setDampingRatio(ratio) end

---Sets the response speed.
---
---[Wiki](https://love2d.org/wiki/DistanceJoint:setFrequency)
---
---@param Hz number# The response speed.
---@diagnostic disable-next-line: args-after-dots
function DistanceJoint:setFrequency(Hz) end

---Sets the equilibrium distance between the two Bodies.
---
---[Wiki](https://love2d.org/wiki/DistanceJoint:setLength)
---
---@param l number# The length between the two Bodies.
---@diagnostic disable-next-line: args-after-dots
function DistanceJoint:setLength(l) end

---Gets the vertex that establishes a connection to the next shape.
---
---Setting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---
---[Wiki](https://love2d.org/wiki/EdgeShape:getNextVertex)
---
---@diagnostic disable-next-line: args-after-dots
function EdgeShape:getNextVertex() end

---Returns the local coordinates of the edge points.
---
---[Wiki](https://love2d.org/wiki/EdgeShape:getPoints)
---
---@diagnostic disable-next-line: args-after-dots
function EdgeShape:getPoints() end

---Gets the vertex that establishes a connection to the previous shape.
---
---Setting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---
---[Wiki](https://love2d.org/wiki/EdgeShape:getPreviousVertex)
---
---@diagnostic disable-next-line: args-after-dots
function EdgeShape:getPreviousVertex() end

---Sets a vertex that establishes a connection to the next shape.
---
---This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---
---[Wiki](https://love2d.org/wiki/EdgeShape:setNextVertex)
---
---@param x number# The x-component of the vertex.
---@param y number# The y-component of the vertex.
---@diagnostic disable-next-line: args-after-dots
function EdgeShape:setNextVertex(x, y) end

---Sets a vertex that establishes a connection to the previous shape.
---
---This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.
---
---[Wiki](https://love2d.org/wiki/EdgeShape:setPreviousVertex)
---
---@param x number# The x-component of the vertex.
---@param y number# The y-component of the vertex.
---@diagnostic disable-next-line: args-after-dots
function EdgeShape:setPreviousVertex(x, y) end

---Destroys the fixture.
---
---[Wiki](https://love2d.org/wiki/Fixture:destroy)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:destroy() end

---Returns the body to which the fixture is attached.
---
---[Wiki](https://love2d.org/wiki/Fixture:getBody)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getBody() end

---Returns the points of the fixture bounding box. In case the fixture has multiple children a 1-based index can be specified. For example, a fixture will have multiple children with a chain shape.
---
---[Wiki](https://love2d.org/wiki/Fixture:getBoundingBox)
---
---@param index? number# (1) A bounding box of the fixture.
---@diagnostic disable-next-line: args-after-dots
function Fixture:getBoundingBox(index) end

---Returns the categories the fixture belongs to.
---
---[Wiki](https://love2d.org/wiki/Fixture:getCategory)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getCategory() end

---Returns the density of the fixture.
---
---[Wiki](https://love2d.org/wiki/Fixture:getDensity)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getDensity() end

---Returns the filter data of the fixture.
---
---Categories and masks are encoded as the bits of a 16-bit integer.
---
---[Wiki](https://love2d.org/wiki/Fixture:getFilterData)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getFilterData() end

---Returns the friction of the fixture.
---
---[Wiki](https://love2d.org/wiki/Fixture:getFriction)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getFriction() end

---Returns the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group.
---
---The groups range from -32768 to 32767.
---
---[Wiki](https://love2d.org/wiki/Fixture:getGroupIndex)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getGroupIndex() end

---Returns which categories this fixture should '''NOT''' collide with.
---
---[Wiki](https://love2d.org/wiki/Fixture:getMask)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getMask() end

---Returns the mass, its center and the rotational inertia.
---
---[Wiki](https://love2d.org/wiki/Fixture:getMassData)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getMassData() end

---Returns the restitution of the fixture.
---
---[Wiki](https://love2d.org/wiki/Fixture:getRestitution)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getRestitution() end

---Returns the shape of the fixture. This shape is a reference to the actual data used in the simulation. It's possible to change its values between timesteps.
---
---[Wiki](https://love2d.org/wiki/Fixture:getShape)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getShape() end

---Returns the Lua value associated with this fixture.
---
---[Wiki](https://love2d.org/wiki/Fixture:getUserData)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:getUserData() end

---Gets whether the Fixture is destroyed. Destroyed fixtures cannot be used.
---
---[Wiki](https://love2d.org/wiki/Fixture:isDestroyed)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:isDestroyed() end

---Returns whether the fixture is a sensor.
---
---[Wiki](https://love2d.org/wiki/Fixture:isSensor)
---
---@diagnostic disable-next-line: args-after-dots
function Fixture:isSensor() end

---Casts a ray against the shape of the fixture and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned.
---
---The ray starts on the first point of the input line and goes towards the second point of the line. The fifth argument is the maximum distance the ray is going to travel as a scale factor of the input line length.
---
---The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children.
---
---The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point.
---
---hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction
---
---[Wiki](https://love2d.org/wiki/Fixture:rayCast)
---
---@param x1 number# The x position of the input line starting point.
---@param y1 number# The y position of the input line starting point.
---@param x2 number# The x position of the input line end point.
---@param y2 number# The y position of the input line end point.
---@param maxFraction number# Ray length parameter.
---@param childIndex? number# (1) The index of the child the ray gets cast against.
---@diagnostic disable-next-line: args-after-dots
function Fixture:rayCast(x1, y1, x2, y2, maxFraction, childIndex) end

---Sets the categories the fixture belongs to. There can be up to 16 categories represented as a number from 1 to 16.
---
---All fixture's default category is 1.
---
---[Wiki](https://love2d.org/wiki/Fixture:setCategory)
---
---@param ... number# The categories.
---@diagnostic disable-next-line: args-after-dots
function Fixture:setCategory(...) end

---Sets the density of the fixture. Call Body:resetMassData if this needs to take effect immediately.
---
---[Wiki](https://love2d.org/wiki/Fixture:setDensity)
---
---@param density number# The fixture density in kilograms per square meter.
---@diagnostic disable-next-line: args-after-dots
function Fixture:setDensity(density) end

---Sets the filter data of the fixture.
---
---Groups, categories, and mask can be used to define the collision behaviour of the fixture.
---
---If two fixtures are in the same group they either always collide if the group is positive, or never collide if it's negative. If the group is zero or they do not match, then the contact filter checks if the fixtures select a category of the other fixture with their masks. The fixtures do not collide if that's not the case. If they do have each other's categories selected, the return value of the custom contact filter will be used. They always collide if none was set.
---
---There can be up to 16 categories. Categories and masks are encoded as the bits of a 16-bit integer.
---
---When created, prior to calling this function, all fixtures have category set to 1, mask set to 65535 (all categories) and group set to 0.
---
---This function allows setting all filter data for a fixture at once. To set only the categories, the mask or the group, you can use Fixture:setCategory, Fixture:setMask or Fixture:setGroupIndex respectively.
---
---[Wiki](https://love2d.org/wiki/Fixture:setFilterData)
---
---@param categories number# The categories as an integer from 0 to 65535.
---@param mask number# The mask as an integer from 0 to 65535.
---@param group number# The group as an integer from -32768 to 32767.
---@diagnostic disable-next-line: args-after-dots
function Fixture:setFilterData(categories, mask, group) end

---Sets the friction of the fixture.
---
---Friction determines how shapes react when they 'slide' along other shapes. Low friction indicates a slippery surface, like ice, while high friction indicates a rough surface, like concrete. Range: 0.0 - 1.0.
---
---[Wiki](https://love2d.org/wiki/Fixture:setFriction)
---
---@param friction number# The fixture friction.
---@diagnostic disable-next-line: args-after-dots
function Fixture:setFriction(friction) end

---Sets the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group.
---
---The groups range from -32768 to 32767.
---
---[Wiki](https://love2d.org/wiki/Fixture:setGroupIndex)
---
---@param group number# The group as an integer from -32768 to 32767.
---@diagnostic disable-next-line: args-after-dots
function Fixture:setGroupIndex(group) end

---Sets the category mask of the fixture. There can be up to 16 categories represented as a number from 1 to 16.
---
---This fixture will '''NOT''' collide with the fixtures that are in the selected categories if the other fixture also has a category of this fixture selected.
---
---[Wiki](https://love2d.org/wiki/Fixture:setMask)
---
---@param ... number# The masks.
---@diagnostic disable-next-line: args-after-dots
function Fixture:setMask(...) end

---Sets the restitution of the fixture.
---
---[Wiki](https://love2d.org/wiki/Fixture:setRestitution)
---
---@param restitution number# The fixture restitution.
---@diagnostic disable-next-line: args-after-dots
function Fixture:setRestitution(restitution) end

---Sets whether the fixture should act as a sensor.
---
---Sensors do not cause collision responses, but the begin-contact and end-contact World callbacks will still be called for this fixture.
---
---[Wiki](https://love2d.org/wiki/Fixture:setSensor)
---
---@param sensor boolean# The sensor status.
---@diagnostic disable-next-line: args-after-dots
function Fixture:setSensor(sensor) end

---Associates a Lua value with the fixture.
---
---To delete the reference, explicitly pass nil.
---
---[Wiki](https://love2d.org/wiki/Fixture:setUserData)
---
---@param value any# The Lua value to associate with the fixture.
---@diagnostic disable-next-line: args-after-dots
function Fixture:setUserData(value) end

---Checks if a point is inside the shape of the fixture.
---
---[Wiki](https://love2d.org/wiki/Fixture:testPoint)
---
---@param x number# The x position of the point.
---@param y number# The y position of the point.
---@diagnostic disable-next-line: args-after-dots
function Fixture:testPoint(x, y) end

---Gets the maximum friction force in Newtons.
---
---[Wiki](https://love2d.org/wiki/FrictionJoint:getMaxForce)
---
---@diagnostic disable-next-line: args-after-dots
function FrictionJoint:getMaxForce() end

---Gets the maximum friction torque in Newton-meters.
---
---[Wiki](https://love2d.org/wiki/FrictionJoint:getMaxTorque)
---
---@diagnostic disable-next-line: args-after-dots
function FrictionJoint:getMaxTorque() end

---Sets the maximum friction force in Newtons.
---
---[Wiki](https://love2d.org/wiki/FrictionJoint:setMaxForce)
---
---@param maxForce number# Max force in Newtons.
---@diagnostic disable-next-line: args-after-dots
function FrictionJoint:setMaxForce(maxForce) end

---Sets the maximum friction torque in Newton-meters.
---
---[Wiki](https://love2d.org/wiki/FrictionJoint:setMaxTorque)
---
---@param torque number# Maximum torque in Newton-meters.
---@diagnostic disable-next-line: args-after-dots
function FrictionJoint:setMaxTorque(torque) end

---Get the Joints connected by this GearJoint.
---
---[Wiki](https://love2d.org/wiki/GearJoint:getJoints)
---
---@diagnostic disable-next-line: args-after-dots
function GearJoint:getJoints() end

---Get the ratio of a gear joint.
---
---[Wiki](https://love2d.org/wiki/GearJoint:getRatio)
---
---@diagnostic disable-next-line: args-after-dots
function GearJoint:getRatio() end

---Set the ratio of a gear joint.
---
---[Wiki](https://love2d.org/wiki/GearJoint:setRatio)
---
---@param ratio number# The new ratio of the joint.
---@diagnostic disable-next-line: args-after-dots
function GearJoint:setRatio(ratio) end

---Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function.
---
---In 0.7.2, when you don't have time to wait for garbage collection, this function 
---
---may be used to free the object immediately.
---
---[Wiki](https://love2d.org/wiki/Joint:destroy)
---
---@diagnostic disable-next-line: args-after-dots
function Joint:destroy() end

---Get the anchor points of the joint.
---
---[Wiki](https://love2d.org/wiki/Joint:getAnchors)
---
---@diagnostic disable-next-line: args-after-dots
function Joint:getAnchors() end

---Gets the bodies that the Joint is attached to.
---
---[Wiki](https://love2d.org/wiki/Joint:getBodies)
---
---@diagnostic disable-next-line: args-after-dots
function Joint:getBodies() end

---Gets whether the connected Bodies collide.
---
---[Wiki](https://love2d.org/wiki/Joint:getCollideConnected)
---
---@diagnostic disable-next-line: args-after-dots
function Joint:getCollideConnected() end

---Returns the reaction force in newtons on the second body
---
---[Wiki](https://love2d.org/wiki/Joint:getReactionForce)
---
---@param x number# How long the force applies. Usually the inverse time step or 1/dt.
---@diagnostic disable-next-line: args-after-dots
function Joint:getReactionForce(x) end

---Returns the reaction torque on the second body.
---
---[Wiki](https://love2d.org/wiki/Joint:getReactionTorque)
---
---@param invdt number# How long the force applies. Usually the inverse time step or 1/dt.
---@diagnostic disable-next-line: args-after-dots
function Joint:getReactionTorque(invdt) end

---Gets a string representing the type.
---
---[Wiki](https://love2d.org/wiki/Joint:getType)
---
---@diagnostic disable-next-line: args-after-dots
function Joint:getType() end

---Returns the Lua value associated with this Joint.
---
---[Wiki](https://love2d.org/wiki/Joint:getUserData)
---
---@diagnostic disable-next-line: args-after-dots
function Joint:getUserData() end

---Gets whether the Joint is destroyed. Destroyed joints cannot be used.
---
---[Wiki](https://love2d.org/wiki/Joint:isDestroyed)
---
---@diagnostic disable-next-line: args-after-dots
function Joint:isDestroyed() end

---Associates a Lua value with the Joint.
---
---To delete the reference, explicitly pass nil.
---
---[Wiki](https://love2d.org/wiki/Joint:setUserData)
---
---@param value any# The Lua value to associate with the Joint.
---@diagnostic disable-next-line: args-after-dots
function Joint:setUserData(value) end

---Gets the target angular offset between the two Bodies the Joint is attached to.
---
---[Wiki](https://love2d.org/wiki/MotorJoint:getAngularOffset)
---
---@diagnostic disable-next-line: args-after-dots
function MotorJoint:getAngularOffset() end

---Gets the target linear offset between the two Bodies the Joint is attached to.
---
---[Wiki](https://love2d.org/wiki/MotorJoint:getLinearOffset)
---
---@diagnostic disable-next-line: args-after-dots
function MotorJoint:getLinearOffset() end

---Sets the target angluar offset between the two Bodies the Joint is attached to.
---
---[Wiki](https://love2d.org/wiki/MotorJoint:setAngularOffset)
---
---@param angleoffset number# The target angular offset in radians: the second body's angle minus the first body's angle.
---@diagnostic disable-next-line: args-after-dots
function MotorJoint:setAngularOffset(angleoffset) end

---Sets the target linear offset between the two Bodies the Joint is attached to.
---
---[Wiki](https://love2d.org/wiki/MotorJoint:setLinearOffset)
---
---@param x number# The x component of the target linear offset, relative to the first Body.
---@param y number# The y component of the target linear offset, relative to the first Body.
---@diagnostic disable-next-line: args-after-dots
function MotorJoint:setLinearOffset(x, y) end

---Returns the damping ratio.
---
---[Wiki](https://love2d.org/wiki/MouseJoint:getDampingRatio)
---
---@diagnostic disable-next-line: args-after-dots
function MouseJoint:getDampingRatio() end

---Returns the frequency.
---
---[Wiki](https://love2d.org/wiki/MouseJoint:getFrequency)
---
---@diagnostic disable-next-line: args-after-dots
function MouseJoint:getFrequency() end

---Gets the highest allowed force.
---
---[Wiki](https://love2d.org/wiki/MouseJoint:getMaxForce)
---
---@diagnostic disable-next-line: args-after-dots
function MouseJoint:getMaxForce() end

---Gets the target point.
---
---[Wiki](https://love2d.org/wiki/MouseJoint:getTarget)
---
---@diagnostic disable-next-line: args-after-dots
function MouseJoint:getTarget() end

---Sets a new damping ratio.
---
---[Wiki](https://love2d.org/wiki/MouseJoint:setDampingRatio)
---
---@param ratio number# The new damping ratio.
---@diagnostic disable-next-line: args-after-dots
function MouseJoint:setDampingRatio(ratio) end

---Sets a new frequency.
---
---[Wiki](https://love2d.org/wiki/MouseJoint:setFrequency)
---
---@param freq number# The new frequency in hertz.
---@diagnostic disable-next-line: args-after-dots
function MouseJoint:setFrequency(freq) end

---Sets the highest allowed force.
---
---[Wiki](https://love2d.org/wiki/MouseJoint:setMaxForce)
---
---@param f number# The max allowed force.
---@diagnostic disable-next-line: args-after-dots
function MouseJoint:setMaxForce(f) end

---Sets the target point.
---
---[Wiki](https://love2d.org/wiki/MouseJoint:setTarget)
---
---@param x number# The x-component of the target.
---@param y number# The y-component of the target.
---@diagnostic disable-next-line: args-after-dots
function MouseJoint:setTarget(x, y) end

---Get the local coordinates of the polygon's vertices.
---
---This function has a variable number of return values. It can be used in a nested fashion with love.graphics.polygon.
---
---[Wiki](https://love2d.org/wiki/PolygonShape:getPoints)
---
---@diagnostic disable-next-line: args-after-dots
function PolygonShape:getPoints() end

---Checks whether the limits are enabled.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:areLimitsEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:areLimitsEnabled() end

---Gets the world-space axis vector of the Prismatic Joint.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getAxis)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getAxis() end

---Get the current joint angle speed.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getJointSpeed)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getJointSpeed() end

---Get the current joint translation.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getJointTranslation)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getJointTranslation() end

---Gets the joint limits.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getLimits)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getLimits() end

---Gets the lower limit.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getLowerLimit)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getLowerLimit() end

---Gets the maximum motor force.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getMaxMotorForce)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getMaxMotorForce() end

---Returns the current motor force.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getMotorForce)
---
---@param invdt number# How long the force applies. Usually the inverse time step or 1/dt.
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getMotorForce(invdt) end

---Gets the motor speed.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getMotorSpeed)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getMotorSpeed() end

---Gets the reference angle.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getReferenceAngle)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getReferenceAngle() end

---Gets the upper limit.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:getUpperLimit)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:getUpperLimit() end

---Checks whether the motor is enabled.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:isMotorEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:isMotorEnabled() end

---Sets the limits.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:setLimits)
---
---@param lower number# The lower limit, usually in meters.
---@param upper number# The upper limit, usually in meters.
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:setLimits(lower, upper) end

---Enables/disables the joint limit.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:setLimitsEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:setLimitsEnabled() end

---Sets the lower limit.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:setLowerLimit)
---
---@param lower number# The lower limit, usually in meters.
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:setLowerLimit(lower) end

---Set the maximum motor force.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:setMaxMotorForce)
---
---@param f number# The maximum motor force, usually in N.
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:setMaxMotorForce(f) end

---Enables/disables the joint motor.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:setMotorEnabled)
---
---@param enable boolean# True to enable, false to disable.
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:setMotorEnabled(enable) end

---Sets the motor speed.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:setMotorSpeed)
---
---@param s number# The motor speed, usually in meters per second.
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:setMotorSpeed(s) end

---Sets the upper limit.
---
---[Wiki](https://love2d.org/wiki/PrismaticJoint:setUpperLimit)
---
---@param upper number# The upper limit, usually in meters.
---@diagnostic disable-next-line: args-after-dots
function PrismaticJoint:setUpperLimit(upper) end

---Get the total length of the rope.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint:getConstant)
---
---@diagnostic disable-next-line: args-after-dots
function PulleyJoint:getConstant() end

---Get the ground anchor positions in world coordinates.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint:getGroundAnchors)
---
---@diagnostic disable-next-line: args-after-dots
function PulleyJoint:getGroundAnchors() end

---Get the current length of the rope segment attached to the first body.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint:getLengthA)
---
---@diagnostic disable-next-line: args-after-dots
function PulleyJoint:getLengthA() end

---Get the current length of the rope segment attached to the second body.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint:getLengthB)
---
---@diagnostic disable-next-line: args-after-dots
function PulleyJoint:getLengthB() end

---Get the maximum lengths of the rope segments.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint:getMaxLengths)
---
---@diagnostic disable-next-line: args-after-dots
function PulleyJoint:getMaxLengths() end

---Get the pulley ratio.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint:getRatio)
---
---@diagnostic disable-next-line: args-after-dots
function PulleyJoint:getRatio() end

---Set the total length of the rope.
---
---Setting a new length for the rope updates the maximum length values of the joint.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint:setConstant)
---
---@param length number# The new length of the rope in the joint.
---@diagnostic disable-next-line: args-after-dots
function PulleyJoint:setConstant(length) end

---Set the maximum lengths of the rope segments.
---
---The physics module also imposes maximum values for the rope segments. If the parameters exceed these values, the maximum values are set instead of the requested values.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint:setMaxLengths)
---
---@param max1 number# The new maximum length of the first segment.
---@param max2 number# The new maximum length of the second segment.
---@diagnostic disable-next-line: args-after-dots
function PulleyJoint:setMaxLengths(max1, max2) end

---Set the pulley ratio.
---
---[Wiki](https://love2d.org/wiki/PulleyJoint:setRatio)
---
---@param ratio number# The new pulley ratio of the joint.
---@diagnostic disable-next-line: args-after-dots
function PulleyJoint:setRatio(ratio) end

---Checks whether limits are enabled.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:areLimitsEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:areLimitsEnabled() end

---Get the current joint angle.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:getJointAngle)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:getJointAngle() end

---Get the current joint angle speed.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:getJointSpeed)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:getJointSpeed() end

---Gets the joint limits.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:getLimits)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:getLimits() end

---Gets the lower limit.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:getLowerLimit)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:getLowerLimit() end

---Gets the maximum motor force.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:getMaxMotorTorque)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:getMaxMotorTorque() end

---Gets the motor speed.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:getMotorSpeed)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:getMotorSpeed() end

---Get the current motor force.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:getMotorTorque)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:getMotorTorque() end

---Gets the reference angle.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:getReferenceAngle)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:getReferenceAngle() end

---Gets the upper limit.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:getUpperLimit)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:getUpperLimit() end

---Checks whether limits are enabled.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:hasLimitsEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:hasLimitsEnabled() end

---Checks whether the motor is enabled.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:isMotorEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:isMotorEnabled() end

---Sets the limits.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:setLimits)
---
---@param lower number# The lower limit, in radians.
---@param upper number# The upper limit, in radians.
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:setLimits(lower, upper) end

---Enables/disables the joint limit.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:setLimitsEnabled)
---
---@param enable boolean# True to enable, false to disable.
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:setLimitsEnabled(enable) end

---Sets the lower limit.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:setLowerLimit)
---
---@param lower number# The lower limit, in radians.
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:setLowerLimit(lower) end

---Set the maximum motor force.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:setMaxMotorTorque)
---
---@param f number# The maximum motor force, in Nm.
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:setMaxMotorTorque(f) end

---Enables/disables the joint motor.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:setMotorEnabled)
---
---@param enable boolean# True to enable, false to disable.
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:setMotorEnabled(enable) end

---Sets the motor speed.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:setMotorSpeed)
---
---@param s number# The motor speed, radians per second.
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:setMotorSpeed(s) end

---Sets the upper limit.
---
---[Wiki](https://love2d.org/wiki/RevoluteJoint:setUpperLimit)
---
---@param upper number# The upper limit, in radians.
---@diagnostic disable-next-line: args-after-dots
function RevoluteJoint:setUpperLimit(upper) end

---Gets the maximum length of a RopeJoint.
---
---[Wiki](https://love2d.org/wiki/RopeJoint:getMaxLength)
---
---@diagnostic disable-next-line: args-after-dots
function RopeJoint:getMaxLength() end

---Sets the maximum length of a RopeJoint.
---
---[Wiki](https://love2d.org/wiki/RopeJoint:setMaxLength)
---
---@param maxLength number# The new maximum length of the RopeJoint.
---@diagnostic disable-next-line: args-after-dots
function RopeJoint:setMaxLength(maxLength) end

---Returns the points of the bounding box for the transformed shape.
---
---[Wiki](https://love2d.org/wiki/Shape:computeAABB)
---
---@param tx number# The translation of the shape on the x-axis.
---@param ty number# The translation of the shape on the y-axis.
---@param tr number# The shape rotation.
---@param childIndex? number# (1) The index of the child to compute the bounding box of.
---@diagnostic disable-next-line: args-after-dots
function Shape:computeAABB(tx, ty, tr, childIndex) end

---Computes the mass properties for the shape with the specified density.
---
---[Wiki](https://love2d.org/wiki/Shape:computeMass)
---
---@param density number# The shape density.
---@diagnostic disable-next-line: args-after-dots
function Shape:computeMass(density) end

---Returns the number of children the shape has.
---
---[Wiki](https://love2d.org/wiki/Shape:getChildCount)
---
---@diagnostic disable-next-line: args-after-dots
function Shape:getChildCount() end

---Gets the radius of the shape.
---
---[Wiki](https://love2d.org/wiki/Shape:getRadius)
---
---@diagnostic disable-next-line: args-after-dots
function Shape:getRadius() end

---Gets a string representing the Shape.
---
---This function can be useful for conditional debug drawing.
---
---[Wiki](https://love2d.org/wiki/Shape:getType)
---
---@diagnostic disable-next-line: args-after-dots
function Shape:getType() end

---Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position.
---
---The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length.
---
---The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children.
---
---The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point.
---
---hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction
---
---[Wiki](https://love2d.org/wiki/Shape:rayCast)
---
---@param x1 number# The x position of the input line starting point.
---@param y1 number# The y position of the input line starting point.
---@param x2 number# The x position of the input line end point.
---@param y2 number# The y position of the input line end point.
---@param maxFraction number# Ray length parameter.
---@param tx number# The translation of the shape on the x-axis.
---@param ty number# The translation of the shape on the y-axis.
---@param tr number# The shape rotation.
---@param childIndex? number# (1) The index of the child the ray gets cast against.
---@diagnostic disable-next-line: args-after-dots
function Shape:rayCast(x1, y1, x2, y2, maxFraction, tx, ty, tr, childIndex) end

---This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches.
---
---[Wiki](https://love2d.org/wiki/Shape:testPoint)
---
---@param tx number# Translates the shape along the x-axis.
---@param ty number# Translates the shape along the y-axis.
---@param tr number# Rotates the shape.
---@param x number# The x-component of the point.
---@param y number# The y-component of the point.
---@diagnostic disable-next-line: args-after-dots
function Shape:testPoint(tx, ty, tr, x, y) end

---Returns the damping ratio of the joint.
---
---[Wiki](https://love2d.org/wiki/WeldJoint:getDampingRatio)
---
---@diagnostic disable-next-line: args-after-dots
function WeldJoint:getDampingRatio() end

---Returns the frequency.
---
---[Wiki](https://love2d.org/wiki/WeldJoint:getFrequency)
---
---@diagnostic disable-next-line: args-after-dots
function WeldJoint:getFrequency() end

---Gets the reference angle.
---
---[Wiki](https://love2d.org/wiki/WeldJoint:getReferenceAngle)
---
---@diagnostic disable-next-line: args-after-dots
function WeldJoint:getReferenceAngle() end

---Sets a new damping ratio.
---
---[Wiki](https://love2d.org/wiki/WeldJoint:setDampingRatio)
---
---@param ratio number# The new damping ratio.
---@diagnostic disable-next-line: args-after-dots
function WeldJoint:setDampingRatio(ratio) end

---Sets a new frequency.
---
---[Wiki](https://love2d.org/wiki/WeldJoint:setFrequency)
---
---@param freq number# The new frequency in hertz.
---@diagnostic disable-next-line: args-after-dots
function WeldJoint:setFrequency(freq) end

---Gets the world-space axis vector of the Wheel Joint.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:getAxis)
---
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:getAxis() end

---Returns the current joint translation speed.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:getJointSpeed)
---
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:getJointSpeed() end

---Returns the current joint translation.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:getJointTranslation)
---
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:getJointTranslation() end

---Returns the maximum motor torque.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:getMaxMotorTorque)
---
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:getMaxMotorTorque() end

---Returns the speed of the motor.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:getMotorSpeed)
---
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:getMotorSpeed() end

---Returns the current torque on the motor.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:getMotorTorque)
---
---@param invdt number# How long the force applies. Usually the inverse time step or 1/dt.
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:getMotorTorque(invdt) end

---Returns the damping ratio.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:getSpringDampingRatio)
---
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:getSpringDampingRatio() end

---Returns the spring frequency.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:getSpringFrequency)
---
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:getSpringFrequency() end

---Checks if the joint motor is running.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:isMotorEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:isMotorEnabled() end

---Sets a new maximum motor torque.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:setMaxMotorTorque)
---
---@param maxTorque number# The new maximum torque for the joint motor in newton meters.
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:setMaxMotorTorque(maxTorque) end

---Starts and stops the joint motor.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:setMotorEnabled)
---
---@param enable boolean# True turns the motor on and false turns it off.
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:setMotorEnabled(enable) end

---Sets a new speed for the motor.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:setMotorSpeed)
---
---@param speed number# The new speed for the joint motor in radians per second.
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:setMotorSpeed(speed) end

---Sets a new damping ratio.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:setSpringDampingRatio)
---
---@param ratio number# The new damping ratio.
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:setSpringDampingRatio(ratio) end

---Sets a new spring frequency.
---
---[Wiki](https://love2d.org/wiki/WheelJoint:setSpringFrequency)
---
---@param freq number# The new frequency in hertz.
---@diagnostic disable-next-line: args-after-dots
function WheelJoint:setSpringFrequency(freq) end

---Destroys the world, taking all bodies, joints, fixtures and their shapes with it. 
---
---An error will occur if you attempt to use any of the destroyed objects after calling this function.
---
---[Wiki](https://love2d.org/wiki/World:destroy)
---
---@diagnostic disable-next-line: args-after-dots
function World:destroy() end

---Returns a table with all bodies.
---
---[Wiki](https://love2d.org/wiki/World:getBodies)
---
---@diagnostic disable-next-line: args-after-dots
function World:getBodies() end

---Returns the number of bodies in the world.
---
---[Wiki](https://love2d.org/wiki/World:getBodyCount)
---
---@diagnostic disable-next-line: args-after-dots
function World:getBodyCount() end

---Returns functions for the callbacks during the world update.
---
---[Wiki](https://love2d.org/wiki/World:getCallbacks)
---
---@diagnostic disable-next-line: args-after-dots
function World:getCallbacks() end

---Returns the number of contacts in the world.
---
---[Wiki](https://love2d.org/wiki/World:getContactCount)
---
---@diagnostic disable-next-line: args-after-dots
function World:getContactCount() end

---Returns the function for collision filtering.
---
---[Wiki](https://love2d.org/wiki/World:getContactFilter)
---
---@diagnostic disable-next-line: args-after-dots
function World:getContactFilter() end

---Returns a table with all Contacts.
---
---[Wiki](https://love2d.org/wiki/World:getContacts)
---
---@diagnostic disable-next-line: args-after-dots
function World:getContacts() end

---Get the gravity of the world.
---
---[Wiki](https://love2d.org/wiki/World:getGravity)
---
---@diagnostic disable-next-line: args-after-dots
function World:getGravity() end

---Returns the number of joints in the world.
---
---[Wiki](https://love2d.org/wiki/World:getJointCount)
---
---@diagnostic disable-next-line: args-after-dots
function World:getJointCount() end

---Returns a table with all joints.
---
---[Wiki](https://love2d.org/wiki/World:getJoints)
---
---@diagnostic disable-next-line: args-after-dots
function World:getJoints() end

---Gets whether the World is destroyed. Destroyed worlds cannot be used.
---
---[Wiki](https://love2d.org/wiki/World:isDestroyed)
---
---@diagnostic disable-next-line: args-after-dots
function World:isDestroyed() end

---Returns if the world is updating its state.
---
---This will return true inside the callbacks from World:setCallbacks.
---
---[Wiki](https://love2d.org/wiki/World:isLocked)
---
---@diagnostic disable-next-line: args-after-dots
function World:isLocked() end

---Gets the sleep behaviour of the world.
---
---[Wiki](https://love2d.org/wiki/World:isSleepingAllowed)
---
---@diagnostic disable-next-line: args-after-dots
function World:isSleepingAllowed() end

---Calls a function for each fixture inside the specified area by searching for any overlapping bounding box (Fixture:getBoundingBox).
---
---[Wiki](https://love2d.org/wiki/World:queryBoundingBox)
---
---@param topLeftX number# The x position of the top-left point.
---@param topLeftY number# The y position of the top-left point.
---@param bottomRightX number# The x position of the bottom-right point.
---@param bottomRightY number# The y position of the bottom-right point.
---@param callback function# This function gets passed one argument, the fixture, and should return a boolean. The search will continue if it is true or stop if it is false.
---@diagnostic disable-next-line: args-after-dots
function World:queryBoundingBox(topLeftX, topLeftY, bottomRightX, bottomRightY, callback) end

---Casts a ray and calls a function for each fixtures it intersects. 
---
---[Wiki](https://love2d.org/wiki/World:rayCast)
---
---@param x1 number# The x position of the starting point of the ray.
---@param y1 number# The x position of the starting point of the ray.
---@param x2 number# The x position of the end point of the ray.
---@param y2 number# The x value of the surface normal vector of the shape edge.
---@param callback function# A function called for each fixture intersected by the ray. The function gets six arguments and should return a number as a control value. The intersection points fed into the function will be in an arbitrary order. If you wish to find the closest point of intersection, you'll need to do that yourself within the function. The easiest way to do that is by using the fraction value.
---@diagnostic disable-next-line: args-after-dots
function World:rayCast(x1, y1, x2, y2, callback) end

---Sets functions for the collision callbacks during the world update.
---
---Four Lua functions can be given as arguments. The value nil removes a function.
---
---When called, each function will be passed three arguments. The first two arguments are the colliding fixtures and the third argument is the Contact between them. The postSolve callback additionally gets the normal and tangent impulse for each contact point. See notes.
---
---If you are interested to know when exactly each callback is called, consult a Box2d manual
---
---[Wiki](https://love2d.org/wiki/World:setCallbacks)
---
---@param beginContact function# Gets called when two fixtures begin to overlap.
---@param endContact function# Gets called when two fixtures cease to overlap. This will also be called outside of a world update, when colliding objects are destroyed.
---@param preSolve? function# (nil) Gets called before a collision gets resolved.
---@param postSolve? function# (nil) Gets called after the collision has been resolved.
---@diagnostic disable-next-line: args-after-dots
function World:setCallbacks(beginContact, endContact, preSolve, postSolve) end

---Sets a function for collision filtering.
---
---If the group and category filtering doesn't generate a collision decision, this function gets called with the two fixtures as arguments. The function should return a boolean value where true means the fixtures will collide and false means they will pass through each other.
---
---[Wiki](https://love2d.org/wiki/World:setContactFilter)
---
---@param filter function# The function handling the contact filtering.
---@diagnostic disable-next-line: args-after-dots
function World:setContactFilter(filter) end

---Set the gravity of the world.
---
---[Wiki](https://love2d.org/wiki/World:setGravity)
---
---@param x number# The x component of gravity.
---@param y number# The y component of gravity.
---@diagnostic disable-next-line: args-after-dots
function World:setGravity(x, y) end

---Sets the sleep behaviour of the world.
---
---[Wiki](https://love2d.org/wiki/World:setSleepingAllowed)
---
---@param allow boolean# True if bodies in the world are allowed to sleep, or false if not.
---@diagnostic disable-next-line: args-after-dots
function World:setSleepingAllowed(allow) end

---Translates the World's origin. Useful in large worlds where floating point precision issues become noticeable at far distances from the origin.
---
---[Wiki](https://love2d.org/wiki/World:translateOrigin)
---
---@param x number# The x component of the new origin with respect to the old origin.
---@param y number# The y component of the new origin with respect to the old origin.
---@diagnostic disable-next-line: args-after-dots
function World:translateOrigin(x, y) end

---Update the state of the world.
---
---[Wiki](https://love2d.org/wiki/World:update)
---
---@param dt number# The time (in seconds) to advance the physics simulation.
---@param velocityiterations? number# (8) The maximum number of steps used to determine the new velocities when resolving a collision.
---@param positioniterations? number# (3) The maximum number of steps used to determine the new positions when resolving a collision.
---@diagnostic disable-next-line: args-after-dots
function World:update(dt, velocityiterations, positioniterations) end

---Returns the two closest points between two fixtures and their distance.
---
---[Wiki](https://love2d.org/wiki/love.physics.getDistance)
---
---@param fixture1 love.Fixture# The first fixture.
---@param fixture2 love.Fixture# The second fixture.
---@diagnostic disable-next-line: args-after-dots
function love.physics.getDistance(fixture1, fixture2) end

---Returns the meter scale factor.
---
---All coordinates in the physics module are divided by this number, creating a convenient way to draw the objects directly to the screen without the need for graphics transformations.
---
---It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters.
---
---[Wiki](https://love2d.org/wiki/love.physics.getMeter)
---
---@diagnostic disable-next-line: args-after-dots
function love.physics.getMeter() end

---Creates a new body.
---
---There are three types of bodies. 
---
---* Static bodies do not move, have a infinite mass, and can be used for level boundaries. 
---
---* Dynamic bodies are the main actors in the simulation, they collide with everything. 
---
---* Kinematic bodies do not react to forces and only collide with dynamic bodies.
---
---The mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData.
---
---[Wiki](https://love2d.org/wiki/love.physics.newBody)
---
---@param world love.World# The world to create the body in.
---@param x? number# (0) The x position of the body.
---@param y? number# (0) The y position of the body.
---@param type? love.BodyType# ('static') The type of the body.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newBody(world, x, y, type) end

---Creates a new ChainShape.
---
---[Wiki](https://love2d.org/wiki/love.physics.newChainShape)
---
---@param loop boolean# If the chain should loop back to the first point.
---@param x1 number# The x position of the first point.
---@param y1 number# The y position of the first point.
---@param x2 number# The x position of the second point.
---@param y2 number# The y position of the second point.
---@param ... number# Additional point positions.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newChainShape(loop, x1, y1, x2, y2, ...) end

---Creates a new ChainShape.
---
---[Wiki](https://love2d.org/wiki/love.physics.newChainShape)
---
---@param loop boolean# If the chain should loop back to the first point.
---@param points table[]# A list of points to construct the ChainShape, in the form of {x1, y1, x2, y2, ...}.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newChainShape(loop, points) end

---Creates a new CircleShape.
---
---[Wiki](https://love2d.org/wiki/love.physics.newCircleShape)
---
---@param radius number# The radius of the circle.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newCircleShape(radius) end

---Creates a new CircleShape.
---
---[Wiki](https://love2d.org/wiki/love.physics.newCircleShape)
---
---@param x number# The x position of the circle.
---@param y number# The y position of the circle.
---@param radius number# The radius of the circle.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newCircleShape(x, y, radius) end

---Creates a DistanceJoint between two bodies.
---
---This joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint.
---
---[Wiki](https://love2d.org/wiki/love.physics.newDistanceJoint)
---
---@param body1 love.Body# The first body to attach to the joint.
---@param body2 love.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point (world space).
---@param y1 number# The y position of the first anchor point (world space).
---@param x2 number# The x position of the second anchor point (world space).
---@param y2 number# The y position of the second anchor point (world space).
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newDistanceJoint(body1, body2, x1, y1, x2, y2, collideConnected) end

---Creates a new EdgeShape.
---
---[Wiki](https://love2d.org/wiki/love.physics.newEdgeShape)
---
---@param x1 number# The x position of the first point.
---@param y1 number# The y position of the first point.
---@param x2 number# The x position of the second point.
---@param y2 number# The y position of the second point.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newEdgeShape(x1, y1, x2, y2) end

---Creates and attaches a Fixture to a body.
---
---Note that the Shape object is copied rather than kept as a reference when the Fixture is created. To get the Shape object that the Fixture owns, use Fixture:getShape.
---
---[Wiki](https://love2d.org/wiki/love.physics.newFixture)
---
---@param body love.Body# The body which gets the fixture attached.
---@param shape love.Shape# The shape to be copied to the fixture.
---@param density? number# (1) The density of the fixture.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newFixture(body, shape, density) end

---Create a friction joint between two bodies. A FrictionJoint applies friction to a body.
---
---[Wiki](https://love2d.org/wiki/love.physics.newFrictionJoint)
---
---@param body1 love.Body# The first body to attach to the joint.
---@param body2 love.Body# The second body to attach to the joint.
---@param x number# The x position of the anchor point.
---@param y number# The y position of the anchor point.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newFrictionJoint(body1, body2, x, y, collideConnected) end

---Create a friction joint between two bodies. A FrictionJoint applies friction to a body.
---
---[Wiki](https://love2d.org/wiki/love.physics.newFrictionJoint)
---
---@param body1 love.Body# The first body to attach to the joint.
---@param body2 love.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point.
---@param y1 number# The y position of the first anchor point.
---@param x2 number# The x position of the second anchor point.
---@param y2 number# The y position of the second anchor point.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newFrictionJoint(body1, body2, x1, y1, x2, y2, collideConnected) end

---Create a GearJoint connecting two Joints.
---
---The gear joint connects two joints that must be either  prismatic or  revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints.
---
---The gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created.
---
---[Wiki](https://love2d.org/wiki/love.physics.newGearJoint)
---
---@param joint1 love.Joint# The first joint to connect with a gear joint.
---@param joint2 love.Joint# The second joint to connect with a gear joint.
---@param ratio? number# (1) The gear ratio.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newGearJoint(joint1, joint2, ratio, collideConnected) end

---Creates a joint between two bodies which controls the relative motion between them.
---
---Position and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.
---
---[Wiki](https://love2d.org/wiki/love.physics.newMotorJoint)
---
---@param body1 love.Body# The first body to attach to the joint.
---@param body2 love.Body# The second body to attach to the joint.
---@param correctionFactor? number# (0.3) The joint's initial position correction factor, in the range of 1.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newMotorJoint(body1, body2, correctionFactor) end

---Creates a joint between two bodies which controls the relative motion between them.
---
---Position and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.
---
---[Wiki](https://love2d.org/wiki/love.physics.newMotorJoint)
---
---@param body1 love.Body# The first body to attach to the joint.
---@param body2 love.Body# The second body to attach to the joint.
---@param correctionFactor? number# (0.3) The joint's initial position correction factor, in the range of 1.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newMotorJoint(body1, body2, correctionFactor, collideConnected) end

---Create a joint between a body and the mouse.
---
---This joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below).
---
---The advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine. 
---
---[Wiki](https://love2d.org/wiki/love.physics.newMouseJoint)
---
---@param body love.Body# The body to attach to the mouse.
---@param x number# The x position of the connecting point.
---@param y number# The y position of the connecting point.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newMouseJoint(body, x, y) end

---Creates a new PolygonShape.
---
---This shape can have 8 vertices at most, and must form a convex shape.
---
---[Wiki](https://love2d.org/wiki/love.physics.newPolygonShape)
---
---@param x1 number# The x position of the first point.
---@param y1 number# The y position of the first point.
---@param x2 number# The x position of the second point.
---@param y2 number# The y position of the second point.
---@param x3 number# The x position of the third point.
---@param y3 number# The y position of the third point.
---@param ... number# You can continue passing more point positions to create the PolygonShape.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newPolygonShape(x1, y1, x2, y2, x3, y3, ...) end

---Creates a new PolygonShape.
---
---This shape can have 8 vertices at most, and must form a convex shape.
---
---[Wiki](https://love2d.org/wiki/love.physics.newPolygonShape)
---
---@param vertices table[]# A list of vertices to construct the polygon, in the form of {x1, y1, x2, y2, x3, y3, ...}.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newPolygonShape(vertices) end

---Creates a PrismaticJoint between two bodies.
---
---A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a  revolute joint, but with translation and force substituted for angle and torque.
---
---[Wiki](https://love2d.org/wiki/love.physics.newPrismaticJoint)
---
---@param body1 love.Body# The first body to connect with a prismatic joint.
---@param body2 love.Body# The second body to connect with a prismatic joint.
---@param x number# The x coordinate of the anchor point.
---@param y number# The y coordinate of the anchor point.
---@param ax number# The x coordinate of the axis vector.
---@param ay number# The y coordinate of the axis vector.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newPrismaticJoint(body1, body2, x, y, ax, ay, collideConnected) end

---Creates a PrismaticJoint between two bodies.
---
---A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a  revolute joint, but with translation and force substituted for angle and torque.
---
---[Wiki](https://love2d.org/wiki/love.physics.newPrismaticJoint)
---
---@param body1 love.Body# The first body to connect with a prismatic joint.
---@param body2 love.Body# The second body to connect with a prismatic joint.
---@param x1 number# The x coordinate of the first anchor point.
---@param y1 number# The y coordinate of the first anchor point.
---@param x2 number# The x coordinate of the second anchor point.
---@param y2 number# The y coordinate of the second anchor point.
---@param ax number# The x coordinate of the axis unit vector.
---@param ay number# The y coordinate of the axis unit vector.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newPrismaticJoint(body1, body2, x1, y1, x2, y2, ax, ay, collideConnected) end

---Creates a PrismaticJoint between two bodies.
---
---A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a  revolute joint, but with translation and force substituted for angle and torque.
---
---[Wiki](https://love2d.org/wiki/love.physics.newPrismaticJoint)
---
---@param body1 love.Body# The first body to connect with a prismatic joint.
---@param body2 love.Body# The second body to connect with a prismatic joint.
---@param x1 number# The x coordinate of the first anchor point.
---@param y1 number# The y coordinate of the first anchor point.
---@param x2 number# The x coordinate of the second anchor point.
---@param y2 number# The y coordinate of the second anchor point.
---@param ax number# The x coordinate of the axis unit vector.
---@param ay number# The y coordinate of the axis unit vector.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@param referenceAngle? number# (0) The reference angle between body1 and body2, in radians.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newPrismaticJoint(body1, body2, x1, y1, x2, y2, ax, ay, collideConnected, referenceAngle) end

---Creates a PulleyJoint to join two bodies to each other and the ground.
---
---The pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created.
---
---Pulley joints can behave unpredictably if one side is fully extended. It is recommended that the method  setMaxLengths  be used to constrain the maximum lengths each side can attain.
---
---[Wiki](https://love2d.org/wiki/love.physics.newPulleyJoint)
---
---@param body1 love.Body# The first body to connect with a pulley joint.
---@param body2 love.Body# The second body to connect with a pulley joint.
---@param gx1 number# The x coordinate of the first body's ground anchor.
---@param gy1 number# The y coordinate of the first body's ground anchor.
---@param gx2 number# The x coordinate of the second body's ground anchor.
---@param gy2 number# The y coordinate of the second body's ground anchor.
---@param x1 number# The x coordinate of the pulley joint anchor in the first body.
---@param y1 number# The y coordinate of the pulley joint anchor in the first body.
---@param x2 number# The x coordinate of the pulley joint anchor in the second body.
---@param y2 number# The y coordinate of the pulley joint anchor in the second body.
---@param ratio? number# (1) The joint ratio.
---@param collideConnected? boolean# (true) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newPulleyJoint(body1, body2, gx1, gy1, gx2, gy2, x1, y1, x2, y2, ratio, collideConnected) end

---Shorthand for creating rectangular PolygonShapes. 
---
---By default, the local origin is located at the '''center''' of the rectangle as opposed to the top left for graphics.
---
---[Wiki](https://love2d.org/wiki/love.physics.newRectangleShape)
---
---@param width number# The width of the rectangle.
---@param height number# The height of the rectangle.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newRectangleShape(width, height) end

---Shorthand for creating rectangular PolygonShapes. 
---
---By default, the local origin is located at the '''center''' of the rectangle as opposed to the top left for graphics.
---
---[Wiki](https://love2d.org/wiki/love.physics.newRectangleShape)
---
---@param x number# The offset along the x-axis.
---@param y number# The offset along the y-axis.
---@param width number# The width of the rectangle.
---@param height number# The height of the rectangle.
---@param angle? number# (0) The initial angle of the rectangle.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newRectangleShape(x, y, width, height, angle) end

---Creates a pivot joint between two bodies.
---
---This joint connects two bodies to a point around which they can pivot.
---
---[Wiki](https://love2d.org/wiki/love.physics.newRevoluteJoint)
---
---@param body1 love.Body# The first body.
---@param body2 love.Body# The second body.
---@param x number# The x position of the connecting point.
---@param y number# The y position of the connecting point.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newRevoluteJoint(body1, body2, x, y, collideConnected) end

---Creates a pivot joint between two bodies.
---
---This joint connects two bodies to a point around which they can pivot.
---
---[Wiki](https://love2d.org/wiki/love.physics.newRevoluteJoint)
---
---@param body1 love.Body# The first body.
---@param body2 love.Body# The second body.
---@param x1 number# The x position of the first connecting point.
---@param y1 number# The y position of the first connecting point.
---@param x2 number# The x position of the second connecting point.
---@param y2 number# The y position of the second connecting point.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@param referenceAngle? number# (0) The reference angle between body1 and body2, in radians.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newRevoluteJoint(body1, body2, x1, y1, x2, y2, collideConnected, referenceAngle) end

---Creates a joint between two bodies. Its only function is enforcing a max distance between these bodies.
---
---[Wiki](https://love2d.org/wiki/love.physics.newRopeJoint)
---
---@param body1 love.Body# The first body to attach to the joint.
---@param body2 love.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point.
---@param y1 number# The y position of the first anchor point.
---@param x2 number# The x position of the second anchor point.
---@param y2 number# The y position of the second anchor point.
---@param maxLength number# The maximum distance for the bodies.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newRopeJoint(body1, body2, x1, y1, x2, y2, maxLength, collideConnected) end

---Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.
---
---[Wiki](https://love2d.org/wiki/love.physics.newWeldJoint)
---
---@param body1 love.Body# The first body to attach to the joint.
---@param body2 love.Body# The second body to attach to the joint.
---@param x number# The x position of the anchor point (world space).
---@param y number# The y position of the anchor point (world space).
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newWeldJoint(body1, body2, x, y, collideConnected) end

---Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.
---
---[Wiki](https://love2d.org/wiki/love.physics.newWeldJoint)
---
---@param body1 love.Body# The first body to attach to the joint.
---@param body2 love.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point (world space).
---@param y1 number# The y position of the first anchor point (world space).
---@param x2 number# The x position of the second anchor point (world space).
---@param y2 number# The y position of the second anchor point (world space).
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newWeldJoint(body1, body2, x1, y1, x2, y2, collideConnected) end

---Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.
---
---[Wiki](https://love2d.org/wiki/love.physics.newWeldJoint)
---
---@param body1 love.Body# The first body to attach to the joint.
---@param body2 love.Body# The second body to attach to the joint.
---@param x1 number# The x position of the first anchor point (world space).
---@param y1 number# The y position of the first anchor point  (world space).
---@param x2 number# The x position of the second anchor point (world space).
---@param y2 number# The y position of the second anchor point (world space).
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@param referenceAngle? number# (0) The reference angle between body1 and body2, in radians.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newWeldJoint(body1, body2, x1, y1, x2, y2, collideConnected, referenceAngle) end

---Creates a wheel joint.
---
---[Wiki](https://love2d.org/wiki/love.physics.newWheelJoint)
---
---@param body1 love.Body# The first body.
---@param body2 love.Body# The second body.
---@param x number# The x position of the anchor point.
---@param y number# The y position of the anchor point.
---@param ax number# The x position of the axis unit vector.
---@param ay number# The y position of the axis unit vector.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newWheelJoint(body1, body2, x, y, ax, ay, collideConnected) end

---Creates a wheel joint.
---
---[Wiki](https://love2d.org/wiki/love.physics.newWheelJoint)
---
---@param body1 love.Body# The first body.
---@param body2 love.Body# The second body.
---@param x1 number# The x position of the first anchor point.
---@param y1 number# The y position of the first anchor point.
---@param x2 number# The x position of the second anchor point.
---@param y2 number# The y position of the second anchor point.
---@param ax number# The x position of the axis unit vector.
---@param ay number# The y position of the axis unit vector.
---@param collideConnected? boolean# (false) Specifies whether the two bodies should collide with each other.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newWheelJoint(body1, body2, x1, y1, x2, y2, ax, ay, collideConnected) end

---Creates a new World.
---
---[Wiki](https://love2d.org/wiki/love.physics.newWorld)
---
---@param xg? number# (0) The x component of gravity.
---@param yg? number# (0) The y component of gravity.
---@param sleep? boolean# (true) Whether the bodies in this world are allowed to sleep.
---@diagnostic disable-next-line: args-after-dots
function love.physics.newWorld(xg, yg, sleep) end

---Sets the pixels to meter scale factor.
---
---All coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations.
---
---It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30.
---
---[Wiki](https://love2d.org/wiki/love.physics.setMeter)
---
---@param scale number# The scale factor as an integer.
---@diagnostic disable-next-line: args-after-dots
function love.physics.setMeter(scale) end

---Creates a new copy of current decoder.
---
---The new decoder will start decoding from the beginning of the audio stream.
---
---[Wiki](https://love2d.org/wiki/Decoder:clone)
---
---@diagnostic disable-next-line: args-after-dots
function Decoder:clone() end

---Decodes the audio and returns a SoundData object containing the decoded audio data.
---
---[Wiki](https://love2d.org/wiki/Decoder:decode)
---
---@diagnostic disable-next-line: args-after-dots
function Decoder:decode() end

---Returns the number of bits per sample.
---
---[Wiki](https://love2d.org/wiki/Decoder:getBitDepth)
---
---@diagnostic disable-next-line: args-after-dots
function Decoder:getBitDepth() end

---Returns the number of channels in the stream.
---
---[Wiki](https://love2d.org/wiki/Decoder:getChannelCount)
---
---@diagnostic disable-next-line: args-after-dots
function Decoder:getChannelCount() end

---Gets the duration of the sound file. It may not always be sample-accurate, and it may return -1 if the duration cannot be determined at all.
---
---[Wiki](https://love2d.org/wiki/Decoder:getDuration)
---
---@diagnostic disable-next-line: args-after-dots
function Decoder:getDuration() end

---Returns the sample rate of the Decoder.
---
---[Wiki](https://love2d.org/wiki/Decoder:getSampleRate)
---
---@diagnostic disable-next-line: args-after-dots
function Decoder:getSampleRate() end

---Sets the currently playing position of the Decoder.
---
---[Wiki](https://love2d.org/wiki/Decoder:seek)
---
---@param offset number# The position to seek to, in seconds.
---@diagnostic disable-next-line: args-after-dots
function Decoder:seek(offset) end

---Returns the number of bits per sample.
---
---[Wiki](https://love2d.org/wiki/SoundData:getBitDepth)
---
---@diagnostic disable-next-line: args-after-dots
function SoundData:getBitDepth() end

---Returns the number of channels in the SoundData.
---
---[Wiki](https://love2d.org/wiki/SoundData:getChannelCount)
---
---@diagnostic disable-next-line: args-after-dots
function SoundData:getChannelCount() end

---Gets the duration of the sound data.
---
---[Wiki](https://love2d.org/wiki/SoundData:getDuration)
---
---@diagnostic disable-next-line: args-after-dots
function SoundData:getDuration() end

---Gets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
---
---[Wiki](https://love2d.org/wiki/SoundData:getSample)
---
---@param i number# An integer value specifying the position of the sample (starting at 0).
---@diagnostic disable-next-line: args-after-dots
function SoundData:getSample(i) end

---Gets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
---
---[Wiki](https://love2d.org/wiki/SoundData:getSample)
---
---@param i number# An integer value specifying the position of the sample (starting at 0).
---@param channel number# The index of the channel to get within the given sample.
---@diagnostic disable-next-line: args-after-dots
function SoundData:getSample(i, channel) end

---Returns the number of samples per channel of the SoundData.
---
---[Wiki](https://love2d.org/wiki/SoundData:getSampleCount)
---
---@diagnostic disable-next-line: args-after-dots
function SoundData:getSampleCount() end

---Returns the sample rate of the SoundData.
---
---[Wiki](https://love2d.org/wiki/SoundData:getSampleRate)
---
---@diagnostic disable-next-line: args-after-dots
function SoundData:getSampleRate() end

---Sets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
---
---[Wiki](https://love2d.org/wiki/SoundData:setSample)
---
---@param i number# An integer value specifying the position of the sample (starting at 0).
---@param sample number# The normalized samplepoint (range -1.0 to 1.0).
---@diagnostic disable-next-line: args-after-dots
function SoundData:setSample(i, sample) end

---Sets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.
---
---[Wiki](https://love2d.org/wiki/SoundData:setSample)
---
---@param i number# An integer value specifying the position of the sample (starting at 0).
---@param channel number# The index of the channel to set within the given sample.
---@param sample number# The normalized samplepoint (range -1.0 to 1.0).
---@diagnostic disable-next-line: args-after-dots
function SoundData:setSample(i, channel, sample) end

---Attempts to find a decoder for the encoded sound data in the specified file.
---
---[Wiki](https://love2d.org/wiki/love.sound.newDecoder)
---
---@param file love.File# The file with encoded sound data.
---@param buffer? number# (2048) The size of each decoded chunk, in bytes.
---@diagnostic disable-next-line: args-after-dots
function love.sound.newDecoder(file, buffer) end

---Attempts to find a decoder for the encoded sound data in the specified file.
---
---[Wiki](https://love2d.org/wiki/love.sound.newDecoder)
---
---@param filename string# The filename of the file with encoded sound data.
---@param buffer? number# (2048) The size of each decoded chunk, in bytes.
---@diagnostic disable-next-line: args-after-dots
function love.sound.newDecoder(filename, buffer) end

---Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.
---
---The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.
---
---[Wiki](https://love2d.org/wiki/love.sound.newSoundData)
---
---@param filename string# The file name of the file to load.
---@diagnostic disable-next-line: args-after-dots
function love.sound.newSoundData(filename) end

---Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.
---
---The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.
---
---[Wiki](https://love2d.org/wiki/love.sound.newSoundData)
---
---@param file love.File# A File pointing to an audio file.
---@diagnostic disable-next-line: args-after-dots
function love.sound.newSoundData(file) end

---Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.
---
---The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.
---
---[Wiki](https://love2d.org/wiki/love.sound.newSoundData)
---
---@param decoder love.Decoder# Decode data from this Decoder until EOF.
---@diagnostic disable-next-line: args-after-dots
function love.sound.newSoundData(decoder) end

---Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.
---
---The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.
---
---[Wiki](https://love2d.org/wiki/love.sound.newSoundData)
---
---@param samples number# Total number of samples.
---@param rate? number# (44100) Number of samples per second
---@param bits? number# (16) Bits per sample (8 or 16).
---@param channels? number# (2) Either 1 for mono or 2 for stereo.
---@diagnostic disable-next-line: args-after-dots
function love.sound.newSoundData(samples, rate, bits, channels) end

---Gets text from the clipboard.
---
---[Wiki](https://love2d.org/wiki/love.system.getClipboardText)
---
---@diagnostic disable-next-line: args-after-dots
function love.system.getClipboardText() end

---Gets the current operating system. In general, LÖVE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.)
---
---[Wiki](https://love2d.org/wiki/love.system.getOS)
---
---@diagnostic disable-next-line: args-after-dots
function love.system.getOS() end

---Gets information about the system's power supply.
---
---[Wiki](https://love2d.org/wiki/love.system.getPowerInfo)
---
---@diagnostic disable-next-line: args-after-dots
function love.system.getPowerInfo() end

---Gets the amount of logical processor in the system.
---
---[Wiki](https://love2d.org/wiki/love.system.getProcessorCount)
---
---@diagnostic disable-next-line: args-after-dots
function love.system.getProcessorCount() end

---Gets whether another application on the system is playing music in the background.
---
---Currently this is implemented on iOS and Android, and will always return false on other operating systems. The t.audio.mixwithsystem flag in love.conf can be used to configure whether background audio / music from other apps should play while LÖVE is open.
---
---[Wiki](https://love2d.org/wiki/love.system.hasBackgroundMusic)
---
---@diagnostic disable-next-line: args-after-dots
function love.system.hasBackgroundMusic() end

---Opens a URL with the user's web or file browser.
---
---[Wiki](https://love2d.org/wiki/love.system.openURL)
---
---@param url string# The URL to open. Must be formatted as a proper URL.
---@diagnostic disable-next-line: args-after-dots
function love.system.openURL(url) end

---Puts text in the clipboard.
---
---[Wiki](https://love2d.org/wiki/love.system.setClipboardText)
---
---@param text string# The new text to hold in the system's clipboard.
---@diagnostic disable-next-line: args-after-dots
function love.system.setClipboardText(text) end

---Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor.
---
---[Wiki](https://love2d.org/wiki/love.system.vibrate)
---
---@param seconds? number# (0.5) The duration to vibrate for. If called on an iOS device, it will always vibrate for 0.5 seconds due to limitations in the iOS system APIs.
---@diagnostic disable-next-line: args-after-dots
function love.system.vibrate(seconds) end

---Clears all the messages in the Channel queue.
---
---[Wiki](https://love2d.org/wiki/Channel:clear)
---
---@diagnostic disable-next-line: args-after-dots
function Channel:clear() end

---Retrieves the value of a Channel message and removes it from the message queue.
---
---It waits until a message is in the queue then returns the message value.
---
---[Wiki](https://love2d.org/wiki/Channel:demand)
---
---@diagnostic disable-next-line: args-after-dots
function Channel:demand() end

---Retrieves the value of a Channel message and removes it from the message queue.
---
---It waits until a message is in the queue then returns the message value.
---
---[Wiki](https://love2d.org/wiki/Channel:demand)
---
---@param timeout number# The maximum amount of time to wait.
---@diagnostic disable-next-line: args-after-dots
function Channel:demand(timeout) end

---Retrieves the number of messages in the thread Channel queue.
---
---[Wiki](https://love2d.org/wiki/Channel:getCount)
---
---@diagnostic disable-next-line: args-after-dots
function Channel:getCount() end

---Gets whether a pushed value has been popped or otherwise removed from the Channel.
---
---[Wiki](https://love2d.org/wiki/Channel:hasRead)
---
---@param id number# An id value previously returned by Channel:push.
---@diagnostic disable-next-line: args-after-dots
function Channel:hasRead(id) end

---Retrieves the value of a Channel message, but leaves it in the queue.
---
---It returns nil if there's no message in the queue.
---
---[Wiki](https://love2d.org/wiki/Channel:peek)
---
---@diagnostic disable-next-line: args-after-dots
function Channel:peek() end

---Executes the specified function atomically with respect to this Channel.
---
---Calling multiple methods in a row on the same Channel is often useful. However if multiple Threads are calling this Channel's methods at the same time, the different calls on each Thread might end up interleaved (e.g. one or more of the second thread's calls may happen in between the first thread's calls.)
---
---This method avoids that issue by making sure the Thread calling the method has exclusive access to the Channel until the specified function has returned.
---
---[Wiki](https://love2d.org/wiki/Channel:performAtomic)
---
---@param func fun(channel:love.Channel, ...:any):...: any# The function to call, the form of function(channel, arg1, arg2, ...) end. The Channel is passed as the first argument to the function when it is called.
---@param ... any# Additional arguments that the given function will receive when it is called.
---@diagnostic disable-next-line: args-after-dots
function Channel:performAtomic(func, ...) end

---Retrieves the value of a Channel message and removes it from the message queue.
---
---It returns nil if there are no messages in the queue.
---
---[Wiki](https://love2d.org/wiki/Channel:pop)
---
---@diagnostic disable-next-line: args-after-dots
function Channel:pop() end

---Send a message to the thread Channel.
---
---See Variant for the list of supported types.
---
---[Wiki](https://love2d.org/wiki/Channel:push)
---
---@param value love.Variant# The contents of the message.
---@diagnostic disable-next-line: args-after-dots
function Channel:push(value) end

---Send a message to the thread Channel and wait for a thread to accept it.
---
---See Variant for the list of supported types.
---
---[Wiki](https://love2d.org/wiki/Channel:supply)
---
---@param value love.Variant# The contents of the message.
---@diagnostic disable-next-line: args-after-dots
function Channel:supply(value) end

---Send a message to the thread Channel and wait for a thread to accept it.
---
---See Variant for the list of supported types.
---
---[Wiki](https://love2d.org/wiki/Channel:supply)
---
---@param value love.Variant# The contents of the message.
---@param timeout number# The maximum amount of time to wait.
---@diagnostic disable-next-line: args-after-dots
function Channel:supply(value, timeout) end

---Retrieves the error string from the thread if it produced an error.
---
---[Wiki](https://love2d.org/wiki/Thread:getError)
---
---@diagnostic disable-next-line: args-after-dots
function Thread:getError() end

---Returns whether the thread is currently running.
---
---Threads which are not running can be (re)started with Thread:start.
---
---[Wiki](https://love2d.org/wiki/Thread:isRunning)
---
---@diagnostic disable-next-line: args-after-dots
function Thread:isRunning() end

---Starts the thread.
---
---Beginning with version 0.9.0, threads can be restarted after they have completed their execution.
---
---[Wiki](https://love2d.org/wiki/Thread:start)
---
---@diagnostic disable-next-line: args-after-dots
function Thread:start() end

---Starts the thread.
---
---Beginning with version 0.9.0, threads can be restarted after they have completed their execution.
---
---[Wiki](https://love2d.org/wiki/Thread:start)
---
---@param ... love.Variant# A string, number, boolean, LÖVE object, or simple table.
---@diagnostic disable-next-line: args-after-dots
function Thread:start(...) end

---Wait for a thread to finish.
---
---This call will block until the thread finishes.
---
---[Wiki](https://love2d.org/wiki/Thread:wait)
---
---@diagnostic disable-next-line: args-after-dots
function Thread:wait() end

---Creates or retrieves a named thread channel.
---
---[Wiki](https://love2d.org/wiki/love.thread.getChannel)
---
---@param name string# The name of the channel you want to create or retrieve.
---@diagnostic disable-next-line: args-after-dots
function love.thread.getChannel(name) end

---Create a new unnamed thread channel.
---
---One use for them is to pass new unnamed channels to other threads via Channel:push on a named channel.
---
---[Wiki](https://love2d.org/wiki/love.thread.newChannel)
---
---@diagnostic disable-next-line: args-after-dots
function love.thread.newChannel() end

---Creates a new Thread from a filename, string or FileData object containing Lua code.
---
---[Wiki](https://love2d.org/wiki/love.thread.newThread)
---
---@param filename string# The name of the Lua file to use as the source.
---@diagnostic disable-next-line: args-after-dots
function love.thread.newThread(filename) end

---Creates a new Thread from a filename, string or FileData object containing Lua code.
---
---[Wiki](https://love2d.org/wiki/love.thread.newThread)
---
---@param fileData love.FileData# The FileData containing the Lua code to use as the source.
---@diagnostic disable-next-line: args-after-dots
function love.thread.newThread(fileData) end

---Creates a new Thread from a filename, string or FileData object containing Lua code.
---
---[Wiki](https://love2d.org/wiki/love.thread.newThread)
---
---@param codestring string# A string containing the Lua code to use as the source. It needs to either be at least 1024 characters long, or contain at least one newline.
---@diagnostic disable-next-line: args-after-dots
function love.thread.newThread(codestring) end

---Returns the average delta time (seconds per frame) over the last second.
---
---[Wiki](https://love2d.org/wiki/love.timer.getAverageDelta)
---
---@diagnostic disable-next-line: args-after-dots
function love.timer.getAverageDelta() end

---Returns the time between the last two frames.
---
---[Wiki](https://love2d.org/wiki/love.timer.getDelta)
---
---@diagnostic disable-next-line: args-after-dots
function love.timer.getDelta() end

---Returns the current frames per second.
---
---[Wiki](https://love2d.org/wiki/love.timer.getFPS)
---
---@diagnostic disable-next-line: args-after-dots
function love.timer.getFPS() end

---Returns the value of a timer with an unspecified starting time.
---
---This function should only be used to calculate differences between points in time, as the starting time of the timer is unknown.
---
---[Wiki](https://love2d.org/wiki/love.timer.getTime)
---
---@diagnostic disable-next-line: args-after-dots
function love.timer.getTime() end

---Pauses the current thread for the specified amount of time.
---
---[Wiki](https://love2d.org/wiki/love.timer.sleep)
---
---@param s number# Seconds to sleep for.
---@diagnostic disable-next-line: args-after-dots
function love.timer.sleep(s) end

---Measures the time between two frames.
---
---Calling this changes the return value of love.timer.getDelta.
---
---[Wiki](https://love2d.org/wiki/love.timer.step)
---
---@diagnostic disable-next-line: args-after-dots
function love.timer.step() end

---Gets the current position of the specified touch-press, in pixels.
---
---[Wiki](https://love2d.org/wiki/love.touch.getPosition)
---
---@param id lightuserdata# The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values.
---@diagnostic disable-next-line: args-after-dots
function love.touch.getPosition(id) end

---Gets the current pressure of the specified touch-press.
---
---[Wiki](https://love2d.org/wiki/love.touch.getPressure)
---
---@param id lightuserdata# The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values.
---@diagnostic disable-next-line: args-after-dots
function love.touch.getPressure(id) end

---Gets a list of all active touch-presses.
---
---[Wiki](https://love2d.org/wiki/love.touch.getTouches)
---
---@diagnostic disable-next-line: args-after-dots
function love.touch.getTouches() end

---Gets the filename of the VideoStream.
---
---[Wiki](https://love2d.org/wiki/VideoStream:getFilename)
---
---@diagnostic disable-next-line: args-after-dots
function VideoStream:getFilename() end

---Gets whether the VideoStream is playing.
---
---[Wiki](https://love2d.org/wiki/VideoStream:isPlaying)
---
---@diagnostic disable-next-line: args-after-dots
function VideoStream:isPlaying() end

---Pauses the VideoStream.
---
---[Wiki](https://love2d.org/wiki/VideoStream:pause)
---
---@diagnostic disable-next-line: args-after-dots
function VideoStream:pause() end

---Plays the VideoStream.
---
---[Wiki](https://love2d.org/wiki/VideoStream:play)
---
---@diagnostic disable-next-line: args-after-dots
function VideoStream:play() end

---Rewinds the VideoStream. Synonym to VideoStream:seek(0).
---
---[Wiki](https://love2d.org/wiki/VideoStream:rewind)
---
---@diagnostic disable-next-line: args-after-dots
function VideoStream:rewind() end

---Sets the current playback position of the VideoStream.
---
---[Wiki](https://love2d.org/wiki/VideoStream:seek)
---
---@param offset number# The time in seconds since the beginning of the VideoStream.
---@diagnostic disable-next-line: args-after-dots
function VideoStream:seek(offset) end

---Gets the current playback position of the VideoStream.
---
---[Wiki](https://love2d.org/wiki/VideoStream:tell)
---
---@diagnostic disable-next-line: args-after-dots
function VideoStream:tell() end

---Creates a new VideoStream. Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see love.graphics.newVideo for that.
---
---[Wiki](https://love2d.org/wiki/love.video.newVideoStream)
---
---@param filename string# The file path to the Ogg Theora video file.
---@diagnostic disable-next-line: args-after-dots
function love.video.newVideoStream(filename) end

---Creates a new VideoStream. Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see love.graphics.newVideo for that.
---
---[Wiki](https://love2d.org/wiki/love.video.newVideoStream)
---
---@param file love.File# The File object containing the Ogg Theora video.
---@diagnostic disable-next-line: args-after-dots
function love.video.newVideoStream(file) end

---Closes the window. It can be reopened with love.window.setMode.
---
---[Wiki](https://love2d.org/wiki/love.window.close)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.close() end

---Converts a number from pixels to density-independent units.
---
---The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case.
---
---This function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
---
---Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.
---
---[Wiki](https://love2d.org/wiki/love.window.fromPixels)
---
---@param pixelvalue number# A number in pixels to convert to density-independent units.
---@diagnostic disable-next-line: args-after-dots
function love.window.fromPixels(pixelvalue) end

---Converts a number from pixels to density-independent units.
---
---The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case.
---
---This function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
---
---Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.
---
---[Wiki](https://love2d.org/wiki/love.window.fromPixels)
---
---@param px number# The x-axis value of a coordinate in pixels.
---@param py number# The y-axis value of a coordinate in pixels.
---@diagnostic disable-next-line: args-after-dots
function love.window.fromPixels(px, py) end

---Gets the DPI scale factor associated with the window.
---
---The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getDPIScale() would return 2.0 in that case.
---
---The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.
---
---The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
---
---[Wiki](https://love2d.org/wiki/love.window.getDPIScale)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.getDPIScale() end

---Gets the width and height of the desktop.
---
---[Wiki](https://love2d.org/wiki/love.window.getDesktopDimensions)
---
---@param displayindex? number# (1) The index of the display, if multiple monitors are available.
---@diagnostic disable-next-line: args-after-dots
function love.window.getDesktopDimensions(displayindex) end

---Gets the number of connected monitors.
---
---[Wiki](https://love2d.org/wiki/love.window.getDisplayCount)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.getDisplayCount() end

---Gets the name of a display.
---
---[Wiki](https://love2d.org/wiki/love.window.getDisplayName)
---
---@param displayindex? number# (1) The index of the display to get the name of.
---@diagnostic disable-next-line: args-after-dots
function love.window.getDisplayName(displayindex) end

---Gets current device display orientation.
---
---[Wiki](https://love2d.org/wiki/love.window.getDisplayOrientation)
---
---@param displayindex? number# (nil) Display index to get its display orientation, or nil for default display index.
---@diagnostic disable-next-line: args-after-dots
function love.window.getDisplayOrientation(displayindex) end

---Gets whether the window is fullscreen.
---
---[Wiki](https://love2d.org/wiki/love.window.getFullscreen)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.getFullscreen() end

---Gets a list of supported fullscreen modes.
---
---[Wiki](https://love2d.org/wiki/love.window.getFullscreenModes)
---
---@param displayindex? number# (1) The index of the display, if multiple monitors are available.
---@diagnostic disable-next-line: args-after-dots
function love.window.getFullscreenModes(displayindex) end

---Gets the window icon.
---
---[Wiki](https://love2d.org/wiki/love.window.getIcon)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.getIcon() end

---Gets the display mode and properties of the window.
---
---[Wiki](https://love2d.org/wiki/love.window.getMode)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.getMode() end

---Gets the position of the window on the screen.
---
---The window position is in the coordinate space of the display it is currently in.
---
---[Wiki](https://love2d.org/wiki/love.window.getPosition)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.getPosition() end

---Gets area inside the window which is known to be unobstructed by a system title bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by the user.
---
---[Wiki](https://love2d.org/wiki/love.window.getSafeArea)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.getSafeArea() end

---Gets the window title.
---
---[Wiki](https://love2d.org/wiki/love.window.getTitle)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.getTitle() end

---Gets current vertical synchronization (vsync).
---
---[Wiki](https://love2d.org/wiki/love.window.getVSync)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.getVSync() end

---Checks if the game window has keyboard focus.
---
---[Wiki](https://love2d.org/wiki/love.window.hasFocus)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.hasFocus() end

---Checks if the game window has mouse focus.
---
---[Wiki](https://love2d.org/wiki/love.window.hasMouseFocus)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.hasMouseFocus() end

---Gets whether the display is allowed to sleep while the program is running.
---
---Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.
---
---[Wiki](https://love2d.org/wiki/love.window.isDisplaySleepEnabled)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.isDisplaySleepEnabled() end

---Gets whether the Window is currently maximized.
---
---The window can be maximized if it is not fullscreen and is resizable, and either the user has pressed the window's Maximize button or love.window.maximize has been called.
---
---[Wiki](https://love2d.org/wiki/love.window.isMaximized)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.isMaximized() end

---Gets whether the Window is currently minimized.
---
---[Wiki](https://love2d.org/wiki/love.window.isMinimized)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.isMinimized() end

---Checks if the window is open.
---
---[Wiki](https://love2d.org/wiki/love.window.isOpen)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.isOpen() end

---Checks if the game window is visible.
---
---The window is considered visible if it's not minimized and the program isn't hidden.
---
---[Wiki](https://love2d.org/wiki/love.window.isVisible)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.isVisible() end

---Makes the window as large as possible.
---
---This function has no effect if the window isn't resizable, since it essentially programmatically presses the window's 'maximize' button.
---
---[Wiki](https://love2d.org/wiki/love.window.maximize)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.maximize() end

---Minimizes the window to the system's task bar / dock.
---
---[Wiki](https://love2d.org/wiki/love.window.minimize)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.minimize() end

---Causes the window to request the attention of the user if it is not in the foreground.
---
---In Windows the taskbar icon will flash, and in OS X the dock icon will bounce.
---
---[Wiki](https://love2d.org/wiki/love.window.requestAttention)
---
---@param continuous? boolean# (false) Whether to continuously request attention until the window becomes active, or to do it only once.
---@diagnostic disable-next-line: args-after-dots
function love.window.requestAttention(continuous) end

---Restores the size and position of the window if it was minimized or maximized.
---
---[Wiki](https://love2d.org/wiki/love.window.restore)
---
---@diagnostic disable-next-line: args-after-dots
function love.window.restore() end

---Sets whether the display is allowed to sleep while the program is running.
---
---Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.
---
---[Wiki](https://love2d.org/wiki/love.window.setDisplaySleepEnabled)
---
---@param enable boolean# True to enable system display sleep, false to disable it.
---@diagnostic disable-next-line: args-after-dots
function love.window.setDisplaySleepEnabled(enable) end

---Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.
---
---[Wiki](https://love2d.org/wiki/love.window.setFullscreen)
---
---@param fullscreen boolean# Whether to enter or exit fullscreen mode.
---@diagnostic disable-next-line: args-after-dots
function love.window.setFullscreen(fullscreen) end

---Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.
---
---[Wiki](https://love2d.org/wiki/love.window.setFullscreen)
---
---@param fullscreen boolean# Whether to enter or exit fullscreen mode.
---@param fstype love.FullscreenType# The type of fullscreen mode to use.
---@diagnostic disable-next-line: args-after-dots
function love.window.setFullscreen(fullscreen, fstype) end

---Sets the window icon until the game is quit. Not all operating systems support very large icon images.
---
---[Wiki](https://love2d.org/wiki/love.window.setIcon)
---
---@param imagedata love.ImageData# The window icon image.
---@diagnostic disable-next-line: args-after-dots
function love.window.setIcon(imagedata) end

---Sets the display mode and properties of the window.
---
---If width or height is 0, setMode will use the width and height of the desktop. 
---
---Changing the display mode may have side effects: for example, canvases will be cleared and values sent to shaders with canvases beforehand or re-draw to them afterward if you need to.
---
---[Wiki](https://love2d.org/wiki/love.window.setMode)
---
---@param width number# Display width.
---@param height number# Display height.
---@param flags {
---fullscreen : boolean,
---fullscreentype : love.FullscreenType,
---vsync : boolean,
---msaa : number,
---stencil : boolean,
---depth : number,
---resizable : boolean,
---borderless : boolean,
---centered : boolean,
---display : number,
---minwidth : number,
---minheight : number,
---highdpi : boolean,
---x : number,
---y : number,
---usedpiscale : boolean,
---srgb : boolean}# The flags table with the options:
---@diagnostic disable-next-line: args-after-dots
function love.window.setMode(width, height, flags) end

---Sets the position of the window on the screen.
---
---The window position is in the coordinate space of the specified display.
---
---[Wiki](https://love2d.org/wiki/love.window.setPosition)
---
---@param x number# The x-coordinate of the window's position.
---@param y number# The y-coordinate of the window's position.
---@param displayindex? number# (1) The index of the display that the new window position is relative to.
---@diagnostic disable-next-line: args-after-dots
function love.window.setPosition(x, y, displayindex) end

---Sets the window title.
---
---[Wiki](https://love2d.org/wiki/love.window.setTitle)
---
---@param title string# The new window title.
---@diagnostic disable-next-line: args-after-dots
function love.window.setTitle(title) end

---Sets vertical synchronization mode.
---
---[Wiki](https://love2d.org/wiki/love.window.setVSync)
---
---@param vsync number# VSync number: 1 to enable, 0 to disable, and -1 for adaptive vsync.
---@diagnostic disable-next-line: args-after-dots
function love.window.setVSync(vsync) end

---Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.
---
---[Wiki](https://love2d.org/wiki/love.window.showMessageBox)
---
---@param title string# The title of the message box.
---@param message string# The text inside the message box.
---@param type? love.MessageBoxType# ('info') The type of the message box.
---@param attachtowindow? boolean# (true) Whether the message box should be attached to the love window or free-floating.
---@diagnostic disable-next-line: args-after-dots
function love.window.showMessageBox(title, message, type, attachtowindow) end

---Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.
---
---[Wiki](https://love2d.org/wiki/love.window.showMessageBox)
---
---@param title string# The title of the message box.
---@param message string# The text inside the message box.
---@param buttonlist table# A table containing a list of button names to show. The table can also contain the fields enterbutton and escapebutton, which should be the index of the default button to use when the user presses 'enter' or 'escape', respectively.
---@param type? love.MessageBoxType# ('info') The type of the message box.
---@param attachtowindow? boolean# (true) Whether the message box should be attached to the love window or free-floating.
---@diagnostic disable-next-line: args-after-dots
function love.window.showMessageBox(title, message, buttonlist, type, attachtowindow) end

---Converts a number from density-independent units to pixels.
---
---The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case.
---
---This is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
---
---Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.
---
---[Wiki](https://love2d.org/wiki/love.window.toPixels)
---
---@param value number# A number in density-independent units to convert to pixels.
---@diagnostic disable-next-line: args-after-dots
function love.window.toPixels(value) end

---Converts a number from density-independent units to pixels.
---
---The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case.
---
---This is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.
---
---Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.
---
---[Wiki](https://love2d.org/wiki/love.window.toPixels)
---
---@param x number# The x-axis value of a coordinate in density-independent units to convert to pixels.
---@param y number# The y-axis value of a coordinate in density-independent units to convert to pixels.
---@diagnostic disable-next-line: args-after-dots
function love.window.toPixels(x, y) end

---Sets the display mode and properties of the window, without modifying unspecified properties.
---
---If width or height is 0, updateMode will use the width and height of the desktop. 
---
---Changing the display mode may have side effects: for example, canvases will be cleared. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to.
---
---[Wiki](https://love2d.org/wiki/love.window.updateMode)
---
---@param width number# Window width.
---@param height number# Window height.
---@param settings {
---fullscreen : boolean,
---fullscreentype : love.FullscreenType,
---vsync : boolean,
---msaa : number,
---resizable : boolean,
---borderless : boolean,
---centered : boolean,
---display : number,
---minwidth : number,
---minheight : number,
---highdpi : boolean,
---x : number,
---y : number}# The settings table with the following optional fields. Any field not filled in will use the current value that would be returned by love.window.getMode.
---@diagnostic disable-next-line: args-after-dots
function love.window.updateMode(width, height, settings) end

---Creates a new copy of the Data object.
---
---[Wiki](https://love2d.org/wiki/Data:clone)
---
---@diagnostic disable-next-line: args-after-dots
function Data:clone() end

---Gets an FFI pointer to the Data.
---
---This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used.
---
---[Wiki](https://love2d.org/wiki/Data:getFFIPointer)
---
---@diagnostic disable-next-line: args-after-dots
function Data:getFFIPointer() end

---Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI.
---
---[Wiki](https://love2d.org/wiki/Data:getPointer)
---
---@diagnostic disable-next-line: args-after-dots
function Data:getPointer() end

---Gets the Data's size in bytes.
---
---[Wiki](https://love2d.org/wiki/Data:getSize)
---
---@diagnostic disable-next-line: args-after-dots
function Data:getSize() end

---Gets the full Data as a string.
---
---[Wiki](https://love2d.org/wiki/Data:getString)
---
---@diagnostic disable-next-line: args-after-dots
function Data:getString() end

---Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other LÖVE object or thread.
---
---This method can be used to immediately clean up resources without waiting for Lua's garbage collector.
---
---[Wiki](https://love2d.org/wiki/Object:release)
---
---@diagnostic disable-next-line: args-after-dots
function Object:release() end

---Gets the type of the object as a string.
---
---[Wiki](https://love2d.org/wiki/Object:type)
---
---@diagnostic disable-next-line: args-after-dots
function Object:type() end

---Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true.
---
---[Wiki](https://love2d.org/wiki/Object:typeOf)
---
---@param name string# The name of the type to check for.
---@diagnostic disable-next-line: args-after-dots
function Object:typeOf(name) end

---Gets the current running version of LÖVE.
---
---[Wiki](https://love2d.org/wiki/love.getVersion)
---
---@diagnostic disable-next-line: args-after-dots
function love.getVersion() end

---Gets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.
---
---When deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.
---
---[Wiki](https://love2d.org/wiki/love.hasDeprecationOutput)
---
---@diagnostic disable-next-line: args-after-dots
function love.hasDeprecationOutput() end

---Gets whether the given version is compatible with the current running version of LÖVE.
---
---[Wiki](https://love2d.org/wiki/love.isVersionCompatible)
---
---@param version string# The version to check (for example '11.3' or '0.10.2').
---@diagnostic disable-next-line: args-after-dots
function love.isVersionCompatible(version) end

---Gets whether the given version is compatible with the current running version of LÖVE.
---
---[Wiki](https://love2d.org/wiki/love.isVersionCompatible)
---
---@param major number# The major version to check (for example 11 for 11.3 or 0 for 0.10.2).
---@param minor number# The minor version to check (for example 3 for 11.3 or 10 for 0.10.2).
---@param revision number# The revision of version to check (for example 0 for 11.3 or 2 for 0.10.2).
---@diagnostic disable-next-line: args-after-dots
function love.isVersionCompatible(major, minor, revision) end

---Sets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.
---
---When deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.
---
---[Wiki](https://love2d.org/wiki/love.setDeprecationOutput)
---
---@param enable boolean# Whether to enable or disable deprecation output.
---@diagnostic disable-next-line: args-after-dots
function love.setDeprecationOutput(enable) end

